inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( (Course:>projects.p).grades.s1 - (Course:>projects.p).grades.s1 <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( (Course:>projects.p).grades.s1 - (Course:>projects.p).grades.s1 <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.s1) - ((Course:>projects.p).grades.s1) <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.s1)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.last)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.first)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.last)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.last.first)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.last.last)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades.s1)  <= 1    )
inv15 S: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades&s1->Grades)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades&s1->Grade)  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades&s1->Grade).last  <= 1    )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies ( ((Course:>projects.p).grades&s1->Grade).first  <= 1    )
inv15 S: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) all g: (Course:>projects.p).grades | ((s1 in g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((s1 in g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((s1 in g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades   | ((s1 in g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((s1 in g ) implies ( s2 in g.prev or s2 in g.next))   and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((s1 in g ) implies ( s2 in   g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((  s1 in g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((s1 in   g ) implies ( s2 in g.prev or s2 in g.next)) and ((s2 in g ) implies ( s1 in g.prev or s1 in g.next) )
inv15 T: all disj s1,s2:Student ,p:Project| ( p in s1.projects and p in s2.projects) implies all g: (Course:>projects.p).grades | ((#s1->Grade&g>0 ) implies ( #s2->Grade&g.prev>0 or #s2->Grade&g.next>0)) and ((#s2->Grade&g>0 ) implies ( #s1->Grade&g.prev>0 or #s1->Grade&g.next>0))
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p| ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades.prevs[s1->Grade&c.grades].first ) or  ( s1 in c.grades.prevs[s2->Grade&c.grades].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p| ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades.prevs[s1->Grade&c.grades].first ) or  ( s1 in c.grades.prevs[s2->Grade&c.grades].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p| ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades.prevs[s1->Grade&c.grades].first ) or   ( s1 in c.grades.prevs[s2->Grade&c.grades].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p| ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades.prevs [s1->Grade&c.grades].first ) or ( s1 in c.grades.prevs[s2->Grade&c.grades].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p| ( p in s1.projects and p in s2.projects) implies ( (s2 in   c.grades.prevs[s1->Grade&c.grades].first ) or ( s1 in c.grades.prevs[s2->Grade&c.grades].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  c.grades.prevs[e1].first ) or ( s1 in c.grades.prevs[e2].first )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  c.grades.prev[e1].first ) or ( s1 in c.grades.prevs[e2].first )   )
inv15 T: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  c.grades.prev[e1].first ) or ( s1 in c.grades.prev[e2].first )   )
inv15 T: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  c.grades.prev[e1] ) or ( s1 in c.grades.prev[e2] )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  e1.prev ) or ( s1 e2.prev )   )
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in  e1.prev ) or ( s1 e2.prev ))
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in e1.prev ) or ( s1 e2.prev ))
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades[e1].prev ) or ( s1 e2.prev ))
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades[e1].prev ) or ( s1 c.grades[e2].prev ))
inv15 S: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in c.grades.prevs[e1].first ) or ( s1 c.grades[e2].prev ))
inv15 T: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, g : c.grades, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in g ) or ( s1 in g ))
inv15 T: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, g : c.grades, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in g ) or ( s1 in g ))
inv15 T: all disj s1,s2:Student ,p:Project, c: Course:>projects.p, g : c.grades, e1: s1->Grade&c.grades, e2: s2->Grade&c.grades | ( p in s1.projects and p in s2.projects) implies ( (s2 in g ) or ( s1 in g ))

