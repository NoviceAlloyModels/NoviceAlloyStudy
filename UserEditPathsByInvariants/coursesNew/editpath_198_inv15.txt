inv15 S: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects =>abs(s1.grades[c] - s2.grades[c]) <=
inv15 S: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects =>abs(s1.grades[c] -s2.grades[c]) <= 1
inv15 T: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects => (s1.grades[c] -s2.grades[c]) <= 1 || (s1.grades[c] -s2.grades[c]) >=1
inv15 S: all disj s1,s2 : Student | all c : Course | some p: Project | p in s1.projects and p in s2.projects => p1.((projects.p).grades) = p2.((projects.p).grades)
inv15 B: all disj s1,s2 : Student | all c : Course | some p: Project | p in s1.projects and p in s2.projects => s1.((projects.p).grades) = s2.((projects.p).grades)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => s1.(c.grades) = s2.(c.grades)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades) = s2.(c.grades) + 1) or (s1.(c.grades) = s2.(c.grades) - 1)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades)) = (s2.(c.grades)) + 1 or (s1.(c.grades)) = (s2.(c.grades)) -1
inv15 S: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades)) = minus[(s2.(c.grades)),1] or (s1.(c.grades)) = (s2.(c.grades)) -1
inv15 E:

