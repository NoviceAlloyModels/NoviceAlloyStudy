inv7 B: all s : Student | lone (s.enrolled.projects)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects)))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects)) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects))))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects)))))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects)) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects))) implies (p1=p2)
inv7 S: all s : Student | all p1, p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects)))) implies (p1=p2)
inv7 U: all s : Student, c : Course | lone ((s.projects) & (c.projects))
inv7 S: all s : Student | c : Course | lone ((s.projects) & (c.projects))
inv7 U: all s : Student | all c : Course | lone ((s.projects) & (c.projects))
inv7 S: all s : Student | all p1 : Project | all p2 : Project | ((p1 in s.projects) and (p2 in s.projects) and (p1~(Course <: projects))=(p2.~(Course <: projects))) implies (p1=p2)
inv7 U: all s : Student, c : Course | lone ((s.projects) & (c.projects))

