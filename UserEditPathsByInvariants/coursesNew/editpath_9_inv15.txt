inv15 S: all c: Course, p1: Project, p2: Project | p1 in c.projects && p2 in c.projects && p1 != p2 => all s1: Student, s2: Student | s1 in p1.projects && s2 in p2.projects => abs(c.grades[s1]-c.grades[s2]) <= 1
inv15 S: all c: Course, p1, p2: Project | p1 in c.projects && p2 in c.projects && p1 != p2 => all s1: Student, s2: Student | s1 in p1.projects && s2 in p2.projects => c.grades[s1] = c.grades[s2])
inv15 S: all c: Course, p: Project, s1: Student, s2: Student | p in s1.projects && p in s2.projects => s1 in  c.grades[s1] = c.grades[s2])
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 ->g in c.grades = s2-g in c.grades
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades[s1] = s2 in c.grades[s2]
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades.s1 = s2 in c.grades[s2]
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades.s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades -> s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 -> c.grades s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 -> c.grades s1 = s2 -> c.grades
inv15 B: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => (s1 -> c.grades) = (s2 -> c.grades)
inv15 B: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => (s1 -> c.grades) = (s2 -> c.grades)
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => disj s1 -> c.grades + s2 -> c.grades) >1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => disj (s1 -> c.grades + s2 -> c.grades) >1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	  if (c.grades[s1] > c.grades[s2]) then (c.grades[s1] - c.grades[s2]) <= 1 	  else (c.grades[s2] - c.grades[s1]) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (c.grades[s1] > c.grades[s2]) then (c.grades[s1] - c.grades[s2]) <= 1 	    else (c.grades[s2] - c.grades[s1]) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (s1 -> c.grades >  s2 -> c.grades) then (s1 -> c.grades - s2->c.grades ) <= 1 	    else (s1 -> c.grades - s1 -> c.grades) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (s1 -> c.grades >  s2 -> c.grades) then (s1 -> c.grades - s2->c.grades ) <= 1 	    else (s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	(s1 -> c.grades - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	( c.grades[s1] - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	( c.grades[s1] - c.grades[s2] ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	(s1 -> c.grades - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1

