inv15 T: all c : Course, disj s1, s2 : Student | c in (s1.enrolled & s2.enrolled) and (c.grades.s1 > c.grades.s2 + 1 or c.grades.s1 < c.grades.s2 - 1) implies (s1.projects & s2.projects) not in c.projects
inv15 T: all c : Course, disj s1, s2 : Student | c in (s1.enrolled & s2.enrolled) and (c.grades.s1 > c.grades.s2 + 1 or c.grades.s1 < c.grades.s2 - 1)
inv15 B: all c : Course, disj s1, s2 : Student | c in (s1.enrolled & s2.enrolled)
inv15 B: all disj s1, s2 : Student, c : Course | some (s1.projects & s2.projects & c.projects) implies	  	s1.(c.grades) in (prev[s2.(c.grades)] + s2.(c.grades) + next[s2.(c.grades)])
inv15 B: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies	  	s1.(c.grades) in (prev[s2.(c.grades)] + s2.(c.grades) + next[s2.(c.grades)])
inv15 B: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies (all g1 : s1.(c.grades), g2 : s2.(c.grades) |	  	g1=prev[g2] or g2=prev[g1] or g1=g2)
inv15 B: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies (all g1 : s1.(c.grades), g2 : s2.(c.grades) |	  	g1=prev[g2] or g1=next[g2] or g1=g2)
inv15 S: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies (all g1 : s1.(c.grades), g2 : s2.(c.grades) |	  	g1 in (prev[g2] + g1=next[g2] + g2)
inv15 T: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies (all g1 : s1.(c.grades), g2 : s2.(c.grades) |	  	g1 in (prev[g2] + g1=next[g2] + g2))
inv15 B: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies (all g1 : s1.(c.grades), g2 : s2.(c.grades) |	  	g1 in (prev[g2] + next[g2] + g2))
inv15 U: all disj s1, s2 : Student, c : Course | some ((s1.projects & s2.projects) & c.projects) implies 	  	s1.(c.grades) in (prev[s2.(c.grades)] + next[s2.(c.grades)] + s1.(c.grades))
inv15 B: all disj s1, s2 : Student, c : Course | some s1.projects & s2.projects & c.projects implies 	   (all g1 : s1.(c.grades), g2 : s2.(c.grades) | g1 in prev[g2] + next[g2] + g2)

