inv13 S: all s : Student, c : Course, g : Grade | g = max[s.(c.grades)] => one (s.projects & c.projects) s.projects)
inv13 S: all s : Student, c : Course, g : Grade | max[s.(c.grades)] => one (s.projects & c.projects) s.projects)
inv13 S: all s : Student, c : Course, g : Grade | max[s.(c.grades)] => one (s.projects & c.projects) s.projects)
inv13 S: all s : Student, c : Course, g : Grade | s = c.grades.max[Student.(c.grades)] => one (s.projects & c.projects) s.projects)
inv13 T: all s : Student, c : Course, g : Grade | s = c.grades.max[Student.(c.grades)] => one (s.projects & c.projects)
inv13 T: all s : Student, c : Course | s = c.grades.max[Student.(c.grades)] => one (s.projects & c.projects)
inv13 B: all s : Student, c : Course | s = c.grades.(max[Student.(c.grades)]) => one (s.projects & c.projects)
inv13 B: all s : Student, c : Course | s = c.grades.(max[Student.(c.grades)]) => one (s.projects & c.projects)
inv13 B: all s : Student, c : Course | s = c.grades.(max[Student.(c.grades)]) => lone (s.projects & c.projects)
inv13 B: all s : Student, c : Course | s.(c.grades) = last => one (s.projects & c.projects)

