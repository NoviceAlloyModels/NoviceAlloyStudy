inv3 T: all u : User | ~allIds[u].allIds[u] in iden	}		fun allIds[u : User] : one User -> set Id {		u <: profile.Work.ids
inv3 T: all u : User | ~allIds[u].allIds[u] in iden	}		fun allIds[u : User] : one User -> set Id {		profile.Work.ids
inv3 S: all u : User | ~allIds[u].allIds[u] in iden	}		fun allIds[u : User] : set Id {		u.profile.Work.ids
inv3 S: all u : User | ~allIds[u].allIds[u] in iden	}		fun allIds[u : User] : set Id {		u.profile.Work.ids
inv3 S: all u : User | ~allIds[u].allIds[u] in iden	}		fun allIds(u : User) : set Id {		u.profile.Work.ids
inv3 S: all u : User, some id1, id2 : Id | some u.profile.Work.id1 and u.profile.Work.id2 implies id1 != id2
inv3 S: all u : User, some id1, id2 : Id | some u.profile.Work.id1 and u.profile.Work.id2 implies id1 != id2
inv3 T: all u : User | some id1, id2 : Id | some u.profile.Work.id1 and u.profile.Work.id2 implies id1 != id2
inv3 T: all u : User | some id1, id2 : Id | some u.profile.ids.id1 and u.profile.ids.id2 implies id1 != id2
inv3 T: all u : User | some id1, id2 : Id | some u.profile.ids.id1 and u.profile.ids.id2 implies id1 != id2
inv3 B: all w1, w2 : Work | some u : User | w1 != w2 and (w1 + w2) in u.profile implies no w1.ids & w2.ids
inv3 B: all w1, w2 : Work | some u : User, s : Source | w1 != w2 and (w1 + w2) in u.profile and (w1.source = w2.source) implies no w1.ids & w2.ids
inv3 B: all w1, w2 : Work | some u : User | w1 != w2 and (w1 + w2) in u.profile and (w1.source = w2.source) implies no w1.ids & w2.ids
inv3 C: all w1, w2 : Work | all u : User | w1 != w2 and (w1 + w2) in u.profile and (w1.source = w2.source) implies no w1.ids & w2.ids
inv3 C: all w1, w2 : Work, u : User | w1 != w2 and (w1 + w2) in u.profile and (w1.source = w2.source) implies no w1.ids & w2.ids

