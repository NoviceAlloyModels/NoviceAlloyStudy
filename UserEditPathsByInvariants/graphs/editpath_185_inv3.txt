inv3 U: inv2	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 T: inv2	all n : Node | no n.Node	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 O: inv2	all n : Node | no n.adj	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 S: inv2	all n : Node | n not in adj*	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 S: inv2	all n : Node | n not in n.adj*	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 C: inv2	all n : Node | n not in n.(^adj)	}		pred inv2{	all n1, n2 : Node | n1->n2 in adj implies not n2->n1 in adj
inv3 C: all n : Node | n not in n.(^adj)
inv3 C: all n : Node | n not in n.(^adj)

