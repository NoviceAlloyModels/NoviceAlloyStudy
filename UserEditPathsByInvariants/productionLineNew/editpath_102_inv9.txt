inv9 S: all w: Workstation | w.succ.size = 1 && w.workers.size >= 0
inv9 S: all w: Workstation | #w.succ = 1 && w.workers.size >= 0
inv9 B: all w: Workstation | #w.succ = 1 && lone w.workers
inv9 U: all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2
inv9 B: all w : Workstation | some succ[w] && some w.^succ
inv9 B: all w1, w2 : Workstation | w1 in w2.succ => w1.workers = w2.workers
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) implies (w2 in succ.*succ)
inv9 B: all ws : Workstation | #ws.succ= 1
inv9 B: all ws : Workstation | #ws.succ=0
inv9 B: all ws : Workstation | #ws.succ=1
inv9 U: all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2

