inv5 T: all s: State | s.trans.s
inv5 T: all s: State | s.trans.s
inv5 T: all s1, s2: State | all e: Event |some n: State| e->n in s1.trans = e->n in s2.trans
inv5 T: all s1, s2: State | all e: Event |some n: State| e->n in s1.trans & e->n in s2.trans
inv5 U: all disj s1, s2: State | all e: Event |some n: State| e->n in s1.trans implies e->n in s2.trans
inv5 T: all disj s1, s2: State | all e: Event |some n: State| e->n in s1.trans and e->n in s2.trans implies n.~trans.s1 = n.~trans.s2
inv5 U: all disj s1, s2: State | all e: Event |some n: State| e->n in s1.trans and e->n in s2.trans implies e=e
inv5 B: all disj s1, s2: State | all e1, e2: Event |some n: State| e1->n in s1.trans and e2->n in s2.trans implies e1=e2
inv5 C: all s1,s2: State | s1.trans.State = s2.trans.State
inv5 C: all s1,s2: State | s1.trans.State = s2.trans.State

