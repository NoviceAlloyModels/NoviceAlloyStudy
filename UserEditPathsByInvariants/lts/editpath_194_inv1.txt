inv1 T: iden in ~trans.trans
inv1 T: let t = trans | iden in trans.trans
inv1 T: let t = trans | iden in (trans.trans :> Event)
inv1 T: let t = trans | iden in (trans.trans <: Event)
inv1 T: let t = trans | iden in (trans.trans)
inv1 T: let t = trans | iden in (trans.trans) :> State
inv1 T: let t = trans | iden in (trans.trans) <: State
inv1 T: all e : Event | trans.e.trans
inv1 T: all e : Event | trans.e
inv1 T: all e : Event | e
inv1 T: all e : Event | trans
inv1 T: all e : Event | trans.e
inv1 T: all e : Event | e.trans
inv1 T: all e : Event | trans.State
inv1 T: all e : Event | trans.State
inv1 T: all e : Event | trans.State.e
inv1 T: trans.State
inv1 O: let k = trans.State | iden in ~k.k
inv1 O: let k = trans.State | iden in k.~k
inv1 O: let k = State.trans | iden in k.~k
inv1 O: let k = State.trans | iden in ~k.k
inv1 O: let k = trans.State | iden in ~k.k
inv1 T: let k = trans.State | iden[State] in ~k.k
inv1 T: let k = trans.State | iden(State) in ~k.k
inv1 T: let k = trans.State | iden{State} in ~k.k
inv1 O: let k = trans.State | iden in ~k.k
inv1 C: all s : State | some s.trans
inv1 T: some (State :> trans)
inv1 T: (State :> trans)
inv1 T: (State:>trans)
inv1 T: let s = State <: trans | s.~s in iden
inv1 U: let s = State <: State.trans | s.~s in iden
inv1 B: let s = State <: trans.State | s.~s in iden
inv1 U: let s = State <: trans.Event | s.~s in iden
inv1 U: let s = State <: Event.trans | s.~s in iden
inv1 C: iden[State] in trans.State.Event
inv1 T: iden[State]
inv1 T: iden in trans.State.Event
inv1 T: iden in trans.State.Event

