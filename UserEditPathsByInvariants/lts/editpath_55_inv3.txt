inv3 T: all s : State, e : Event | lone s.trans <: e
inv3 T: all s : State, e : Event | lone (s.trans <: e)
inv3 T: all s : State, e : Event | lone (s.trans <: e)
inv3 T: all s : State, e : Event | lone (s.trans <: e)
inv3 T: all s : State, e : Event | lone ((s.trans) <: e)
inv3 T: all s : State, e : Event | lone (~(s.trans) <: e)
inv3 T: all s : State, e : Event | lone (~(s.trans) <: e)
inv3 T: all s : State, e : Event | lone (~(s.trans) <: e)
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv3 S: all s : State, e : Event | lone e.(s.trans)  	}		adj = {x,y : State | some e : Event | x -> e -> y in trans
inv3 C: all s : State, e : Event | lone e.(s.trans)  	}		fun adj : State -> State {		{x, y : State | some e : Event | x -> e -> y in trans}

