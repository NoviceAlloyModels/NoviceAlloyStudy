inv3 T: all s:State | lone s.(~trans)
inv3 T: all s:State | lone s.~trans
inv3 O: all s:State | lone s.trans
inv3 O: all s:State | lone s.trans
inv3 S: all s:State | all e:Event |
inv3 T: all s:State | all e:Event | lone e in s.(State.~trans)
inv3 T: all s:State | all e:Event | lone s->e in s.(State.~trans)
inv3 T: lone State->Event in s.(State.~trans)
inv3 O: all s:State | lone s.trans
inv3 O: all s:State | lone (State-s).trans
inv3 E:
inv3 S: all e:event, s:State | lone e
inv3 U: all e:Event, s:State | lone e
inv3 T: all e:Event , s:State | lone e in s.(State.~trans)
inv3 T: all t:trans | lone t
inv3 T: all s:State | all e:Event | lone e->s in s.trans
inv3 S: all s:State, all e:Event | lone e->s in s.trans
inv3 S: all s:State all e:Event | lone e->s in s.trans
inv3 T: all s:State | all e:Event | lone e->s in s.trans
inv3 B: all s:State | lone e:Event |  e->s in s.trans
inv3 B: all s:State | all e:Event |  e->s in s.trans
inv3 B: all s:State | one e:Event |  e->s in s.trans
inv3 B: all s:State | one e:Event {  e->s in s.trans }
inv3 B: all s:State | lone e:Event {  e->s in s.trans }
inv3 B: all s:State | lone e:Event |  e->s in s.trans
inv3 B: all s:State | lone e:Event {  e->s in s.trans }
inv3 B: all s:State | lone e:Event {  e->s in State.trans }
inv3 S: all s:State | e1,e2:Event | e1->s in s.trans and e2->s in s.trans implies e1=e2
inv3 B: all s:State | all e1,e2:Event | e1->s in s.trans and e2->s in s.trans implies e1=e2

