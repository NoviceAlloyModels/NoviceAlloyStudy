inv4 T: State in Init.^trans
inv4 T: State in Init.trans.^Event
inv4 T: State in ^(Init.trans.Event)
inv4 O: State in Init.^(trans.Event)
inv4 T: State in Init.trans.^(trans.Event)
inv4 O: State in Init.^(trans.Event)
inv4 T: State in Init.^(trans)
inv4 O: State in Init.^(Event.trans)
inv4 O: State in Init.^(Event.trans)
inv4 O: State in Init.^(Event.trans)
inv4 S: State in Init.^(trans[Etat])
inv4 O: State in Init.^(trans[Event])
inv4 T: State in Init.^trans
inv4 T: State in ^(Init.trans)
inv4 S: for s: State | some e: Event | (Init.trans).e
inv4 S: for s: State | some e: Event | (Init.trans).^(Event->State)
inv4 O: some (Init.trans).^(Event->State) & iden
inv4 O: some (Init.trans).^(Event->State) & iden
inv4 T: some (Init.trans)[Event].^trans & iden
inv4 T: some (Init.trans)[Event].^trans & iden
inv4 S: ((init.trans)^[Event]).trans[Event]
inv4 S: State in ((init.trans)^[Event]).trans[Event]
inv4 S: State in ((init.trans)[Event]).trans[Event]
inv4 O: State in ((Init.trans)[Event]).trans[Event]
inv4 T: State in (Init.trans)^(~(Init.trans))
inv4 T: State in (Init.trans).^(~(Init.trans))
inv4 U: State in Init.^(trans.State.Event->State)
inv4 O: State in Init.trans.Event
inv4 O: State in Init.trans[Event]
inv4 B: State in Init.trans[Event] + Init
inv4 B: State in (Init.trans[Event] + Init)
inv4 T: State in (Init.trans[Event] + ~Init.trans[Event])
inv4 O: State in (Init.trans[Event] + trans[Event].State)
inv4 O: State in (Init.trans[Event] + trans[Event].Init)
inv4 T: State in (Init.trans[Event] + State.trans[Event].Init)
inv4 S: all s: State | some i: Init | i in  Event.(trans.s)
inv4 S: all s: State | some i: Init | i in  Event.(trans.s)
inv4 S: all s: State | some i: Init | i in  Event.(trans.s)
inv4 O: all s: State | some i: Init | i in Event.(trans.s)
inv4 O: all s: State | some i: Init | i in trans.(trans.s.Event).Event
inv4 U: State in State.trans[Event]
inv4 U: State in State.trans[Event]
inv4 O: State in Init.trans[Event]
inv4 O: State in Init.trans[Event]
inv4 O: State in Init.trans[Event]
inv4 S: State in Event.^(Init.trans).
inv4 O: State in Event.^(Init.trans)
inv4 T: State in Init.trans.trans
inv4 S: State in Init.trans..trans
inv4 T: State in Init.trans.Event.trans
inv4 T: State in Init.Event.trans.trans
inv4 T: State in Event.Event(Init.State.State)
inv4 T: State in Event.Event(Init.trans.trans)
inv4 S: State in Event.(Event(Init.trans.trans))
inv4 O: State in Event.(Event.(Init.trans.trans))
inv4 T: State in ~(Init.trans.trans).^Event
inv4 T: State in ~(Event.(Init.trans.trans)).^Event
inv4 S: for s: State | some i: Init | i in trans.s.Event
inv4 S: for s: State | some i: Init | i in trans.s.Event
inv4 O: all s: State | some i: Init | i in trans.s.Event
inv4 S: let r = {State->(State.trans.e) | e in Event} | 		 		State in Init.^r
inv4 S: let r = {State->(State.trans.e) | e in Event} | 		 		State in Init.^r
inv4 S: let r = {State->(State.trans.e)| all: e in Event} | 		 		State in Init.^r
inv4 S: let r = {State->(State.trans.e)| all e: Event} | 		 		State in Init.^r
inv4 S: let r = {all e: Event | State->(State.trans.e)} | 		 		State in Init.^r
inv4 T: let r = {all e: Event | State->(State.trans.e)} | 		 		State in Init.^r
inv4 T: let r = all e: Event | State->(State.trans.e) | 		 		State in Init.^r
inv4 T: let r = all e: Event | State->(State.trans.e) | 		 		State in Init.^r

