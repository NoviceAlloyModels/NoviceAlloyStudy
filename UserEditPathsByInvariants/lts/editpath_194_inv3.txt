inv3 B: let k = trans.State | k.~k in iden
inv3 B: let k = trans.State | ~k.k in iden
inv3 B: let k = trans.State | k.~k in iden
inv3 T: let k = ~trans.State | k.~k in iden
inv3 B: let k = ~(trans.State) | k.~k in iden
inv3 B: let k = ~(trans.State) | ~k.k in iden
inv3 B: let k = trans.State | ~k.k in iden
inv3 O: let k = trans.State | iden in ~k.k
inv3 O: let k = trans.State | iden in k.~k
inv3 O: let k = trans.State | iden in ~k.k
inv3 O: all s : State | lone s.trans
inv3 T: all s : State.trans, e : Event | lone s.e
inv3 U: all s : State, e : Event | lone s.trans.e
inv3 O: all s : State, e : Event | lone s.trans
inv3 O: all s : State, e : Event | lone trans
inv3 T: trans
inv3 O: all s : State | lone s.trans
inv3 T: all s : State | s.trans
inv3 U: all s : State, e : Event | lone s.trans.e
inv3 T: all s : State, e : Event | lone e.s.trans
inv3 T: all s : State, e : Event | lone s.e.trans
inv3 U: all s : State, e : Event | lone (s->e).trans
inv3 O: all s : State, e : Event | lone s.trans->e
inv3 T: all s : State | s.trans
inv3 S: all s : State | e.s.trans
inv3 T: all s : State | Event.s.trans
inv3 T: all s : State | Event.(s.trans)
inv3 O: all s : State | lone Event.(s.trans)
inv3 B: all s : State | lone (s.trans).State
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv3 T: all s : State, e : Event | lone e.s.trans
inv3 C: all s : State, e : Event | lone e.(s.trans)

