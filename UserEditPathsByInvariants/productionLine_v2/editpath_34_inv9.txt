inv9 S: all w1:Workstation-last | one w1.succ
inv9 U: all w1:Workstation-end | one w1.succ
inv9 U: all w1:Workstation-end | one w1.succ	Workstation in begin.*succ
inv9 B: all w1:Workstation-end | one w1.succ	Workstation in begin.^succ
inv9 U: all w1:Workstation-end | one w1.succ	Workstation in begin.*succ
inv9 U: all w1:Workstation-end | one w1.succ	Workstation-begin in begin.^succ
inv9 U: all w1:Workstation-end | one w1.succ	Workstation in begin.*succ
inv9 U: all w1:Workstation-end | one w1.succ	all w1:Workstation-begin | one succ.w1	Workstation in begin.*succ
inv9 U: succ in Workstation lone -> lone Workstation	Workstation in begin.*succ
inv9 U: all w:Workstation | begin->w in *succ		all w:Workstation | not end->w in succ
inv9 O: all w:Workstation | begin->w in *succ	all w1:Workstation | some w2:Workstation | w1->w2 in succ	all w:Workstation | not end->w in succ
inv9 U: all w:Workstation | begin->w in *succ	all w1:Workstation | some w2:Workstation | w1->w2 in succ or w1 in end	all w:Workstation | not end->w in succ
inv9 C: all w:Workstation | begin->w in *succ	all w1:Workstation | some w2:Workstation | w1->w2 in succ or w1 in end	all w1,w2:Workstation | (some w3:Workstation | w3->w1 in succ and w3->w2 in succ) implies w1 = w2	all w:Workstation | not end->w in succ

