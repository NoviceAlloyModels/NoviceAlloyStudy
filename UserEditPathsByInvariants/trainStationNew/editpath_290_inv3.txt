inv3 U: all t : Exit | no t.succs
inv3 T: all t : Exit | not t.succs
inv3 T: all t : Track | no t.succs implies t & Exit
inv3 T: all t : Track | #t.succs=0 implies t & Exit
inv3 T: all t : Track | #t.succs=0 implies t & Exit
inv3 T: all t : Track | #t.succs=0 implies t & Exit
inv3 T: all t : Track | t.succs=0 implies t & Exit
inv3 T: all t : Track | no t.succs implies t & Exit
inv3 B: all t : Track | no t.succs implies t=Exit
inv3 B: all t : Track | no t.succs implies t=Exit
inv3 U: all t : Track | t=Exit implies  no t.succs
inv3 U: all t : Track | t=Exit implies no t.succs
inv3 S: all t : Track | t=Exit implies no t^.succs
inv3 U: all t : Track | t=Exit implies no t.^(succs)
inv3 U: all t : Track | t=Exit implies #(t.^(succs))=0
inv3 U: all t : Track | t=Exit implies #t.succs=0
inv3 B: all t : Track| one f : Track | t=Exit implies f not in t.succs
inv3 U: all t : Track| all f : Track | t=Exit implies f not in t.succs
inv3 U: all t : Track| all f : Track | t=Exit implies no f & t.succs
inv3 U: all t : Exit | no t.succs
inv3 B: all t : Track - Junction - Entry | no t.succs
inv3 B: all t : Track - Junction - Entry | no succs.t
inv3 B: all t : Track - Junction - Entry | no t.succs
inv3 B: all t : Track - Junction - Entry | t not in t.succs
inv3 B: all t : Track  | t not in t.succs
inv3 B: all t : Track |all r: Track | r not in t.succs
inv3 S: all t : Track t=Exit iff not t.succs
inv3 S: all t : Track t=Exit iff not no t.succs
inv3 B: all t : Track | t=Exit iff not no t.succs
inv3 B: all t : Track - Junction - Entry | #t.succs=0
inv3 U: all t : Track - Junction - Entry | #t.succs=0 implies t in Exit
inv3 C: all t: Track | t in Exit <=> no t.^(succs)
inv3 U: all t: Track | t in Exit implies no t.^(succs)
inv3 C: all t: Track | t in Exit iff no t.^(succs)

