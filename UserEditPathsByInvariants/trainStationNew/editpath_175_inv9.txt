inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.succs => s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.succs <=> s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.^(succs) <=> s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j in t.succs <=> s in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in Track.^(succs) <=> s not in Track.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in Track.^(succs) => s not in Track.signals
inv9 T: all t:Track, s:Semaphore | t in Junction not in Track.^(succs) => s not in Track.signals
inv9 T: all t:Track, s:Semaphore | t in Junction not in Track.^(succs) => s not in Track.signals
inv9 B: all t:Track, s:Semaphore | t in Junction && t not in Track.^(succs) => s not in Track.signals
inv9 B: all t:Track, s:Semaphore | t in Junction && t not in Track.^(succs) <=> s not in Track.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | t not in t.succs <=> s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs <=> s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs => s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs <=> s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore, j:Junction | t2 in Junction && t2 not in t.succs => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs => s not in t.signals
inv9 S: all t:Track | (all s:t.succs | s in Junction) => no (s:Semaphore | s in t.signals)
inv9 S: all t:Track | (all s:t.succs | s in Junction) -> no (s:Semaphore | s in t.signals)
inv9 S: all t:Track | (all s:t.succs | s in Junction) -> no (s:Semaphore | s in t.signals)
inv9 S: all t:Track | (all s:t.succs | s in Junction) -> no (s:Semaphore | s in t.signals)
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && s not in t.signals
inv9 S: all disj t,t2:Track, s:Semaphore
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry + Exit => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry && t not in Exit => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && s not in t.signals
inv9 S: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry && t not in Exit && t not in specialTrack => s not in t.signals
inv9 S: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry && t not in Exit && t not in specialTrack => s not in t.signals
inv9 S: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry && t not in Exit && t not in specialTrack => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && t not in Entry + Exit => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && !(t in Entry + Exit) => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && !(t in Entry + Exit) => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs && s not in t.signals
inv9 U: all disj t,t2:Track, s:Semaphore | (t2 in Junction && t2 in t.succs) || t.succs=none => s not in t.signals
inv9 T: all disj t,t2:Track, s:Semaphore | (t2 in Junction && t2 in t.succs) || t.succs=none -> s not in t.signals
inv9 U: all disj t,t2:Track, s:Semaphore | (t2 in Junction && t2 in t.succs) || t.succs=none => s not in t.signals

