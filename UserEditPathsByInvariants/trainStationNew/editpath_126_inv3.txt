inv3 U: all ex:Exit | no ex.succs
inv3 U: no Exit.succs
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => t = Exit
inv3 B: all t:Track| #t.succs=0 => t = Exit
inv3 U: all t:Track| #t.succs=0 => t in Exit
inv3 U: all t:Track| no t.succs => t in Exit
inv3 U: all t:Track| t in Exit => no t.succs
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | #ex.succs=0
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | ex in Track => #ex.succs=0
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => Exit in t
inv3 T: all ex:Exit | ex.succs={}
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | no ex.next
inv3 U: all ex:Exit | no ex.succs.next
inv3 S: all ex:Exit | ex.succs.last = ex
inv3 S: all ex:Exit | Track.succs.last = ex
inv3 S: all ex:Exit | Track.last = ex
inv3 S: all ex:Exit | ex.last = ex
inv3 S: all ex:Exit | ex.last
inv3 T: all ex:Exit | no Track.succs[ex+1]
inv3 T: all ex:Exit | no Track.succs[ex]
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | Track not in ex.succs
inv3 U: all ex:Exit | Track not in ex.succs and ex not in ex.succs
inv3 S: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Juction not in ex.succs
inv3 B: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | Exit not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 S: all ex:Exit | no ex.successor
inv3 U: all ex:Exit | no ex.succs
inv3 U: all t:Track | no t.succs => t in Exit
inv3 U: all t:Track | #t.succs=0 => t in Exit
inv3 B: all t:Track | #t.succs=0 => t = Exit
inv3 B: all t:Track, e:Exit | #t.succs=0 => t = e
inv3 U: all ex:Exit | no ex.succs and ex not in ex.succs
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 S: all ex:Exit | ex in Track => ex in Entry.succs and ex in Juction.succs
inv3 B: all ex:Exit | ex in Track => ex in Entry.succs and ex in Junction.succs
inv3 B: all ex:Exit | ex in Track => ex in Entry.succs
inv3 B: all ex:Exit | ex in Track => (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs)
inv3 B: all ex:Exit | ex in Track => no ex.succs and ( (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs))
inv3 B: all ex:Exit | ex in Track => Junction not in ex.succs and ( (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs))
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs and ex not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs and ex not in ex.succs and Track not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry, t:Track | j not in ex.succs and e not in ex.succs and ex not in ex.succs and t not in ex.succs
inv3 B: all ex:Exit, j:Junction, e:Entry, t:Track | j not in ex.succs and e not in ex.succs and ex not in ex.succs and t not in ex.succs and t not in t.succs
inv3 B: all t:Track | t not in t.succs and t not in Exit.succs
inv3 U: all t:Track | no Exit.succs
inv3 U: no Exit.succs
inv3 U: no Exit.succs
inv3 U: all t:Track | no t.succs => t in Exit
inv3 U: all t:Track, e:Exit | e in t.succs => no e.succs
inv3 S: e:Exit | e in Track.succs => no e.succs
inv3 U: all e:Exit | e in Track.succs => no e.succs
inv3 U: all e:Exit | e in Track => no e.succs
inv3 B: all e:Exit | e in Track => no Track.succs
inv3 U: all e:Exit, t:Track | e in Track => t not in e.succs
inv3 U: all e:Exit, t:Track | t not in e.succs
inv3 T: all e:Exit, t:Track | no t not in e.succs
inv3 U: all e:Exit, t:Track | t not in e.succs
inv3 U: all t:Track | t not in Exit.succs
inv3 B: Track not in Exit.succs
inv3 B: Track not in Exit
inv3 O: Junction not in Exit and Entry not in Exit and Exit not in Exit
inv3 B: Junction not in Exit and Entry not in Exit
inv3 B: one t:Track | no Exit.succs
inv3 B: one t:Track | no t.succs

