NA H: THEME UPDATE
Inv1 S: all c:Component | c.parts != empty
Inv1 U: all c:Component | c.parts != 0
Inv1 U: all c:Component | c.parts in univ
Inv2 U: all c:Component | c.parts in (univ-c)
Inv2 O: all c:Component | c.parts in (univ-c-c.parts)
Inv2 U: all c:Component | c.parts in (univ-c)
Inv2 B: all c:Component | c.parts in (univ-c)	    all c1,c2:Component | c2 in c1.parts => c2.parts in (univ - c1.parts)
Inv2 B: all c:Component | c.parts in (univ-c)	    all c1,c2:Component | c2 in c1.parts => c2.parts in (univ - c1.parts)
Inv1 U: all c:Component | c.parts in univ
Inv1 B: all c:Component | c.parts in (univ-c.parts)
Inv3 C: all c:Component | some r:Robot | c.position = r.position
Inv1 O: all c:Component | some p:Product | c.parts = p
Inv1 O: all c:Component | some p:Product | c.parts = p
Inv2 U: all c1,c2:Component | c1 not in c1.parts
Inv2 U: all c1:Component | c1 not in c1.parts
Inv2 S: all c1,c2:Component | c1 not in c1.parts | c1 in c2.parts => c2 not in c1.parts
Inv2 S: all c1,c2:Component | c1 not in c1.parts | c1 in c2.parts => c2 in (univ -c1.parts)
Inv2 U: all c1,c2:Component | c1 in c2.parts => c2 in (univ -c1.parts)
Inv2 U: all c1,c2:Component | c1 in c2.parts => c2 in (univ -c1.parts)	    all c1:Component | c1 not in c1.parts
Inv1 O: all c:Component | some p:Product | c.parts = p
Inv4 T: all c:Component | c.parts.position < c.position
Inv4 S: all c:Component | p in c.parts | gt[c.position,p.position]
Inv4 S: all c:Component		p in c.parts		gt[c.position,p.position]
Inv4 S: all c:Component		p in c.parts | gt[c.position,p.position]
Inv4 S: all c:Component | p in c.parts => gt[c.position,p.position]
Inv4 S: all c:Component | one p in c.parts => gt[c.position,p.position]
Inv4 S: all c:Component | p in c.parts => gt[c.position,p.position]
Inv4 B: all c:Component | some p:Product | p in c.parts => gt[c.position,p.position]
Inv4 B: all c:Component | some p:Product | p in c.parts => lt[c.position,p.position]
Inv4 B: all c:Component | all p:Product | p in c.parts => lt[c.position,p.position]
Inv2 U: all c1,c2:Component | c1 in c2.parts => c2 in (univ -c1.parts)	    all c1:Component | c1 not in c1.parts
Inv2 C: all c1:Component | c1 not in c1.^parts
Inv2 C: all c1:Component | c1 not in c1.^parts
Inv1 C: all c:Component | some p:Product | p in c.parts
Inv4 B: all c:Component | all p:Product | p in c.parts => lt[c.position,p.position]
Inv4 B: all c:Component | some p:Product | p in c.parts => lt[c.position,p.position]
Inv4 B: all c:Component | some p:Product | p in c.parts => gt[c.position,p.position]
Inv4 B: all c:Component | some p:Product | p in c.parts => lt[c.position,p.position]
Inv4 B: all c:Component | all p:Product | p in c.parts => lt[c.position,p.position]
Inv4 O: all c:Component | all p:Product | p in c.parts => c.position in nexts[p.position]
Inv4 O: all c:Component | all p:Product | p in c.parts => c.position in nexts[p.position] && p.position in prevs[c.position]

