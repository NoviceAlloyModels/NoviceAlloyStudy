NA H: THEME UPDATE
inv1 S: all p: Person, c:Courses| p in Student => c in p.enrolled
inv1 B: all p: Person, c:Course| p in Student => c in p.enrolled
inv1 U: all p:Person-Student | none in p.enrolled
inv1 U: all p:Person-Student | none in p.enrolled
inv1 T: all p:Person-Student | p.enrolled = {}
inv1 C: all p:Person-Student | no p.enrolled
inv1 C: all p:Person-Student | no p.enrolled
inv2 C: all p: Person- Professor | no p.teaches
inv3 S: all c: Cource | some p:Professor| c in p.teaches
inv3 O: all c: Course | some p:Professor| c in p.teaches
inv4 C: all p:Project | one c: Course | p in c.projects
inv5 E: 
inv5 C: all p:Person-Student | no p.projects	  	all	p: Project| some s: Student| p in s.projects
inv6 S: all s: Students, all p: Project| p in s.projects => p in s.enrolled.project
inv6 S: all s: Students, all p: Project| p in s.projects => p in s.enrolled.projects
inv6 S: all s: Students, p: Project| p in s.projects => p in s.enrolled.projects
inv6 U: all s: Student, p: Project| p in s.projects => p in s.enrolled.projects
inv7 B: all s: Student| #s.enrolled = #s.projects
inv7 S: all s: Student, p: Project| p in s.project implies one p in s.enrolled.projects
inv7 T: all s: Student, p: Project| p in s.projects implies one p in s.enrolled.projects
inv7 T: all s: Student, p: Project| p in s.projects implies #(p in s.enrolled.projects) = 1
inv7 S: all s: Student, c: Course | s in c.enrolled => card(s.projects & c.projects) <= 1
inv7 U: all s: Student, c: Course | s in c.enrolled => #(s.projects & c.projects) <= 1
inv7 U: all s: Student, c: Course | c in s.enrolled => #(s.projects & c.projects) <= 1
inv8 U: all p: Professor | p not in p.teaches
inv8 S: all p: Professor | p not in p.teaches.grade
inv8 T: all p: Professor | p not in p.teaches.grades
inv8 T: all p: Professor, c: Course | c in p.teaches => p not in c.grades
inv8 U: all p: Professor | p not in p.teaches
inv8 U: all p: Professor, c: Course | p in c.teaches => p != c
inv8 S: all c: Course, p: Professor | c in p.teaches => p not in c.teachers
inv8 T: all c: Course, p: Professor | c in p.teaches => p not in c.grades
inv8 T: all c: Course, p: Professor | c in p.teaches => p not in c.grades
inv8 S: all c: Course, p: Professor | c in p.teaches => p != c.grades.getKey(p.grades)
inv8 S: all c: Course, p: Professor | c in p.teaches => p != c.grades.getKey(p.grades)
inv8 U: all c: Course, p: Professor | c in p.teaches => p != c.grades[p]
inv8 U: all c: Course, p: Professor | c in p.teaches => p !in c.grades.Person
inv8 U: all c: Course, p: Professor | c in p.teaches => p !in c.grades.Person
inv8 T: all c: Course, p: Professor | c in p.teaches => no p.grades[p] in c.grades
inv8 T: all c: Course, p: Professor | c in p.teaches => no p in c.grades
inv8 T: all c: Course, p: Professor | c in p.teaches => no c.grades[p] in c.grades
inv8 T: all c: Course, p: Professor | c in p.teaches => not (p.grades[p] in c.grades)
inv8 S: all c: Course, p: Professor | c in p.teaches => p.grades[p] not in c.grades.ran	}
inv8 S: all c: Course, p: Professor | c in p.teaches => p.grades[p] not in c.grades.ran
inv8 T: all c: Course, p: Professor | c in p.teaches => p.grades[p] not in c.grades
inv8 T: all c: Course, p: Professor | c in p.teaches => p not in c.grades
inv8 B: all c: Course, p: Professor | c in p.teaches => no c.grades[p]
inv8 T: all c: Course, p: Professor | c in p.teaches => c not inp.enrolled
inv8 U: all c: Course, p: Professor | c in p.teaches => c not in p.enrolled
inv9 S: all c: Course, p: Professor | c in p.teaches => c.grades[p] not Professor
inv9 S: all c: Course, p: Professor | c in p.teaches => c.grades[p] not Professor
inv9 T: all c: Course, p: Professor | c in p.teaches => c.grades[p] not Professor
inv9 B: all c: Course, p: Professor | c in p.teaches => c.grades[p] not in Professor
inv9 T: all c: Course, p: Professor | c in p.teaches => Professor not in c.grades
inv9 B: all p : Professor | all c : Course | c in p.teaches => no (p.teaches & p.enrolled)
inv9 S: all p : Professor, Student | all c : Course | c in p.teaches => no (p.teaches & p.enrolled)
inv9 S: all p : Professor, Student | all c : Course | c in p.teaches => no (p.teaches & p.enrolled)
inv9 B: all p : Person | all c : Course | c in p.teaches => no (p.teaches & p.enrolled)
inv9 T: all p : Professor | all c : Course | c in p.teaches => no (p.teaches & p.enrolled) in c
inv9 T: all p : Professor | all c : Course | c in p.teaches => no (p.teaches & p.enrolled) in c
inv9 T: all p : Professor | all c : Course | c in p.teaches => no (p.teaches & p.enrolled) in c
inv9 T: all p : Professor | all c : Course | (c in p.teaches => no (p.teaches & p.enrolled) in c)
inv9 S: all p : Professor |	all c1, c2 : Course |	c1 in p.teaches and c2 in p.enrolled and c1 = c2 => false
inv9 B: all p : Professor |	all c1, c2 : Course |	c1 in p.teaches and c2 in p.enrolled and c1 = c2
inv9 E: 
NA H: THEME UPDATE
inv9 T: all c: Course, p: Professor | c in p.teaches => no p.grades[p] in ~c.grades
inv9 T: all c: Course, p: Professor | c in p.teaches => p not in ~c.grades
inv9 T: all c: Course, p: Professor | c in p.teaches => p not in c.~grades
inv9 S: all c: Course, p: Professor |p not in c~.grades
inv9 S: all c: Course, p: Professor |p not in c.grades~
inv9 T: all c: Course, p: Professor |p not in ~c.grades
inv9 T: all c: Course, p: Professor |p not in c.~grades
inv9 T: all c: Course, p: Professor | c in p.teaches => no q: Professor | q in c.grades && q in p.teaches && q != p
inv9 S: all c: Course, p,q: Professor | c in p.teaches => no q | q in c.grades && q in p.teaches && q != p
inv9 T: all c: Course, p,q: Professor | c in p.teaches => no q: Professor | q in c.grades && q in p.teaches && q != p
inv9 T: all c: Course, p,q: Professor | c in p.teaches => no q: Professor | q in c.grades && q in p.teaches && q != p

