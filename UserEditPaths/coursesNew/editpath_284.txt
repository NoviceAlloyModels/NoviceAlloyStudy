NA H: THEME UPDATE
inv1 C: all x : Person | #(x.enrolled) > 0 implies x in Student
inv2 C: all x : Person | #(x.teaches) > 0 implies x in Professor
inv3 C: all x : Course | some y : Person | x in y.teaches
inv4 U: all x : Project | some y : Course | x in y.projects
inv4 U: all x : Project | some y : Course | x in y.projects
inv4 S: all x : Project | y : Course | x in y.projects
inv4 C: all x : Project | one y : Course | x in y.projects
inv5 S: all x : Project | y : Person | x in y.projects implies y in Student
inv5 S: all x : Project | y : Person | x in y.projects implies y in Student
inv5 U: all x : Project | all y : Person | x in y.projects implies y in Student
inv5 U: all x : Project | some y : Person | x in y.projects implies y in Student
inv5 B: all x : Project | some y : Person | x in y.projects implies y in Student	  some x : Project | all y : Person | x in y.projects
inv5 B: all x : Project | some y : Person | x in y.projects implies y in Student	  all y : Person | some x : Project  | x in y.projects
inv5 B: all x : Person | #(x.projects) > 0 implies x in Student	  all y : Person | some x : Project  | x in y.projects
inv5 B: all x : Person | #(x.projects) > 0 implies x in Student	  all y : Person | all x : Project  | x in y.projects
inv5 B: all x : Person | #(x.projects) > 0 implies x in Student	  all x : Project | all y : Person | x in y.projects
inv5 C: all x : Person | #(x.projects) > 0 implies x in Student	  all x : Project | some y : Person | x in y.projects
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects implies ( y in z.projects and y in x.enrolled)
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects implies ( y in z.projects and y in x.enrolled)
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects implies  y in z.projects and y in x.enrolled
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects implies y in z.projects and y in x.enrolled
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects implies y in z.projects and z in x.enrolled
inv6 B: all x : Person | all y : Project | all z : Course | y in x.projects and y in z.projects implies z in x.enrolled
inv7 T: all x : Person | all y : Project | all z : Course | y in z.projects implies y in #(x.projects) = 0 or #(x.projects) = 1
inv7 T: all x : Person | all y : Project | all z : Course | y in z.projects implies y in #(x.projects) = 0 or #(x.projects) = 1
inv7 O: all x : Person | all y : Project | all z1,z2 : Course | y in x.projects implies y in z1.projects and y not in z2.projects
inv8 U: all x : Person | x in Professor implies x not in x.teaches
inv8 U: all x : Person | x in Professor implies (x not in x.teaches)
inv8 U: all x,y : Person | y in Professor and x in y.teaches implies x != y
inv8 U: all x,y : Person |  x in y.teaches implies x != y
inv8 C: all x : Person | all y : Course | y in x.enrolled implies y not in x.teaches
inv9 O: all x,y : Person | all z1,z2 : Course | z1 in x.teaches and z1 in y.teaches implies (z2 in x.enrolled and z2 not in y.teaches) or (z2 in y.enrolled and z2 not in x.teaches)
inv9 O: all x,y : Person | all z1,z2 : Course | z1 in x.teaches and z1 in y.teaches implies (z2 in x.enrolled and z2 not in y.teaches) and (z2 in y.enrolled and z2 not in x.teaches)
inv9 O: all x,y : Person | all z1,z2 : Course | z1 in x.teaches and z1 in y.teaches implies (z2 in x.enrolled implies z2 not in y.teaches) and (z2 in y.enrolled implies z2 not in x.teaches)
inv10 S: all g : Grade | all c : Course | all x : Person | x -> g in c.grade implies x in Student
inv10 C: all g : Grade | all c : Course | all x : Person | x -> g in c.grades implies x in Student
inv11 C: all g : Grade | all c : Course | all x : Person | x -> g in c.grades implies c in x.enrolled
inv12 S: all x:Student | all y:Course | lone g:Grade | p-> g in y.grades
inv12 U: all x:Student | all y:Course | lone g:Grade | x -> g in y.grades
inv14 O: all x1,x2 : Person | all y1,y2 : Project | y1 in x1.projects and y2 in x2.projects implies (y2 in x1.projects implies y2 not in x2.projects) or (y2 in x2.projects implies y2 not in x1.projects)
inv14 S: all x1,x2 : Person | all y1 : Project | lone(y in x1.projects and y in x2.projects )
inv14 T: all x1,x2 : Person | all y : Project | lone(y in x1.projects and y in x2.projects )
inv14 T: all x1,x2 : Person | all y : Project | lone(y in x1.projects and y in x2.projects )
inv14 C: all x1,x2 : Person | lone y : Project | y in x1.projects and y in x2.projects and x1!=x2

