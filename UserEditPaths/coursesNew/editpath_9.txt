NA H: THEME UPDATE
inv1 S: all p: Person - Student | np p.enrolled
inv1 C: all p: Person - Student | no p.enrolled
inv1 C: all p: Person - Student | no p.enrolled
inv2 C: all p: Person - Professor | no p.teaches
inv3 O: all c: Course | some p: Professor | c in p.teaches
inv4 C: all p:Project | one c: Course | p in c.projects
inv5 C: all p:Person - Student | no p.projects	  	all p:Project| some s: Student | p in s.projects
inv6 S: all s: Student, p: Project | p in s.projects => projects.p in c.enrolled
inv6 S: all s: Student, p: Project | p in s.projects => projects.p in u.enrolled
inv6 T: all s: Student, p: Project | p in s.projects => projects.p in s.enrolled
inv6 S: all s: Student, p: Project | p in s.projects => p in s.enrolled.project
inv6 U: all s: Student, p: Project | p in s.projects => p in s.enrolled.projects
inv7 S: all u:User, c: Curso | c in u.enrroled => lone c.project in u.projects
inv7 S: all u:User, c: Curso | c in u.enrroled => lone c.project in u.projects
inv7 S: all u:Student, c: Curso | c in u.enrroled => lone c.project in u.projects
inv7 S: all u:Student, c: Course | c in u.enrroled => lone c.project in u.projects
inv7 S: all u:Student, c: Course | c in u.enrolled => lone c.project in u.projects
inv7 T: all u:Student, c: Course | c in u.enrolled => lone c.projects in u.projects
inv7 T: all u:Student, c: Course | c in u.enrolled => lone (c.projects in u.projects)
inv7 U: all u:Student, c: Course | c in u.enrolled => lone (c.projects & u.projects)
inv8 U: all p: Professor, c: Course | c in p.teaches => c not in p.enrolled
inv9 U: all p: Professor, col: Professor - p | some (p.teaches & col.teaches) => col not in p.enrolled
inv9 U: all p: Professor, col: Professor - p | some (p.teaches & col.teaches) => col not in p.enrolled
inv9 S: all p: Professor, col: Professor - p | some (p.teaches & col.teaches) => no (col.enrroled & p.teaches)
inv9 U: all p: Professor, col: Professor - p | some (p.teaches & col.teaches) => no (col.enrolled & p.teaches)
inv10 S: all c: Course, p: person | c.grades->p => p in Student
inv10 T: all c: Course, p: Person | c.grades->p => p in Student
inv10 T: all c: Course, p: Person | p in c.grades->p => p in Student
inv10 C: all c: Course, p: Person, g: Grade | p->g in c.grades => p in Student
inv11 U: all c: Course, p: Student, g: Grade | p->g in c.grades => c in p.enrolled
inv12 T: all c: Course, p: Student, g: Grade | lone (p->g in c.grades )
inv12 B: all c: Course, p: Student | one g: Grade | p->g in c.grades
inv12 O: all c: Course, p: Person | one g: Grade | p->g in c.grades
inv12 C: all c: Course, p: Person | lone g: Grade | p->g in c.grades
inv14 T: all s,x: Student | (s.projects & x.projects) >2
inv14 B: all s,x: Student | lone(s.projects & x.projects)
inv14 U: all s: Student, x: Student -s | lone(s.projects & x.projects)
inv13 S: all c: Course | let m = max[g in c.grades | c.grades[g]] |	some s: Student | s in c.enrolled && c.grades[s] = m =>	some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course | let m = max[g in c.grades | c.grades[g]] |	    some s: Student | s in c.enrolled && c.grades[s] = m =>	    some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course | let m = max[g in c.grades | c.grades[g]] |	    some s: Student | s in c.enrolled && c.grades[s] = m =>	    some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course | let m = max[g in c.grades | c.grades[g]] |	    some s: Student | c in s.enrolled && c.grades[s] = m =>	    some p: Project | p in c.projects && p in s.projects
inv13 T: all c: Course | let m = max[g in c.grades] |	    some s: Student | c in s.enrolled && c.grades[s] = m =>	    some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades.g) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades.g) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades.g) => some p: Project | p in project.c && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades.g) => some p: Project | p in project.c && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades) => some p: Project | p in project.c && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades.g) => some p: Project | p in project.c && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades[g]) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades[g]) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = lone Int { es - es.^prev } => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = lone Int { c.grades - c.grades.^prev } => some p: Project | p in c.projects && p in s.projects
inv13 U: all c: Course, s: Student, g: Grade | s->g in c.grades && g = c.grades.max => some p: Project | p in c.projects && p in s.projects
inv13 U: all c: Course, s: Student, g: Grade | s->g in c.grades && g = c.grades.max => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade| s->g in c.grades && g = c.grades.max => one (c.projects & u.projects)
inv13 U: all c: Course, s: Student, g: Grade| s->g in c.grades && g = c.grades.max => one (c.projects & s.projects)
inv13 U: all c: Course, s: Student, g: Grade| s->g in c.grades && g = c.grades.max => some (c.projects & s.projects)
inv13 T: all c: Course, s: Student, g: Grade| s->g in c.grades && s->g = c.grades.max => some (c.projects & s.projects)
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && (forall g2 : Grade | s->g2 in c.grades => g >= g2) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && (not (exists g2 : Grade | s->g2 in c.grades && g2 > g)) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && (not ( g2 : Grade | s->g2 in c.grades 	&& g2 > g)) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades) => some p: Project | p in c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(c.grades) => some p: Project | p in 	  c.projects && p in s.projects
inv13 T: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(grades) => some p: Project | p in 	  c.projects && p in s.projects
inv13 S: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(grades.c) => some p: Project | p in 	  c.projects && p in s.projects
inv13 T: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(grades) => some p: Project | p in 	  c.projects && p in s.projects
inv13 T: all c: Course, s: Student, g: Grade | s->g in c.grades && g = max(grades) => some p: Project | p in 	  c.projects && p in s.projects
inv15 S: all c: Course, p1: Project, p2: Project | p1 in c.projects && p2 in c.projects && p1 != p2 => all s1: Student, s2: Student | s1 in p1.projects && s2 in p2.projects => abs(c.grades[s1]-c.grades[s2]) <= 1
inv15 S: all c: Course, p1, p2: Project | p1 in c.projects && p2 in c.projects && p1 != p2 => all s1: Student, s2: Student | s1 in p1.projects && s2 in p2.projects => c.grades[s1] = c.grades[s2])
inv15 S: all c: Course, p: Project, s1: Student, s2: Student | p in s1.projects && p in s2.projects => s1 in  c.grades[s1] = c.grades[s2])
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 ->g in c.grades = s2-g in c.grades
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades[s1] = s2 in c.grades[s2]
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades.s1 = s2 in c.grades[s2]
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades.s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => c.grades -> s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 -> c.grades s1 = s2 in c.grades.s2
inv15 T: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => s1 -> c.grades s1 = s2 -> c.grades
inv15 B: all c: Course, p: Project, s1: Student, s2: Student, g: Grade | p in s1.projects && p in s2.projects => (s1 -> c.grades) = (s2 -> c.grades)
inv15 B: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => (s1 -> c.grades) = (s2 -> c.grades)
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => disj s1 -> c.grades + s2 -> c.grades) >1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => disj (s1 -> c.grades + s2 -> c.grades) >1
NA M: MOD BASE MODEL
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	  if (c.grades[s1] > c.grades[s2]) then (c.grades[s1] - c.grades[s2]) <= 1 	  else (c.grades[s2] - c.grades[s1]) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (c.grades[s1] > c.grades[s2]) then (c.grades[s1] - c.grades[s2]) <= 1 	    else (c.grades[s2] - c.grades[s1]) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (s1 -> c.grades >  s2 -> c.grades) then (s1 -> c.grades - s2->c.grades ) <= 1 	    else (s1 -> c.grades - s1 -> c.grades) <= 1
inv15 S: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	    iff (s1 -> c.grades >  s2 -> c.grades) then (s1 -> c.grades - s2->c.grades ) <= 1 	    else (s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	(s1 -> c.grades - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	( c.grades[s1] - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	( c.grades[s1] - c.grades[s2] ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1
inv15 T: all c: Course, p: Project, s1: Student, s2: Student| p in s1.projects && p in s2.projects => 	   	(s1 -> c.grades - s2->c.grades ) <= 1 	    or ( s1 -> c.grades - s1 -> c.grades) <= 1

