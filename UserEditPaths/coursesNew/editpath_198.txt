NA H: THEME UPDATE
inv11 T: all s: Student | no (Course - s.enrolled).s.grades
inv11 B: all s: Student | no (Course - s.enrolled)
inv11 U: all s: Student | no (Course - s.enrolled).(s.grades)
inv11 S: all p: Person, c: Course | c in p.enrolled => c in p.grades.dom
inv11 O: all p: Person, c: Course | some c.grades => c in p.enrolled
inv11 O: all p: Person, c: Course | some c.grades <=> c in p.enrolled
inv11 O: all p: Person, c: Course | some c.grades => c in p.enrolled
inv11 S: all p: Person, c: Course | (c in p.enrolled <=> c in p.grades.dom)
inv11 S: all p: Person, c: Course |	(c in p.enrolled <=> c in (c: Course | c in p.grades))
inv11 S: all p: Person, c: Course | (c in p.enrolled <=> c in (c: Course | c in p.grades))
inv11 S: all p: Person, c: Course | (c in p.enrolled <=> c in (c: Course | c in p.grades))
inv11 T: all p: Person, c: Course | (c in p.enrolled <=> c in {c: Course | c in p.grades})
inv11 O: all p: Person, c: Course | some c.grades => c in p.enrolled
inv11 U: all p: Person, c: Course | some c.grades.p => c in p.enrolled
inv11 T: all p: Person, c: Course | some c.p.grades => c in p.enrolled
inv11 U: all p: Person, c: Course | some c.(p.grades) => c in p.enrolled
inv11 C: all p: Person, c: Course | some p.(c.grades) => c in p.enrolled
inv11 C: all p: Person, c: Course | some p.(c.grades) => c in p.enrolled
inv12 S: all s : Stuswnrt
inv11 U: all p: Student, c: Course | some p.(c.grades) => c in p.enrolled
inv12 S: all s : Student, c: s.enrolled | lone p.(c.grades)
inv12 U: all s : Student, c: s.enrolled | lone s.(c.grades)
inv12 U: all s : Student, c: s.enrolled | lone s.(c.grades)
inv12 U: all s : Student, c: s.enrolled | lone s.(c.grades)
inv14 S: all disj s1,s2 : Student | all p : Project | s1->p in projects and s2->p in projects => no s2.projects & no p1.projects - p
inv14 B: all disj s1,s2 : Student | all p : Project | s1->p in projects and s2->p in projects => no s2.projects - p & s1.projects
inv14 B: all disj s1,s2 : Student | all p : Project | (s1->p in projects and s2->p in projects) => no s2.projects - p & s1.projects
inv14 U: all disj s1,s2 : Student | all p : Project | (s1->p in projects and s2->p in projects) => no (s2.projects - p) & s1.projects
inv14 B: all disj s1,s2 : Student | all p : Project | (s1->p in projects and s2->p in projects) => no s2.projects - p & s1.projects
inv14 U: all disj s1,s2 : Student | all p : Project | (s1->p in projects and s2->p in projects) => no (s2.projects - p) & s1.projects
inv14 U: all disj s1,s2 : Student | all p : Project | p in s2.projects and p in s1.projects implies no (s2.projects - p) & s1.projects
inv14 U: all disj s1,s2 : Student | all p : Project | p in s2.projects and p in s1.projects implies no (s2.projects - p) & s1.projects
inv14 U: all disj s1,s2 : Student | lone s1.projects & s2.projects
inv15 S: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects =>abs(s1.grades[c] - s2.grades[c]) <=
inv15 S: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects =>abs(s1.grades[c] -s2.grades[c]) <= 1
inv15 T: all c: Course, p: Project, s1, s2: Student | s1.enrolled = s2.enrolled and s1.projects = s2.projects and p in s1.projects => (s1.grades[c] -s2.grades[c]) <= 1 || (s1.grades[c] -s2.grades[c]) >=1
inv15 S: all disj s1,s2 : Student | all c : Course | some p: Project | p in s1.projects and p in s2.projects => p1.((projects.p).grades) = p2.((projects.p).grades)
inv15 B: all disj s1,s2 : Student | all c : Course | some p: Project | p in s1.projects and p in s2.projects => s1.((projects.p).grades) = s2.((projects.p).grades)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => s1.(c.grades) = s2.(c.grades)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades) = s2.(c.grades) + 1) or (s1.(c.grades) = s2.(c.grades) - 1)
inv15 B: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades)) = (s2.(c.grades)) + 1 or (s1.(c.grades)) = (s2.(c.grades)) -1
inv15 S: all disj s1,s2 : Student | all c : Course | all p: c.projects | p in s1.projects and p in s2.projects => (s1.(c.grades)) = minus[(s2.(c.grades)),1] or (s1.(c.grades)) = (s2.(c.grades)) -1
inv15 E: 

