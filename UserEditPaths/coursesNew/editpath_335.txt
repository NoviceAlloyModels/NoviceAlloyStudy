NA H: THEME UPDATE
inv1 S: all c: Cours | enrolled.c in Student
inv1 C: all c: Course | enrolled.c in Student
inv2 S: all c: Course | teaches.c in Teacher
inv2 C: all c: Course | teaches.c in Professor
inv3 C: all c: Course | some teaches.c
inv4 T: all p: Project | one projects.p
inv3 C: all c: Course | some teaches.c
inv4 C: all p: Project| one c:Course | c = projects.p
inv3 C: all c: Course | some teaches.c
inv4 C: all p: Project| one c:Course | c = projects.p
NA H: THEME UPDATE
inv5 T: all p: Project | some projects.p in Student
inv5 B: all p: Project | all x: Person | x = projects.p and x in Student
inv5 S: all p: Project | some projects.p and projects.p in Student
inv5 S: all p: Project | some projects.p and projects.p in Student
inv5 S: all p: Project | some projects.p and projects.p in Student
inv5 T: all p: Project | some projects.p and projects.p in Student
inv5 T: all p: Project | some projects.p and projects.p in Student
inv5 T: all p: Project | some projects.p and projects.p in Student
inv1 C: all c: Course | enrolled.c in Student
inv2 C: all c: Course | teaches.c in Professor
inv3 C: all c: Course | some teaches.c
inv4 C: all p: Project| one c:Course | c = projects.p
inv5 T: all p: Project | some projects.p and projects.p in Student
inv5 U: all p: Project | some s:Student | p in s.projects
inv5 T: all p: Project | some s:Student | p in s.projects and projects.p in Student
inv5 T: all p: Project | some s:Student | p in s.projects and (Student)projects.p in Student
inv5 U: all p: Project | all x: Person | x in projects.p => x in Student
inv5 T: all p: Project | all x: Person | x in projects.p => x in Student and some projects.x
inv5 U: all p: Project | some x: Person | x in projects.p => x in Student
inv5 S: all p: Project | all x: Person | x in projects.p => x in Student	  	all p: Project | some project.p
inv5 T: all p: Project | all x: Person | x in projects.p => x in Student	  	all p: Project | some projects.p
inv5 S: all p: Project | some x: Person | x = projects.p => x in Student
inv5 U: all p: Project | some x: Person | x = projects.p => x in Student
inv5 U: all p: Project | some x: Person | projects.p = x => x in Student
inv5 U: all p: Project | all x: Person | p = x.projects => x in Student
inv5 T: all p: Project | all x: Person | p = x.projects => x in Student and some projects.p
inv5 U: all p: Project | all x: Person | x in projects.p => x in Student
inv5 S: all p: Project | all x: Person | x in projects.p => x in Student 	  	some p1: Person | p1 = projects.p
inv5 O: all p: Project | all x: Person | x in projects.p => x in Student 	  	some p1: Person | all p: Project| p1 = projects.p
inv6 S: all p1 : Project | some pr1 : Student | pr1->p1 in projects)	  	all p2 : Project | all pr2 : Person   | pr2->p2 in projects implies pr2 in Student
inv5 S: all p1 : Project | some pr1 : Student | pr1->p1 in projects)	  	all p2 : Project | all pr2 : Person   | pr2->p2 in projects implies pr2 in Student
inv5 C: all p1 : Project | some pr1 : Student | pr1->p1 in projects	  	all p2 : Project | all pr2 : Person   | pr2->p2 in projects implies pr2 in Student
inv5 C: all p1 : Project | some pr1 : Student | pr1->p1 in projects	  	all p2 : Project | all pr2 : Person   | pr2->p2 in projects => pr2 in Student
inv5 T: all p1 : Project | some pr1 : Student | pr1.projects.p1 	  	all p2 : Project | all pr2 : Person   | pr2->p2 in projects => pr2 in Student
inv5 C: all p1 : Project | some s: Student  | s->p1 in projects	  	all p2 : Project | all  p: Person   | p->p2 in projects => p in Student
inv6 T: all s: Student | all p: Project | all c: Course | s->p in projects => s->c enrolled
inv6 T: all s: Student | all p: Project | all c: Course | s->p in projects => s->c enrolled
NA H: THEME UPDATE
inv6 T: all s: Student | all p: Project | all c: Course | s->p in projects => s->c enrolled
inv1 C: all c: Course | enrolled.c in Student
inv2 C: all c: Course | teaches.c in Professor
inv3 C: all c: Course | some teaches.c
inv4 C: all p: Project| one c:Course | c = projects.p
inv6 B: all s:Student | all p: Project | all c: Course | s ->p in projects => s->c in enrolled
inv6 B: all s:Student | all p: Project | all c: Course | s ->p in projects => s in enrolled.c
inv6 B: all s:Student | all p: Project | all c: Course | s->p in projects => s in enrolled.c and c->p in projects
inv6 B: all s:Student | all p: Project | some c: Course | s->p in projects => s in enrolled.c and c->p in projects
inv6 B: all s:Student | all p: Project | all c: Course | s->p in projects => s in enrolled.c and c->p in projects
inv6 B: all s:Student | all p: Project | some c: Course | s->p in projects => s in enrolled.c and c->p in projects
inv7 S: all s: Studen | some p: Project | all c: Course | s->c in enrolled => s->p in projects and c->p in projects
inv7 B: all s: Student | some p: Project | all c: Course | s->c in enrolled => s->p in projects and c->p in projects
inv7 S: all s: Student | some p: Project | all c: Course | s->c in enrolled c->p in projects  => s->p in projects
inv7 B: all s: Student | some p: Project | all c: Course | s->c in enrolled and c->p in projects  => s->p in projects
inv7 B: all s: Student | some p: Project | some c: Course | s->c in enrolled and c->p in projects  => s->p in projects
inv7 B: all s: Student | some p: Project | all c: Course | s->c in enrolled and c->p in projects  => s->p in projects
inv7 S: all s: Student | some p: Project | all c: Course | s->c in enrolled => s->c.projects in projetcts
inv7 B: all s: Student | some p: Project | all c: Course | s->c in enrolled => s->c.projects in projects
inv7 B: all s: Student  | all c: Course | s->c in enrolled => s->c.projects in projects
inv7 S: all s: Student | lone p: Project | all c: Course | s->c in enrolled => s->c.projects in projetcts
inv7 B: all s: Student | lone p: Project | all c: Course | s->c in enrolled => s->c.projects in projects
inv7 B: all s: Student | lone p: Project | all c: Course | s->c in enrolled => s->p in projects and c->p in projects
inv7 B: all s: Student | lone p: Project | all c: Course | s->c in enrolled => s->p in projects and c->p in projects
inv7 B: all s: Student | lone p: Project | all c: Course | s->c in enrolled => s->p in projects and c->p in projects
inv7 B: all s: Student | lone p: Project | all c: Course | s->c in enrolled and c->p in projects  => s->p in projects
inv7 T: all s: Student | lone p: Project | all c: Course | s->c in enrolled and some c->p in projects  => lone s->p in projects
inv7 T: all s: Student | all p: Project | all c: Course | s->c in enrolled and c->p in projects  => lone s->p in projects
inv7 T: all s: Student | all p: Project | all c: Course | s->c in enrolled and c->p in projects  => lone s.projects in c.projects
inv7 B: all s: Student | all p: Project | all c: Course | s->c in enrolled and c->p in projects  => s.projects in c.projects
inv7 T: all s: Student | all p: Project | all c: Course | s->c in enrolled and c->p in projects  => s.projects & c.projects
inv7 U: all s: Student | all p: Project | all c: Course | s->c in enrolled => lone (s.projects & c.projects)
inv7 U: all s: Student  | all c: Course | s->c in enrolled => lone (s.projects & c.projects)
inv7 U: all s: Student  | all c: Course | s in enrolled.c => lone (s.projects & c.projects)
inv7 U: all s: Student  | all c: Course | s->c in enrolled => lone (s.projects & c.projects)
inv7 U: all s: Student  | all c: Course | s->c in enrolled => lone (s.projects & c.projects)
inv8 B: all p: Professor | p.teaches not in p.enrolled
inv8 U: all p: Professor | no (p.teaches & p.enrolled)
inv9 S: all p: Professor | all c: Teacher | no (p.teaches & c.enrolled)
inv8 U: all p: Professor | no (p.teaches & p.enrolled)
inv9 B: all p: Professor | all c: Professor | no (p.teaches & c.enrolled)
inv9 B: all p: Professor | all c: Professor | no (p.teaches & c.enrolled)  and p != c
inv9 B: all p: Professor | all c: Professor | no (p.teaches & c.enrolled)
inv9 B: all p: Professor | all c: Professor | some (p.teaches & c.teaches) => no (p.teaches & c.enrolled)
inv10 S: all p:Person | all c: Course | all g: Grades | c->p->g in grades => p in Student
NA M: MOD BASE MODEL
inv9 B: all p: Professor | all c: Professor | some (p.teaches & c.teaches) => no (p.teaches & c.enrolled)
inv10 S: all p:Person | all c: Course | all g: Grades | c->p->g in grades => p in Student
inv10 C: all p:Person | all c: Course | all g: Grade | c->p->g in grades => p in Student
inv11 U: all s:Student | all g: Grade | all c:Course | c->s->g in grades => s in enrolled.c
inv11 U: all s:Student | all g: Grade | all c:Course | c->s->g in grades => s in enrolled.c
inv12 B: all s:Student | lone g: Grade | all c:Course | c->s->g in grades
inv12 T: all s:Student | all g1,g2: Grade | all c:Course | c->s->g1 in grades and c->s->g2 => g1=g2
inv12 U: all s:Student | all g1,g2: Grade | all c:Course | c->s->g1 in grades and c->s->g2 in grades => g1=g2
inv12 B: all s:Student | lone g1,g2: Grade | all c:Course | c->s->g1 in grades and c->s->g2 in grades => g1=g2
inv12 U: all s:Student | all g1,g2: Grade | all c:Course | c->s->g1 in grades and c->s->g2 in grades => g1=g2
inv12 U: all s:Student  | all c:Course | s in enrolled.c => lone g: Grade | c->s->g in grades
inv13 S: all s: Student | all c:Course| all g1: Grade|	  	c->s->g in grades and  g in c.grades.last => some p:Project s->p in projects and c->p in projects
inv13 S: all s: Student | all c:Course| all g1: Grade|	  	c->s->g in grades and  g in c.grades.last => some p:Project | s->p in projects and c->p in projects
inv13 U: all s: Student | all c:Course| all g: Grade|	  	c->s->g in grades and  g in c.grades.last => some p:Project | s->p in projects and c->p in projects
inv13 U: all s: Student | all c:Course| all g: Grade|	  	c->s->g in grades and  g in c.grades.last => some p:Project | s->p in projects and c->p in projects
inv13 U: all s: Student | all c:Course| s = c.grades.last => (some p: Project | s in projects.p and c in projects.p)
inv13 U: all s: Student | all c:Course| s = c.grades.last => (some p: Project | p in s.projects and p in c.projects)
inv13 U: all s: Student | all c:Course| s in c.grades.last => (some p: Project | p in s.projects and p in c.projects)
inv13 U: all s: Student | all c:Course| s in c.grades.last => (some p: Project | p in s.projects and p in c.projects)
inv14 B: all s1,s2: Student | all p1,p2: Project | s1->p1 in projects and s2->p1 in projects and s1->p2 in projects =>	  	s2 not in projects.p2
inv14 B: all s1,s2: Student | all p1,p2: Project | s1->p1 in projects and s2->p1 in projects and s1->p2 in projects and s2->p2 in projects => s1 = s2
inv14 S: all s1,s2: Student | all p1,p2: Project |	  	s1->p1 in projects and s2->p1 in projects and s1!=s2 and p1!=p2 => s1+s2 not in projects.p
inv14 U: all s1,s2: Student | all p1,p2: Project |	  	s1->p1 in projects and s2->p1 in projects and s1!=s2 and p1!=p2 => s1+s2 not in projects.p2
inv15 T: all s1,s2: Student | all p: Project | all c: Course | all g1,g2: Grade |	  	s1->p in projects and s2->p in projects and c->p in projects and c->s1->g1 in grades and c->s2->g2 in grades =>	  	g2-g1 <=1
inv15 T: all s1,s2: Student | all p: Project | all c: Course | all g1,g2: Grade |	  	s1->p in projects and s2->p in projects and c->p in projects and c->s1->g1 in grades and c->s2->g2 in grades =>	  	g2 & g1 <=1
inv15 B: all s1,s2: Student | all p: Project | all c: Course | all g1,g2: Grade |	  	s1->p in projects and s2->p in projects and c->p in projects and c->s1->g1 in grades and c->s2->g2 in grades =>	  	g1 = g2 or g1 = prev[g2] or g2 = prev[g1]
NA H: THEME UPDATE
NA H: THEME UPDATE

