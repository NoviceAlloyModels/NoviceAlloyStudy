NA H: THEME UPDATE
inv1 C: enrolled.Course in Student
inv1 U: all c: Course, p: Person | (p in c.enrolled) => p in Student
inv2 U: all c: Course, p: Person |	    (p in c.teaches) => p in Professor
inv2 C: teaches.Course in Professor
inv3 O: all c: Course | #c.teaches > 0
inv3 C: all c: Course | some teaches.c
inv4 B: all p: Project, c: Course | p in c.projects => c in p.enrolled
inv4 C: all p: Project | one Course :> projects.p
inv5 C: Person :> projects.Project in Student	  	all p: Project | some Person :> projects.p
inv6 U: all s: Student | s.projects in s.enrolled.projects
inv6 S: all p: Project, s: Student |	    (s in p.people) => (p.courses in s.enrolled)
inv7 U: all s: Student | all c: s.enrolled | lone c.projects & s.projects
inv7 U: all s: Student |	    all c: Course |	      #(s.projects & c.projects) <= 1
inv8 U: all t: Professor | all c: t.teaches | t.enrolled in Course-c
inv8 T: all p: Professor |	    no p in p.teaches
inv8 T: all p: Professor | no p in p.teaches
inv9 T: all p: Professor |	    all q: Professor |	      no p in q.teaches
inv9 B: all p1, p2 : Professor | all c: Course | c in p1.teaches and c in p2.teaches implies no p1.teaches & p2.enrolled
inv10 C: all p:Person | p in Course.grades.Grade implies p in Student
inv10 O: all p: Person, c: Course | (c.grades[p] in Grade) => (p in Student)
inv11 U: all s: Student | all c: Course | s in c.grades.Grade implies c in s.enrolled
inv11 O: all p: Person, c: Course | (c.grades[p] in Grade) => (c in p.enrolled)
inv12 U: all s: Student | all c: Course | lone ~(c.grades).s
inv12 S: all s: Student |	    all c: Course |	      (s.courses.grades[s] in Grade) => (s.courses.grades[s].cardinality() <= 1)
inv12 S: all s: Student | all c: Course | (s.courses.grades[s] in Grade) => (s.courses.grades[s].cardinality() <= 1)
inv13 U: all s: Student | all c: Course | s in c.grades.last implies some s.projects & c.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone s1.projects & s2.projects
inv14 S: all p: Project |	    all s1, s2: Student | 	      (s1 in p.people) && (s2 in p.people) => (s1 != s2)
inv15 B: all p : Project | all s1,s2 : Student | all c : Course | (s1!=s2 and p in s1.projects and p in s2.projects and p in c.projects) implies 	    (all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) implies 	    (g1=prev[g2] or g2=prev[g1] or g1=g2))

