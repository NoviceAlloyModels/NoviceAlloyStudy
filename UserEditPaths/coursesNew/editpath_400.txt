NA H: THEME UPDATE
inv1 B: all p : Person - Professor, c : Course | c in p.enrolled
inv1 B: all p : Person - Student, c : Course | c in p.enrolled
inv1 T: all p : Person |p not in Student implies not p.enrolled
inv1 C: all p : Person |p not in Student implies no p.enrolled
inv1 T: all p : Person - Professor | p.enrolled
inv1 S: all p : Person - Professor | all p.enrolled
inv2 C: all p : Person |p not in Professor implies no p.teaches
inv3 C: all c:Course | some teaches.c
inv4 S: all p : project | one c : course | p in c.projects
inv4 S: all p : Project | one c : course | p in c.projects
inv4 C: all p : Project | one c : Course | p in c.projects
inv5 T: all p : Person, pr : Project | p not in Student implies no pr in p.projects	  	all pr: Project | some p : Person | p in p.projects
inv5 T: all p : Person, pr : Project | p not in Student implies  pr not in p.projects	  	all pr: Project | some p : Person | p in p.projects
inv5 C: all p : Person, pr : Project | p not in Student implies pr not in p.projects	  	all pr: Project | some s : Student | pr in s.projects
inv5 C: all p : Person, pr : Project | p not in Student implies pr not in p.projects	  	all pr: Project | some s : Person | pr in s.projects
inv5 C: all p : Person, pr : Project | p not in Student implies pr not in p.projects	  	all pr: Project | some s : Student | pr in s.projects
inv6 B: all st : Student, c : Course, pr:c.projects | c in st.enrolled implies pr in st.projects
inv6 B: all st : Student, c : Course, pr:st.projects | c in st.enrolled implies pr in c.projects
inv6 B: all st : Student, c : Course, pr:st.projects | c in st.enrolled implies pr in c.projects
inv6 U: all st : Student, pr:st.projects|some c : Course | c in st.enrolled implies pr in c.projects
inv6 U: all st : Student, pr: st.projects |some c : Course | c in st.enrolled <=> pr in c.projects
inv6 U: all st : Student, pr: st.projects |some c : Course | c in st.enrolled and pr in c.projects
inv7 S: all st:Student, c:Course, lone pr:Project | c in st.enrolled implies p in c.projects
inv7 S: all st:Student, c:Course, one pr:Project | c in st.enrolled implies p in c.projects
inv7 U: all st:Student, c:st.enrolled | lone (st.projects & c.projects)
inv7 T: all st:Student, c:st.enrolled, pr:st.projects | lone (pr in c.projects)
inv7 U: all st:Student, c:st.enrolled, pr:st.projects | lone (st.projects & c.projects)
inv7 U: all st:Student, c:st.enrolled | lone (st.projects & c.projects)
inv8 U: all p : Professor |p not in p.teaches
inv8 U: all p : Professor, c : Course | c in p.teaches implies c not in p.enrolled
inv9 B: all p1 : Professor, p2:Professor, c : Course | c in p1.teaches implies c not in p2.enrolled
inv9 S: all p1 : Professor, p2:Professor-p, c : Course | c in p1.teaches implies c not in p2.enrolled
inv9 B: all p1 : Professor, p2:Professor-p1, c : Course | c in p1.teaches implies c not in p2.enrolled
inv9 U: all p : Professor | (all col : Professor - p | some (col.teaches & p.teaches) implies no (col.enrolled & p.teaches))
inv10 S: all p:Person | p not in Student implies no some enrolled.grades
inv10 B: all st:Student, c : st.enrolled| some c.grades
inv10 B: all p:Person-Professor, c : p.enrolled| some c.grades
inv10 C: all c : Course, p : Person, g : Grade | p->g in c.grades implies p in Student
inv11 S: all st :Student, c:st.enrolled, g : Grade | p->g in c.grades
inv11 B: all st :Student, c:st.enrolled, g : Grade | st->g in c.grades
inv11 O: all st :Student, c:st.enrolled, g : Grade | st->g in c.grades	    all c: Course | (all p: Person, g: Grade | p->g in c.grades implies c in p.enrolled)
inv11 U: all st :Student, c:Course, g : Grade | st->g in c.grades implies c in st.enrolled
inv12 U: all st : Student, c : Course | lone g : Grade | st->g in c.grades
inv13 S: all c: Course | some s: Student | s.grades[c] = max[g | g in c.grades[Person]] => s in c.projects
inv13 S: all c: Course | some s: Student | s.grades[c] = max[g | g in c.grades[Person]] => s in c.projects
inv13 S: all c: Course | some s: Student | s.grades[c] = max[g | g in c.grades[s]] => s in c.projects
inv13 S: all c: Course | some s: Student | s.grades[c] = max[g | g in c.grades[s]] => s in c.projects
inv13 S: all c: Course | some s: Student | c.grades[s] = max[g | g in c.grades[s]] => s in c.projects
inv13 T: all c: Course, s: Student, g : Grade | max (st->g in c.grades)  s in c.projects
inv13 S: all c: Course, s: Student, g : Grade | max[st->g in c.grades]  s in c.projects
inv13 T: all c: Course, st: Student, g : Grade | max[st->g in c.grades] implies  st in c.projects
inv13 T: all c: Course, st: Student, g : Grade | max[st->g in c.grades] implies  st in c.projects
inv13 T: all c: Course, st: Student, g : Grade | max[st->g in c.grades]
inv13 S: all c: Course, st: Student, g : Grade | max[g | st->g in c.grades]
inv13 S: all c: Course, st: Student, g : Grade | max[g | st->g in c.grades]

