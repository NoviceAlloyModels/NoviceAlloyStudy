NA H: THEME UPDATE
inv7 S: all s:Student|(all c:s.enrolled|one c.project)
inv7 B: all s:Student|(all c:s.enrolled|one c.projects)
inv7 B: all s:Student|(all c:s.enrolled|one c.projects)
inv7 S: all s:Student|(all c:s.enrolled|lone (c.projects & s.projects)
inv7 U: all s:Student|all c:s.enrolled|lone (c.projects & s.projects)
inv7 T: all c: Course, p: Person | #p.projects & c = 1
inv7 T: all c: Course, p: Person |	    (p in Student implies #p.projects & c <= 1)	    && (p in Professor implies #p.projects & c = 0)
inv7 U: all s:Student|all c:s.enrolled|lone (c.projects & s.projects)
inv8 U: all p:Professor|all c:p.enrolled | c not in p.teaches
inv9 B: all p,p1 : Professor | all c:p.teaches | c not in p1.enrolled
inv10 B: all s:Professor | all c:s.enrolled | no c.grades
inv10 S: all c:Course |(all s:Person,g:Grade | s->g  in c.grades implies p in Student
inv10 S: all c:Course |(all s:Person,g:Grade | s->g  in c.grades implies p in Student)
inv10 C: all c:Course |(all s:Person,g:Grade | s->g  in c.grades implies s in Student)
inv11 S: all c:Course |(all s:Student g:grade | s->g in c.grades implies c in s.enrolled)
inv11 S: all c:Course |(all s:Student g:Grade | s->g in c.grades implies c in s.enrolled)
inv11 U: all c:Course |(all s:Student, g:Grade | s->g in c.grades implies c in s.enrolled)
inv12 S: all s:Students,g:Grade,c:Course | lone s->g in c.grades
inv12 T: all s:Student,g:Grade,c:Course | lone s->g in c.grades
inv12 T: all s:Student,g:Grade,c:Course | lone (s->g in c.grades)
inv12 C: all c: Course | (all p: Person| lone g: Grade | p->g in c.grades)
inv13 S: all c: Course |	    all s: Student |	      let highestMark = max[Grade](s.^(grades.c)) |	        highestMark in s.grades.c => (s.projects & c) != none
inv13 S: all c: Course |	    all s: Student |	      let highestMark = max[Grade](s.^(grades.c)) |	        highestMark in s.grades.c => (s.projects & c) != none
inv13 S: all c: Course |	    let highestMark = max[Grade](grades.c) |	      all s: Student |	        (s.grades.c = highestMark) implies (s.projects & c) != none
inv14 S: all disj s1,s2:Student | c1,c2:Course | (s1 in c1.project & s2 in c1.project) implies no (s1 in c2.project && s2 in c2.project)
inv14 S: all disj s1,s2:Student |all c1,c2:Course | (s1 in c1.project & s2 in c1.project) implies no (s1 in c2.project && s2 in c2.project)
inv14 T: all disj s1,s2:Student |all c1,c2:Course | (s1 in c1.projects & s2 in c1.project) implies no (s1 in c2.project && s2 in c2.project)
inv14 T: all disj s1,s2:Student |all c1,c2:Course | ((s1 in c1.projects) & (s2 in c1.project)) implies no (s1 in c2.project && s2 in c2.project)
inv14 U: all disj s1,s2:Student | lone (s1.projects & s2.projects)

