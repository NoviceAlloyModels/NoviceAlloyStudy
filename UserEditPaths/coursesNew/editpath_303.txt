NA H: THEME UPDATE
inv7 S: all x : Student | y in x.enrolled :> Course =>
inv9 S: all x : Teacher | all y : Teacher-x | y not in x.teaches
inv9 U: all x : Professor | all y : Professor-x | y not in x.teaches
inv9 B: all x : Professor | all y : Professor-x | y.enrolled not in x.teaches
inv5 U: all x : Project | some Person <: projects.x
inv5 T: all x : Project | some Person <: projects.x		all y : Person | y.projects :> Project => y in Student
inv5 T: all x : Project | some Person <: projects.x		all y : Person | (y.projects :> Project) => y in Student
inv5 C: all x : Project | some Person <: projects.x		all y : Person | (some y.projects :> Project) => y in Student
inv7 T: all x : Student | all y : x.projects | one projects.y in x.enrolled
inv7 T: all x : Student | all y : x.projects | one Course <: projects.y in x.enrolled
inv7 T: all x : Student | all y : x.projects | one (Course <: projects.y in x.enrolled)
inv7 T: all x : Student | all y : x.projects | one projects.y
inv7 B: all x : Student | all y : x.projects | one Course <: projects.y
inv7 B: all x : Student | all y : x.enrolled | one y.projects
inv7 B: all x : Student | all y : x.enrolled | lone y.projects
inv7 U: all x : Student | all y : x.enrolled | lone (y.projects & x.projects)
inv7 B: all x : Student | all y : x.enrolled | lone (x.projects)
inv8 B: all x : Professor | x.enrolled in x.teaches
inv8 B: all x : Professor | x.enrolled not in x.teaches
inv8 T: all x : Professor | x.enrolled => not(x.teaches)
inv8 T: all x : Professor | some x.enrolled => not(x.teaches)
inv8 U: all x : Professor | all y: x.enrolled | y not in x.teaches
inv10 T: all x : Grade | grades.x in Student
inv10 S: all x: Course | all p->g: x.grades | p in Student
inv10 S: all x: Course | all p->g: x.grades | p in Student
inv10 T: all x: Course | all p: x.grades->Grade | p in Student
inv10 C: all x: Course | all p: x.grades.Grade | p in Student
inv10 C: all p: Course.grades.Grade | p in Student
inv10 S: student in Course.grades.Grade
inv10 B: Student in Course.grades.Grade
inv10 C: all p: Course.grades.Grade | p in Student
inv12 T: all x : Student | all y: x.enrolled | some x.y.grades
inv12 B: all x : Student | all y: x.enrolled | some y.grades
inv12 B: all x : Student | all y: x.enrolled | lone y.grades
inv12 B: all x : Student | lone x.enrolled.grades
inv12 T: all x : Student | lone x.x.enrolled.grades
inv12 B: all x : Student | lone x.(x.enrolled.grades)
inv12 E: 
inv10 C: all p: Course.grades.Grade | p in Student
inv11 U: all x: Course | all y: Student | (y in x.grades.Grade) => x in y.enrolled
inv12 B: all x: Student | one x.(Course.grades)
inv14 S: all x : Student | one  Student<:projects(x.projects)

