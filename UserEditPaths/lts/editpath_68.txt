NA H: THEME UPDATE
inv1 C: all s : State | some s.trans
inv2 C: one Init
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 U: no trans[Event]
inv4 S: let ts : onlyStates[] |	  		all s : State | s in Init.^ts
inv4 S: all s : State | s in Init.^onlyStates
inv4 S: all s : State | s in Init.^onlyStates
inv4 S: all s : State | s in Init.^onlyStates
inv4 S: all s : State | s in Init.^onlyStates
inv5 S: all s1, s2: State | getEventsOfState[s1] = getEventsOfState[s2]
inv6 S: all e: Event, some s: State | e in getEventsOfState[s]
inv6 S: all e: Event, some s: State | e in getEventsOfState[s]
inv6 S: all e: Event | some s: State | e in getEventsOfState[s]
inv7 S: all s : State | some i: Init | s.isReachableFromState[i] implies i.isReachableFromState[s]	}		pred isReachableFromState[s: State, i: State]{	  	s in i.^onlyStates
inv1 C: all s : State | some s.trans
inv1 C: all s : State | some s.trans
NA M: MOD BASE MODEL
inv7 S: all s : State | some i: Init | s.isReachableFromState[i] implies i.isReachableFromState[s]	}		pred isReachableFromState[s: State, i: State]{	  	s = i or s in i.*onlyStates
inv7 S: all s : State | some i1,i2: Init | s.isReachableFromState[i1] implies i2.isReachableFromState[s]	}		pred isReachableFromState[s: State, i: State]{	  	s in i.*onlyStates
NA H: THEME UPDATE
inv7 S: all s : State | some i1,i2: Init | s.isReachableFromState[i1] implies i2.isReachableFromState[s]	}		pred isReachableFromState[s: State, i: State]{	  	s in i.*onlyStates

