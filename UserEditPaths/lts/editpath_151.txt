NA H: THEME UPDATE
inv4 U: State-Init in Init.(Init->(State-Init))
inv4 U: no Init  implies no State
inv4 T: no Init  implies no State and  all i :Init |  i.trans & State
inv4 T: no Init  implies no State and  all i :Init|some e:Event |  e.(i.trans) & State
inv4 U: no Init  implies no State and  all i :Init|some e:Event | some e.(i.trans) & State
inv4 T: no Init  implies no State and  all i :Init|(State-Init).^~(i.trans)
inv4 U: no Init  implies no State and  all i :Init|some (State-Init).^~(i.trans)
inv4 U: no Init  implies no State and  all i :Init|(State-Init)in  (State-Init).~(i.trans)
inv4 U: no Init  implies no State and  all i :Init|(State-Init)in  (State).~(i.trans)
inv4 S: no Init  implies no State and (some e:Event | all s:(State-Init) | some(Init & trans^.(e->s)) )
inv4 T: no Init  implies no State and (some e:Event | all s:(State-Init) | some (Init & trans.(e->s)) )
inv4 T: no Init  implies no State and (some e:Event | all s:(State) | some (Init & trans.(e->s)) )
inv5 C: all disj s1,s2 :State |  no ((s1.trans).State) -((s2.trans).State) and no ((s2.trans).State) - ((s1.trans).State)
inv6 O: all e:Event|some s:State | some trans.(e->s)
inv6 O: some s:State |all e:Event| some trans.(e->s)
inv6 O: all e:Event|some s:(State-Init) | some trans.(e->s)
inv6 O: all e:Event|some s:State | some trans.(e->s)
inv6 O: all e:Event|some s:State | some trans.(e->s) or one trans.(e->s)
inv6 T: all e:Event |some s,s1:State | some (s1->e->s) in trans
inv6 C: all e:Event |some s,s1:State |  (s1->e->s) in trans
inv4 S: let adj={x,y:State | some e:Event |x->e->y in trans}
inv4 S: let adj={x,y:State | some e:Event |x->e->y in trans}	  	  all i:Init |(State-Init) in i.^adj
inv4 S: let adj={x,y:State | some e:Event |x->e->y in trans}	  	  all i:Init |(State-Init) in i.^adj
inv4 S: let adj={x,y:State | some e:Event |x->e->y in trans}	  	  all i:Init |(State-Init) in i.^adj
inv4 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  all i:Init |(State-Init) in i.^adj
inv4 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  all i:Init |(State) in i.^adj
inv4 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  all i:Init |(State) in i.*adj
inv4 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  all i:Init | some Init implies (State) in i.*adj
inv4 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  some i:Init | (State) in i.*adj
inv4 O: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  some i:Init | (State) in i.^adj
inv4 C: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	 (State) in Init.^adj
inv7 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |		all  s1,s2 :State |some e:Event |  (s1->e->s2) in trans implies ( Init in s2.^adj  )
inv7 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  		all  s1,s2 :State |some e:Event |  (s1->e->s2) in trans implies ( Init in s2.*adj  )
inv7 B: let adj ={x,y:State | some e:Event |x->e->y in trans} |	  	  		  			all  s1,s2 :State |some e:Event |  one State or (s1->e->s2) in trans implies ( Init in s2.*adj  )

