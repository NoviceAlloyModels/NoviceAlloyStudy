NA H: THEME UPDATE
inv1 C: all s: State | some s.trans
inv2 E: 
inv2 E: 
inv2 C: one Init
inv3 E: 
inv3 U: all e: Event | all s: State | lone s.trans.e
inv3 C: all e: Event | all s: State | lone s.trans[e]
inv3 C: all e: Event, s: State | lone s.trans[e]
inv4 T: Init.*trans = State
inv4 T: Init.*(State.trans.Event) = State
inv4 T: Init.*(~trans.Event) = State
inv3 C: all e: Event, s: State | lone s.trans[e]
inv4 T: Init.*(State.trans[Event]) = State
inv4 S: Init.*({x: State, y: State | any e: Event | x.trans[e] = y}) = State
inv4 S: Init.*({x: State, y: State | (any e: Event | x.trans[e] = y) }) = State
inv3 C: all e: Event, s: State | lone s.trans[e]
inv3 C: all e: Event, s: State | lone s.trans[e]
inv3 C: all e: Event, s: State | lone s.trans[e]
inv4 U: Init.*{x: State, y: State | some (x.trans).y } = State
inv4 U: Init.*({x: State, y: State | some (x.trans).y }) = State
inv4 B: Init.*({x: State, y: State | some e: Event | x.trans[e] = y }) = State
inv4 U: Init.*({x: State, y: State | some (x.trans).y }) = State
inv4 C: Init.^({x: State, y: State | some (x.trans).y }) = State
inv3 C: all e: Event, s: State | lone s.trans[e]
inv4 C: Init.^({x: State, y: State | some (x.trans).y }) = State
inv4 U: Init.*({x: State, y: State | some (x.trans).y }) = State
inv4 C: Init.^({x: State, y: State | some (x.trans).y }) = State
inv5 O: all x: State, y: State | (x.trans).univ = (univ.trans).y
inv5 B: all x: State, y: State | (x.trans).univ = (univ.trans).x
inv5 O: all x: State, y: State | (x.trans).univ = (univ.trans).y
inv5 C: all x: State, y: State | (x.trans).univ = (y.trans).univ
inv5 C: all x: State, y: State | (x.trans).univ = (y.trans).univ
inv6 C: all e: Event | some e.(univ.trans)
inv7 B: inv4	}		pred inv4{	  Init.^({x: State, y: State | some (x.trans).y }) = State
inv7 S: let t = {x: State, y: State | some (x.trans).y };	  Init in Init.^t
inv7 S: let t = {x: State, y: State | some (x.trans).y }	  Init in Init.^t
inv7 B: let t = {x: State, y: State | some (x.trans).y } |	  Init in Init.^t
inv7 B: let t = {x: State, y: State | some (x.trans).y } |	    Init in Init.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	    all s : Init.^t | Init in s.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	    all s: Init.^t | Init in s.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init |	    all s: i.^t | i in s.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.^t | i in s.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.*t | i in s.^t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.*t | i in s.*t
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.*t | i in s.^t
inv7 S: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.*t | i in s.^t or i == s
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.*t | i in s.^t or i = s
inv7 O: let t = {x: State, y: State | some (x.trans).y } |	  	all i: Init | all s: i.^t | i in s.^t or i = s
inv7 S: let t = {x: State, y: State | some (x.trans).y } |	  	all s: i.^t | some s.^t & Init
inv7 C: let t = {x: State, y: State | some (x.trans).y } |	  	all s: Init.^t | some s.^t & Init

