NA H: THEME UPDATE
inv1 C: all s : State | some s.trans
inv1 C: all s : State | some s.trans
inv2 C: one Init
inv3 C: all s : State, e : Event | lone (e <: s.trans)
inv4 E: 
inv5 C: all disj s1, s2 : State | State.~(s1.trans) = State.~(s2.trans)
inv6 C: all e : Event | some s : State | some (e.(s.trans))
inv3 T: all s : State, e : Event | lone (e <: s.trans)	}		fun onlyStates[s : State] : set State->State {		{ aux : Event.(s.trans) | s -> aux }
inv3 T: all s : State, e : Event | lone (e <: s.trans)	}		fun onlyStates[s : State] : set State->State {		{ aux : Event.(s.trans) | s -> aux }
inv3 T: all s : State, e : Event | lone (e <: s.trans)	}		fun onlyStates : set State->State {		{ aux : Event.(Init.trans) | Init -> aux }
inv3 T: all s : State, e : Event | lone (e <: s.trans)	}		fun onlyStates : set (State->State) {		{ aux : Event.(Init.trans) | Init -> aux }
inv4 S: State in Init.^onlyStates
inv7 S: all s : State | Init in s.^onlyStates
inv7 S: (State = Init) or		(all s : State | Init in s.^onlyStates)
inv7 S: (no trans) or		(all s : State | Init in s.^onlyStates)
inv7 S: (all s : State | Init in s.^onlyStates)
inv7 S: (all s : State.^onlyState | Init in s.^onlyStates)
inv7 S: (all s : State.^onlyStates | Init in s.^onlyStates)
inv7 S: (all s : (State.^onlyStates - Init) | Init in s.^onlyStates)
inv7 S: (all s : State.^onlyStates | Init in s.^onlyStates)

