NA H: THEME UPDATE
inv1 C: all s : State | some (s.trans)
inv2 C: one Init
inv3 C: all s : State, e : Event | lone(e.(s.trans))
inv6 C: Event = (State.trans).State
inv4 T: State = ^(Init.trans)
inv4 O: State = ^(Init.trans).State
inv4 O: State = ^(Init.trans).State
inv4 O: State in ^(Init.trans).State
inv5 O: all s : State | State.(~(s.trans)) = Event
inv5 C: all s1, s2 : State | State.(~(s1.trans)) = State.(~(s2.trans))
inv4 O: all s : State | s in State.(Init.trans)
inv4 O: all s : State | s in (Init.trans).State
inv4 O: all s : State | s in ^(Init.trans).State
inv4 T: all s : State | s in Init.trans
inv4 O: all s : State | s in Init.trans.State
inv4 O: all s : State | s in Event.(Init.trans)
inv4 O: all s : State | s in Event.^(Init.trans)
inv4 O: all s : State | s in Event.(Init.trans)
inv1 C: all s : State | some (s.trans)
inv2 C: one Init
inv3 C: all s : State, e : Event | lone(e.(s.trans))
inv5 C: all s1, s2 : State | State.(~(s1.trans)) = State.(~(s2.trans))
inv6 C: Event = (State.trans).State
inv4 O: State = Init.^(trans.State)
inv4 O: all s : State | s in Init.^(trans.State)
inv4 O: all s : State | s in Init.^(trans.State)
inv4 O: State = Init.^(trans.State)
inv4 O: State = Init.^(State.trans)
inv4 T: State = Init.^(trans)
inv4 O: State = Event.^(Init.trans)
inv4 O: all s : State | some e : Event | s->e in ^(Init.trans)
inv4 T: all s : State | some e : Event | s->e in Init.^(State.trans)
inv4 B: all x : Init | State in Event.*(x.trans)
inv4 C: let t = { x,y : State | some z : Event | x->z->y in trans} | State in Init.(^t)
inv4 T: let t = { all x,y : State | some z : Event | x->z->y in trans} | State in Init.(^t)
inv4 C: let t = { s1, s2 : State | some e : Event | s1->e->s2 in trans} | State in Init.(^t)
inv4 T: let t = { some s1, s2 : State | some e : Event | s1->e->s2 in trans } | State in Init.(^t)
inv4 B: let t = { s2, s1 : State | some e : Event | s1->e->s2 in trans } | State in Init.(^t)
inv4 C: State in Init.(^onlyStates)	}		fun onlyStates : set State -> State {	  { s1,s2: State | some e: Event | s1->e->s2 in trans }
inv4 S: State in Init.(^onlyStates)	}		fun onlyStates : set State -> State {	  s1,s2: State | some e: Event | s1->e->s2 in trans
inv4 C: State in Init.(^onlyStates)	}		fun onlyStates : set State -> State {	  { s1,s2: State | some e: Event | s1->e->s2 in trans }
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set State -> State {	  { s1,s2: State | some e: Event | s1->e->s2 in trans }
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set State -> State {	  { s1, s2: State | some e : Event | s1->e->s2 in trans }
inv4 C: State = Init.~(^onlyStates)	}		fun onlyStates : set State -> State {	  { s2, s1: State | some e : Event | s1->e->s2 in trans }
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set (State -> State) {	  { s1, s2: State | some e : Event | s1->e->s2 in trans }
inv4 S: State = Init.(^onlyStates)	}		fun onlyStates : set (State -> State) {	  { (s1, s2) : State | some e : Event | s1->e->s2 in trans }
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set (State -> State) {	  { s1, s2 : State | some e : Event | s1->e->s2 in trans }
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set (State -> State) {	  { s1, s2 : State | some e : Event | s1->e->s2 in trans }
inv7 S: all s : State | (s in Init.(^onlyStates)) implies (Init in s.~(^onlyStates))
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} | State in ~(^t).Init
inv7 O: all x : State, y : Init, z : Event | trans in y one -> one z one -> one x
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} | Init in Init.*trans_bin.*trans_bin
inv7 T: all s1,s2:State, e1,e2:Event  | s1->e1->s2 in trans implies s2->e2->s1 in trans and s1 in s1.trans
inv7 T: all s1, s2 : State, e1, e2 : Event | (s1->e1->s2 in trans) implies ((s2->e2->s1 in trans) and (s1 in s1.trans))
inv7 O: let trans2 = {s1, s2 : State | some s1.trans.s2} | iden in ^trans2
inv7 S: let t = {x,y : State | some z : Event | x->z->y in trans} | all s : State | Init in s.~t}
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} | {all s : State | Init in s.~t}
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} | Init in ~(*trans_bin).State
inv7 O: all x : Event | (trans.x) in State one -> one State
inv7 B: all s1,s2:State | some e1,e2:Event  | s1->e1->s2 in trans implies s2->e2->s1 in trans
inv7 S: let trans2 = {s1, s2 : State | some s1.trans.s2} |\n    no State.trans2
inv7 O: let trans2 = {s1, s2 : State | some s1.trans.s2} | no State.trans2
inv7 B: some (Event.(State.trans))
inv7 O: all x : State, y : Init, z : Event | trans in y one -> one z one -> one x and z != y
inv1 C: all s : State | some (s.trans)
inv2 C: one Init
inv3 C: all s : State, e : Event | lone(e.(s.trans))
inv4 C: State = Init.(^onlyStates)	}		fun onlyStates : set (State -> State) {	  { s1, s2 : State | some e : Event | s1->e->s2 in trans }
inv5 C: all s1, s2 : State | State.(~(s1.trans)) = State.(~(s2.trans))
inv6 C: Event = (State.trans).State
inv7 E: 
inv7 S: all s1, s2 : State | (s1 in s2.(^onlyStates)) implies (s2 in s1.(^onlyStates))
inv7 S: all s1, s2 : State | (s1 in s2.(^onlyStates)) implies (s2 in s1.~(^onlyStates))
inv7 S: all s : State | (s in Init.(^onlyStates)) implies (Init in s.(^onlyStates))
inv7 S: all s : State, i : Init | (s in i.(^onlyStates)) implies (i in s.(^onlyStates))
inv7 S: all s : State | (one Init) and ((s in Init.(^onlyStates)) implies (Init in s.(^onlyStates)))

