NA H: THEME UPDATE
inv1 T: iden in trans.Event.State
inv1 T: iden in trans.State.Event
inv1 C: iden[State] in trans.State.Event
inv2 C: one Init
inv3 T: all s : State | (Event.s).(s.Event) in iden
inv3 B: let st = trans.State | ~st.st in iden
inv3 U: all s : State, e : Event | lone s.trans.e
inv3 U: all s : State, e : Event | lone (s->e).trans
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 S: let st = Node
inv5 E: 
inv5 E: 
inv6 O: some s : State | Event in s.trans.State
inv6 O: some s : State | Event in s.trans.State
inv6 C: Event in State.trans.State
inv4 T: ^Init
inv4 S: }		fun f[t : trans] : State->State {		{s1->s2 : State->State | s1 in trans.univ and s2 in univ.trans}
inv4 S: one Init	}		fun f[t : trans] : State->State {		{s1->s2 : State->State | s1 in trans.univ and s2 in univ.trans}
inv3 T: all s : State, e : Event | lone e.s.trans
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv5 C: all disj s, s1 : State | (s.trans).State = (s1.trans).State
inv1 C: iden[State] in trans.State.Event
inv1 C: iden[State] in trans.State.Event
NA M: MOD BASE MODEL
inv1 C: iden[State] in trans.State.Event
inv4 T: let x = Init <: trans | State in ~(Event.(State.trans))
inv7 S: all n : State-Init | Init in Node.^trans.n
inv7 T: all n : State-Init | Init in State.^trans.n
inv7 B: all n : State-Init | Init in ^(State.trans).n
inv7 B: all n : State-Init | Init in ^(State.trans).n

