NA H: THEME UPDATE
inv7 T: all s : State | Init in ^(~trans.s)
inv7 T: all s : State | Init in ^(~trans<:s)
inv7 T: all s : State | Init in ^(~trans)
inv7 T: all s : State | Init in ^(~s.trans)
inv7 T: all s : State | Init in ^(~s<:trans)
inv7 T: all s : State | Init in ~(^s<:trans)
inv7 S: all s : State | Init in ~(^strans)
inv7 T: all s : State | Init in ~(^s.trans)
inv7 T: all s : State | Init in ~(^s)
inv7 T: all s : State | Init in ~s
inv7 T: all s : State | some ~trans
inv7 T: all s : State | some ~s.trans
inv7 T: all s : State | some ~s<:trans
inv7 T: all s : State | some ~State
inv7 T: let t = {x,y : State | some z : Event | x->z->y in trans} |		all s : State | Init in ~t
inv7 T: let t = {x,y : State | some z : Event | x->z->y in trans} |		all s : State | Init in ~s.t
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		all s : State | Init in s.~t
inv5 T: let t = {x,y : State | some z : Event | x->z->y in trans} |	  	trans in State.t
inv5 T: let t = {x,y : State | some z : Event | x->z->y in trans} |	  	trans in t
inv5 T: let t = {x,y : State | some z : Event | x->z->y in trans} |	  	State in t
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		State in Init.(^t)
inv7 O: let t = {x,y : State | some z : Event | x->z->y in trans} |		State in Init.~(^t)
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		State in ~(^t).Init
inv7 O: let t = {x,y : State | some z : Event | x->z->y in trans} |		State in (^t).Init
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		some ^t implies some Init.(^t)
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		some ^t implies some (^t).Init
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		some ^t implies some Init.~(^t)
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		some ^t implies some Init.^(~t)
inv7 B: let t = {x,y : State | some z : Event | x->z->y in trans} |		some ^t implies some ^(~t).Init

