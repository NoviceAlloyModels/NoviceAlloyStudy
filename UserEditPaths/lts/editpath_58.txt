NA H: THEME UPDATE
inv1 T: trans.State = State
inv1 T: trans.State = State
inv1 C: (trans.State).Event = State
inv1 C: trans.State.Event = State
inv2 C: one Init
inv3 B: lone State.trans.State
inv3 B: all s : State | lone s.trans.State
inv3 O: all s : State | lone s.trans
inv3 O: all e : Event | lone e<:State.trans
inv3 O: all e : Event | lone e<:(State.trans)
inv3 U: all e : Event | lone e<:(State.trans.State)
inv3 C: all e : Event, s : State | lone e<:s.trans
inv4 T: Init.(*trans) = State
inv4 T: Init.(*trans) = State
inv4 T: Init.(*trans.(State.Event)) = State
inv5 C: all s : State | s.trans.State = State.trans.State
inv6 C: State.trans.State = Event
inv4 S: Init.*trans_bin = State	}		fun trans_bin : State -> State {	    {s1:Book, s2:Addr | s1->Event->s2 in trans }
inv4 B: Init.*trans_bin = State	}		fun trans_bin : State -> State {	    {s1, s2 : State | s1->Event->s2 in trans }
inv4 B: Init.^trans_bin = State	}		fun trans_bin : State -> State {	    {s1, s2 : State | s1->Event->s2 in trans }
inv4 B: Init.*trans_bin = State	}		fun trans_bin : State -> State {	    {s1, s2 : State | s1->Event->s2 in trans }
inv4 T: Init.*{s1, s2 : State | s1->Event->s2 in trans} = State	}		fun trans_bin : State -> State {
inv4 B: Init.*{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: Init.*{s1 : State, s2 : State | s1->Event->s2 in trans} = State
inv4 B: Init.^{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: Init.*{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: (Init.*{s1, s2 : State | s1->Event->s2 in trans}) = State
inv4 B: all i : Init | i.*{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: all i : Init | i.^{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: all i : Init | i.^{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 B: all i : Init | i.*{s1, s2 : State | s1->Event->s2 in trans} = State
inv4 T: all i : Init, s : State | some i.*{s1, s2 : State | s1->Event->s2 in trans}.s
inv4 T: all i : Init, s : State | some i.(*{s1, s2 : State | s1->Event->s2 in trans}).s
inv4 B: all i : Init, s : State | s in i.(*{s1, s2 : State | s1->Event->s2 in trans})
inv4 B: all i : Init, s : State | s in i.(^{s1, s2 : State | s1->Event->s2 in trans})
inv4 B: all i : Init, s : State | s in i.(^{s1, s2 : State | some e : Event | s1->e->s2 in trans})
inv4 B: all i : Init | i.(^{s1, s2 : State | some e : Event | s1->e->s2 in trans}) = State
inv4 B: all i : Init | i.(^{s1, s2 : State |s1->Event->s2 in trans}) = State
inv4 B: all i : Init | i.(^{s1, s2 : State | s1->Event->s2 in trans}) = State
inv4 U: all i : Init | i.(^{s1, s2 : State | s1->Event->s2 in trans}) in State
inv4 T: {s1 : State, s2 : State | s1->Event->s2 in trans}
inv4 S: Initial.{s1 : State, s2 : State | s1->Event->s2 in trans} = State
inv4 B: Init.{s1 : State, s2 : State | s1->Event->s2 in trans} = State
inv4 O: Init.{s1 : State, s2 : State | some e : Event | s1->e->s2 in trans} = State
inv4 S: let trans_bin = {s1 : State, s2 : State | some s1.trans.s2}	    Init.*trans_bin = State
inv4 U: let trans_bin = {s1 : State, s2 : State | some s1.trans.s2} |	    Init.*trans_bin = State
inv4 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init.*trans_bin = State
inv4 C: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init.^trans_bin = State
inv7 B: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans_bin.^trans_bin
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.*trans_bin.*trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    all s : State | s in (Init.^trans_bin) implies Init in s.^trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in ^trans_bin . ^trans_bin
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in *trans_bin . *trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in ^trans_bin . *trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in *trans_bin . ^trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in ^trans_bin . ^trans_bin
inv7 O: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in ^trans_bin
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    iden in *trans_bin
inv7 B: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    some iden & trans_bin
inv7 T: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    State.^trans_bin.Init = State
inv7 B: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    State.^trans_bin = State
inv7 B: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init in State.^trans_bin
inv7 U: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init in State.*trans_bin
inv7 B: let trans_bin = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans_bin
inv7 T: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    State.trans2
inv4 C: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init.^trans2 = State
inv7 T: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    iden in Init.^trans2
inv7 O: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    iden in ^trans2
inv7 B: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans2
inv7 U: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.*trans2
inv7 B: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.(^trans2 + trans2)
inv7 B: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans2
inv7 U: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans2 + Init
inv7 B: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init = Init.^trans2
inv7 B: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in Init.^trans2
inv7 T: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in (Init.^trans2 + Init->Init)
inv7 T: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in (Init.^trans2 + Init->Init)
inv7 T: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in (Init.^trans2 + (Init->Init))
inv7 U: let trans2 = {s1, s2 : State | some s1.trans.s2} |	    Init in (Init.^trans2 + Init)

