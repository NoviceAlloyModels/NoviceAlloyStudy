NA H: THEME UPDATE
inv1 B: some State.trans
inv1 C: all s : State | some s.trans
inv2 S: all i1,i2 : Initial | i1 = i2
inv2 U: all i1,i2 : Init | i1 = i2
inv2 S: no disj i1,i2 : Init
inv2 S: no disj i1, i2 : Init
inv2 B: all i : Init | State - Init = i
inv4 B: all s : State | s in Init.*(trans.Event)
inv4 B: all s : State | s in Init.*(trans[Event])
inv4 T: all s : State | s in Init.*(trans)
inv4 T: all s : State | s in Init.*(trans)
inv4 T: all s : State | s in Init.*(trans)
inv1 C: all s : State | some s.trans
inv2 S: no disj i,j : Init
inv2 U: no disj i,j : Init { }
inv2 U: all i,j : Init | i = j
inv2 S: one i : Init
inv2 C: one i : Init { }
inv2 C: one Init { }
inv2 C: one Init
inv3 O: all s : State, e : Event | one s.trans.e
inv3 O: all s : State, e : Event | one s.trans[e]
inv3 B: all s : State {	    	all disj e1,e2 : Event | some s.trans[e1] implies no s.trans[e2]	    }
inv3 U: all s : State, e : Event | lone s1 : State | s.trans[e] = s1
inv3 O: all s : State, e : Event | no s.trans[e]
inv3 O: all s : State, e : Event | one s.trans[e]
inv3 C: all s : State, e : Event | lone s.trans[e]
inv4 T: all s : State | s in Init.*trans
inv4 O: all s : State | s in Init.trans[Event]
inv4 O: all s : State | s in Init.(trans[Event])
inv4 O: all s : State | s in Init.(Event.trans)
inv4 B: all s : State | s in Init.*(Event.trans)
inv4 O: all s : State | s in Init.trans[Event]
inv4 O: all s : State | s in Init.trans[Event] + Init.trans[Event].trans[Event]
inv4 C: all s : State | s in Init.trans[Event] + Init.trans[Event].trans[Event] + Init.trans[Event].trans[Event].trans[Event]
inv4 O: all s : State | s in Init.trans[Event] + Init.trans[Event].trans[Event]
inv4 O: all s : State | s in Init.(trans[Event]) + Init.trans[Event].trans[Event]
inv4 T: all s : State | s in Init.*(trans)
inv4 T: all s : State | s in Init.*(~trans)
inv4 B: all s : State | s in Init.*(trans.State)
inv4 T: all s : State | s in Init.*(trans.Event.State)
inv4 B: all s : State | s in Init.*(trans.State)
inv4 B: all s : State | s in Init.*(trans[State])
inv4 O: all s : State | s in Init.(trans[State])
inv4 T: all s : State | s in Init.(trans[Event][State])
inv4 T: all s : State | s in Init.trans
inv4 O: all s : State | s in Init.trans.Event
inv4 O: all s : State | s in Init.trans[Event]
inv4 T: all s : State | s in Init . *trans[Event]
inv4 T: all s : State | s in Init . *(trans.State.Event)
inv4 T: all s : State | s in Init.*(trans.State.Event)
inv4 B: all s : State | s in Init.*(trans [Event])
inv4 B: all s : State | some s.trans[Event]
inv4 B: all s : State | some s.trans.State
inv4 B: all s : State | s in s.trans[Event]
inv4 O: all s : State | s in Init.trans[Event].trans[Event]
inv4 T: all s : State | s in Init.*trans[Event]
inv4 U: all s : State | { }
inv4 S: all s : State | s in Init.*tran	}		/*	All the states have the same events available.	*/	fun tran[s : State] : set State {	  s.trans[Event]
inv4 S: all s : State | s in Init.*tran1	}		/*	All the states have the same events available.	*/	fun tran1[s : State] : set State {	  s.trans[Event]
inv4 S: all s : State | s in Init.*tran1	}		/*	All the states have the same events available.	*/	fun tran1 (s : State) : set State {	  s.trans[Event]
inv4 T: all s : State | s in Init.*trans
inv4 S: all s : State | let r[x] = x.tran[Event] | s in Init.*r
inv4 U: all s : State | { }
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
inv6 C: all e : Event | some State.trans[e]
inv4 O: all s : State | s in Init.trans[Event]
inv4 O: all s : State | s in Init.trans[Event] + Init.trans[Event].trans[Event]
inv4 C: all s : State | s in Init.trans[Event] + Init.trans[Event].trans[Event] + Init.trans[Event].trans[Event].trans[Event]
inv7 O: all s : State | Init in s.trans[Event] + s.trans[Event].trans[Event] + s.trans[Event].trans[Event].trans[Event]
inv7 O: all s : State | Init in s + s.trans[Event] + s.trans[Event].trans[Event] + s.trans[Event].trans[Event].trans[Event]
inv4 S: all s : State | s in reachable[Init]
inv4 S: all s : State | s in Init.reachable
inv4 S: all s : State | s in Init.reachable.reachable
inv4 S: all s : State | s in Init.reachable.reachable.reachable
inv4 S: all s : State | s in Init.reachable
inv4 S: all s : State | s in Init.reachable
inv4 S: all s : State | s in Init.reachable.reachable
inv4 S: all s : State | s in Init.reachable.reachable.reachable
inv4 S: all s : State | s in Init.reachable.reachable.reachable.reachable
inv4 S: all s : State | s in Init.*reachable	}		/*	All the states have the same events available.	*/	fun reachable[s : State] : set State {	  s.trans[Event]
inv4 S: all s : State | s in Init .* reachable	}		/*	All the states have the same events available.	*/	fun reachable[s : State] : set State {	  s.trans[Event]
inv4 S: all s : State | s in Init. (reachable)
inv4 S: all s : State | s in Init. *(reachable)	}		/*	All the states have the same events available.	*/	fun reachable[s : State] : set State {	  s.trans[Event]
NA M: MOD BASE MODEL
inv4 S: all s : State | s in Init. *(reachable)
inv4 S: all s : State | s in Init.*reachable
inv3 S: all s : State, e : Event | lone s.trans[e]	}		/*	All states are reachable from an initial state.	*/	fun reachable : State -> set State {	  let s : State | s->s.trans[Event]
inv4 S: all s : State | s in Init.*reachable
inv4 S: all s : State | s in Init.^reachable
inv7 S: all s : State | s in Init.^reachable => Init in s.^reachable
inv7 S: all i, s : State | s in i.^reachable => i in s.^reachable
inv7 S: all i, s : State | s in i.^reachable <=> i in s.^reachable
inv7 S: all i, s : State | s in i.^reachable => i in s.^reachable
inv7 S: all i : Init, s : State | s in i.^reachable => i in s.^reachable
inv7 S: all i : Init, s : State | s in i.*reachable => i in s.*reachable
inv7 S: all s : State {	      some i : Init | s in i.*reachable => i in s.*reachable	    }
inv7 S: all s : State {	      some i : Init | s in i.^reachable => i in s.^reachable	    }
inv7 S: all s : State | s in Init.^reachable {	      some i : Init | i in s.^reachable	    }	}		fun reachable : State -> set State {		{ s0 : State, s1 : State | s1 in s0.trans[Event] }
inv7 S: all s : State | s in Init.^reachable => some i : Init | i in s.^reachable

