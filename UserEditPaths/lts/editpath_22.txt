NA H: THEME UPDATE
inv1 T: no s : State | s.trans = none
inv1 T: no s : State | s.trans = none
inv1 O: no s : State | s.trans.Event = none
inv2 S: one s : Init
inv2 C: one s : Init | s in State
inv3 U: all s : State, e : Event | lone s.trans.e
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 T: all i : Init | State = i.^trans
inv4 T: all i : Init | State = i.^trans
inv4 T: all i : Init | State = ^(i.trans)
inv4 B: all i : Init, e : Event | State = e.^(i.trans)
inv4 B: all i : Init, e : Event | State = e.(i.trans)
inv4 T: all i : Init, e : Event | State = ^e.(i.trans)
inv4 B: all i : Init, e : Event | State = e.^(i.trans)
inv4 T: State = Init.^trans
inv4 T: State = ^Init.trans
inv4 T: all e : Event | State = ^Init.trans
inv4 S: all e : Event | State = r.^(Init.trans)
inv4 B: all e : Event | State = e.^(Init.trans)
inv4 T: State = ^(Init.trans)
inv4 T: all e : Event | State = e.^trans
inv4 B: all e : Event | State = e.^(Init.trans)
inv4 T: all e : Event | State = ^(e.(Init.trans))
inv4 B: all e : Event | State = (e.^(Init.trans))
inv4 B: all e : Event | State = (e.^(Init.trans)) + Init
inv4 S: all e : Event | State = Init + (e.^(Init.trans))		/*	All the states have the same events available.	*/
inv4 S: all e : Event | State = Init + (e.^(Init.^trans))		/*	All the states have the same events available.	*/
inv4 S: all e : Event | State = (e.^(Init.^trans))		/*	All the states have the same events available.	*/
inv4 S: all e : Event | State = (e.(Init.^trans))		/*	All the states have the same events available.	*/
inv4 B: all e : Event | State = Init + (e.^(Init.trans))
inv4 T: all e : Event | State = Init + (e.(^Init.trans))
inv4 S: all e : Event | State = Init + ((e.Init).^trans))
inv4 T: all e : Event | State = Init + ((e.Init).^trans)
inv4 T: all e : Event | State = Init.^trans
inv4 E: 
inv5 B: all disj s1, s2 : State | some e : Event | one e.(s1.trans) implies one e.(s2.trans)
inv5 B: all disj s1, s2 : State | some e : Event | one e.(s1.trans) implies one e.(s2.trans) else no e.(s1.trans)
inv5 B: all disj s1, s2 : State | some e : Event | one e.(s1.trans) implies one e.(s2.trans)
inv5 B: all disj s1, s2 : State | some e : Event | one e.(s1.trans) iff one e.(s2.trans)
inv5 B: all disj s1, s2 : State | some e : Event | some e.(s1.trans) iff some e.(s2.trans)
inv5 B: all disj s1, s2 : State | #(s1.trans) = #(s2.trans)

