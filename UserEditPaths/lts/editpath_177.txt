NA H: THEME UPDATE
inv1 C: all  s : State | some s.trans
inv1 C: all  s : State | some s.trans
inv2 B: no Init
inv2 C: one Init
inv2 C: one Init
inv3 O: all s : State | lone s.trans
inv3 B: all s : State | some s.trans
inv3 U: all s : State, e : Event | lone s.(e.trans)
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 T: all s : State | s.trans in State
inv4 T: all s : State | Init.trans in State
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 T: all s : State | some e : Event | s.(e.(Init.trans)) in State
inv4 U: all s : State | some e : Event | e.(Init.trans) in State
inv4 U: all s : State | some e : Event | e.(s.trans) in State
inv4 B: all s : State | some e : Event | e.(s.trans) in Init
inv4 U: all s : State | some e : Event | e.(s.trans) in State
inv5 S: all s : State |
inv5 T: all s : State | s.trans in Event
NA H: THEME UPDATE
inv5 T: all s : State | s.trans in Event
inv1 C: all  s : State | some s.trans
inv2 C: one Init
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 U: all s : State | some e : Event | e.(s.trans) in State
inv1 C: all  s : State | some s.trans
inv2 C: one Init
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 U: all s : State | some e : Event | e.(s.trans) in State
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
inv6 C: all e : Event | some (trans.State).e
inv6 C: all e : Event | some (trans.State).e
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
inv4 C: let adj = { s1, s2 : State | some e : Event | s1->e->s2 in trans} | State in Init.^adj
inv1 C: all  s : State | some s.trans
inv2 C: one Init
inv3 C: all s : State, e : Event | lone e.(s.trans)
inv4 C: let adj = { s1, s2 : State | some e : Event | s1->e->s2 in trans} | State in Init.^adj
inv6 C: all e : Event | some (trans.State).e
inv5 C: all s1,s2 : State | s1.trans.State = s2.trans.State
NA H: THEME UPDATE

