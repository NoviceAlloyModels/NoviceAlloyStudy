NA H: THEME UPDATE
inv1 S: all w | w in (Human + Robot)
inv1 C: all w:Worker | w in (Human + Robot)
inv1 S: all w | w in (Human + Robot)
inv1 O: all w : univ | w in (Human + Robot)
inv1 C: all w:Worker | w in (Human + Robot)
inv2 S: all s:Workstation | some s.workers	all w:Worker | one Workstation.s
inv2 T: all s:Workstation | some s.workers	all w:Worker | one Workstation.w
inv2 T: all s:Workstation | some s.workers	all w:Worker | one w.Workstation
inv2 T: all s:Workstation | some s.workers and (s.workers in iden)
inv2 U: all s:Workstation | some s.workers
inv2 T: all s:Workstation | some s.workers and s.workers in iden
inv2 T: all s:Workstation, w:Worker | some s.workers and s.w in iden
inv2 B: workers in Workstation some -> one Worker
inv2 C: workers in Workstation one -> some Worker
inv3 O: workstation in Component some -> one Workstation
inv3 B: workstation in Component some -> some Workstation
inv3 U: workstation in Component -> some Workstation
inv3 C: workstation in Component -> one Workstation
inv3 C: workstation in Component -> one Workstation
inv2 U: all w:Worker | one workers.w
inv2 C: all w:Worker | one workers.w	all w:Workstation | some w.workers
inv3 S: all c.Component | one c.workstation
inv3 C: all c:Component | one c.workstation
inv2 C: all w:Worker | one workers.w					Workstation = workers.Worker
inv4 S: all c:Components | some c.parts
inv4 U: all c:Component | some c.parts
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv5 S: all w:Workstation | w.workers &
inv5 S: all w:Workstation | w.workers &
inv6 B: some c:Component | no (c.parts & Component)
inv6 B: some c:Component | no (c.parts & c)
inv6 B: some c:Component | c not in c.parts
inv5 S: all s:Workstation, h:Human, r:Robot |hnot in s.workers or r not in s.workers
inv5 C: all s:Workstation, h:Human, r:Robot |h not in s.workers or r not in s.workers
inv5 S: all s:Workstation | w.workers in Human or w.workers in Robot
inv5 O: all s:Workstation | s.workers in Human or s.workers in Robot
inv5 C: no workers.Human & workers.Robot
inv5 C: no (workers.Human & workers.Robot)
inv6 B: some c:Component | c not in c.parts
inv6 T: some c:Component | c not in *(c.parts)
inv6 T: some c:Component | c not in ^(c.parts)
inv6 O: some c:Component | c not in c.*parts
inv6 B: some c:Component | c not in c.parts
inv6 B: some c:Component | c not in c.parts
inv6 B: some c:Component | c not in c.^parts
inv6 C: all c:Component | c not in c.^parts
inv7 T: all c:Component | c.^parts & Dangerous implies c in Dangerous
inv7 T: all c:Component | c.^parts.Dangerous implies c in Dangerous
inv7 B: all c:Component | c.^parts in Dangerous implies c in Dangerous
inv7 T: all c:Component | c.^parts in Dangerous != none implies c in Dangerous
inv7 B: all c:Component | c.^parts in Dangerous implies c in Dangerous
inv7 T: all c:Component | some c.^parts in Dangerous
inv7 T: all c:Component | some c.parts in Dangerous
inv7 C: all c:Component | some c.parts & Dangerous implies c in Dangerous
inv7 C: all c:Component | some (c.parts & Dangerous) implies c in Dangerous
inv8 T: all c:Component, ws:Workstation | c in Dangerous implies no ws.workers in Human
inv8 O: all c:Component, ws:Workstation | c in Dangerous implies no w: ws.workers | w in Human
inv8 O: all c:Component, ws:Workstation | c in Dangerous implies no w:ws.workers | w in Human
inv8 C: all c:Dangerous, ws:c.workstation | all w:ws.workers | w not in Human
inv8 C: all c:Dangerous, ws:c.workstation | no ws.workers & Human
inv8 S: al c:Dangerous, ws:c.workstations.workers | no ws & Human
inv8 S: all c:Dangerous, ws:c.workstations.workers | no ws & Human
inv8 C: all c:Dangerous, ws:c.workstation.workers | no ws & Human
inv8 C: all c:Dangerous | no c.workstation.workers & Human
inv8 C: no Dangerous.workstation.workers & Human
inv8 T: no Dangerous.workstation.workers in Human
inv8 T: no (Dangerous.workstation.workers in Human)
inv8 C: no Dangerous.workstation.workers & Human
inv9 T: all b:begin | one end in b.^succ
inv9 S: all b:begin  e:end | end in b.^succ
inv9 B: all b:begin, e:end | end in b.^succ
inv9 B: all b:begin, e:end | end in b.^succ and b != e
inv9 B: all w:Workstation - end | one w.succ	no end.succ	some begin.^succ
inv9 U: all w:Workstation - end | one w.succ	no end.succ	some begin.*succ
inv9 C: all w:Workstation - end | one w.succ	no end.succ	Workstation in begin.*succ

