NA H: THEME UPDATE
inv1 C: all w : Worker | w in Human or w in Robot
inv2 S: (all ws : Workstation | ws.workers != None) and (all w : Worker | one ws : Workstation | w in ws.workers)
inv2 C: (all ws : Workstation | ws.workers != none) and (all w : Worker | one ws : Workstation | w in ws.workers)
inv3 S: all c : Component | one ws : WorkStation | ws in c.workstation
inv3 C: all c : Component | one ws : Workstation | ws in c.workstation
inv4 C: all c : Component | some p : Product | p in c.parts	all m : Material | no p : Product | p in m.parts
inv5 B: all ws : Workstation | all w1, w2 : Worker | (w1 in ws.workers and w2 in ws.workers and w1 = Human) implies w2 = Human
inv6 C: all c : Component | c not in c.^(parts)
inv7 B: all c : Component | all p : Product | p = Dangerous and p in c.^(parts) implies c = Dangerous
inv7 B: all c : Component | all p : Product | (p = Dangerous and p in c.^(parts)) implies c = Dangerous
inv7 O: all c : Component | all p : Product | (p in Dangerous and p in c.^(parts)) implies c in Dangerous
inv8 S: all c : Component | all ws : Workstation | c in Dangerous and ws in c.workstation implies	(Human not in w.workers)
inv8 B: all c : Component | all ws : Workstation | c in Dangerous and ws in c.workstation implies	(Human not in ws.workers)
inv8 C: all c : Component | all ws : Workstation | c in Dangerous and ws in c.workstation implies	(all h : Human | h not in ws.workers)
inv9 S: all ws, wsb : Workstation | (wsb in begin and ws = != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstaion | ws not in end implies w.succ
inv9 S: all ws, wsb : Workstation | (wsb in begin and ws = != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstaion | ws not in end implies w.succ
inv9 S: all ws, wsb : Workstation | (wsb in begin and ws = != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstaion | ws not in end implies w.succ
inv9 S: all ws, wsb : Workstation | (wsb in begin and ws != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstaion | ws not in end implies w.succ
inv9 S: all ws, wsb : Workstation | (wsb in begin and ws != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstation | ws not in end implies w.succ
inv9 T: all ws, wsb : Workstation | (wsb in begin and ws != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstation | ws not in end implies ws.succ
inv9 T: all ws, wsb : Workstation | (wsb in begin and ws != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstation | (ws not in end) implies ws.succ
inv9 C: all ws, wsb : Workstation | (wsb in begin and ws != wsb) implies ws in wsb.^(succ)	all ws : Workstation | ws not in ws.^(succ)	all ws : Workstation | (ws not in end) implies one ws.succ
inv10 B: all c1,c2 : Component | all w1,w2 : Workstation | w1 in c1.workstation and w2 in c2.workstation and c2 in c1.^(parts) implies w1 in w2.^(succ)

