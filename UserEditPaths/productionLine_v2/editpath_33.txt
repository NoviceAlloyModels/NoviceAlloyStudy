NA H: THEME UPDATE
inv1 C: all w: Worker | w in Human || w in Robot
inv1 C: all w: Worker | w in Human+Robot
inv2 S: all w : Worker | all ws: Workstation |
inv2 S: all w : Worker | all ws: Workstation |
inv2 T: all w : Worker | all ws: Workstation | one w in ws
inv2 T: all w : Worker | all ws: Workstation | one w in ws
inv2 T: one Worker in Workstation
inv1 C: Worker = Human + Robot
inv2 T: one Worker in Workstation
inv2 T: one Worker in Workstation
inv2 T: all w : Worker | all ws: Workstation | one w in ws
inv2 T: one Worker in Workstation
inv2 T: all w : Worker, ws : Workstation | lone w in ws.workers
inv2 C: all w:Workstation | some w.workers	all w:Worker | one workers.w
inv3 C: all c:Component | one c.workstation
inv2 U: all w:Worker | one workers.w
inv2 C: all w:Workstation | some w.workers	all w:Worker | one workers.w
inv3 S: workstation in Component all -> one Workstation
inv3 S: workstation in Workstation one -> all Component
inv3 O: workstation in Component some -> one Workstation
inv3 C: workstation in Component -> one Workstation
inv4 S: all c:Components| some c.parts	all m:Material| none m.parts
inv4 T: all c:Component | some c.parts	all m:Material | none m.parts
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv4 C: not some c:Component | no c.parts	not some m:Material | some m.parts
inv4 S: all p:Product | p in c.parts
inv4 B: all p:Product | p in Component.parts
inv4 T: all p:Product | p in Product.parts -> p in Component.parts
inv4 B: Component in Product.parts and Material.parts = none
inv4 C: Component in parts.Product and Material.parts = none
inv4 C: Component = parts.Product
inv5 S: Robot in Workstation <-> no Human in Workstation
inv5 T: Robot in Workstation <=> no Human in Workstation
inv5 T: Robot.Workstation <=> no Human.Workstation
inv5 T: Robot.Workstation <=> Human.Workstation
inv5 T: Robot in Workstation.workers <=> no Human in Workstation.workers
inv5 B: Robot in Workstation.workers <=> Human in Workstation.workers
inv5 T: Robot in Workstation.workers <=> no Human in Workstation.workers
inv5 T: Robot in Workstation.workers <=> no (Human in Workstation.workers)
inv5 B: Robot in Workstation.workers <=> not Human in Workstation.workers
inv5 B: Robot in Workstation.workers <=> not Human in Workstation.workers	not Robot in Workstation.workers <=>  Human in Workstation.workers
inv5 T: some Robot in Workstation.workers <=> not some Human in Workstation.workers
inv5 C: all w:Workstation | some w.workers & Robot implies no w.workers & Human
inv5 S: Robot in Workstation.workers -> no Human in Workstation.workers
inv5 T: Robot in Workstation.workers -> none Human in Workstation.workers
inv5 S: some Robot in Workstation.workers -> no Human in Workstation.workers
inv5 S: some Robot in Workstation.workers -> no Human in Workstation.workers
inv6 T: Component not in ^(Component.parts)
inv6 S: all c: Components | c not in c.parts.^(Component.parts)
inv6 S: all c: Components | c not in c^(Component.parts)
inv6 S: all c: Components | c not in c.^(Component.parts)
inv6 S: all c: Components | c not in c.parts.^(Component.parts)
inv6 T: all c: Component | c not in c.parts.^(Component.parts)
inv6 C: all c: Component | c not in c.^(parts)
inv7 T: all c: Component | some c.^(parts) in Dangerous -> c in Dangerous
inv7 T: all c: Component | c.^(parts) in Dangerous -> c in Dangerous
inv7 T: all c: Component | c not in Dangerous -> c.^(parts) not in Dangerous
inv7 T: all c: Component | c not in Dangerous -> Dangerous not in c.^(parts)
inv7 B: all c: Component | c not in Dangerous
inv7 T: all c: Component | some c2: Component | c2 in c^parts && c2 in Dangerous -> c in Dangerous
inv7 T: all c: Component | some c2: Component | c2 in c.^(parts) && c2 in Dangerous -> c in Dangerous
inv7 O: ^parts.Dangerous in Dangerous
inv9 B: no end.succ	all w:Workstation-end | one succ.w	Workstation in begin.*succ
inv9 C: no end.succ	all w:Workstation-end | one w.succ	Workstation in begin.*succ

