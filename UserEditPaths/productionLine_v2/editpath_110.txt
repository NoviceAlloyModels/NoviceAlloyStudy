NA H: THEME UPDATE
inv1 C: all w: Worker | w in Human + Robot
inv2 B: all w: Worker | one w.workers	all ws: Workstation | all w1, w2: ws.workers | w1 = w2
inv2 B: all w: Worker | one w.succ	all ws: Workstation | all w1, w2: ws.workers | w1 = w2
inv2 B: all w: Worker | one w.succ
inv3 C: all c: Component | one c.workstation
inv2 S: all ws: Workstation | some w: ws.workers	all w: Worker | one w.workstation	all w: Worker, ws1, ws2: w.workstation | ws1 != ws2 => ws1 not in ws2.^succ and ws2 not in ws1.^succ
inv2 S: all ws,w | w in worstation.w
inv2 S: all w | w in worstation.w
inv2 T: Worker & Workstation
inv2 T: all w: Worker | w & Workstation
inv2 T: all w: Worker | w & workstation
inv2 S: all w: Worker | not in w - workstation
inv2 T: all w: Worker | ~(w not in workstation)
inv2 T: all w: Worker | ~(w in workstation)
inv2 T: all w: Worker | (w in workstation)
inv2 C: workers in Workstation one -> some Worker
inv3 C: all c: Component | one c.workstation
inv4 C: all c: Component | c.parts != none	all m: Material | m.parts = none
inv5 E: 
inv4 C: all c: Component | c.parts != none	all m: Material | m.parts = none
inv4 U: all c: Component, m: Material | c.parts != none and m.parts = none
inv4 C: all c: Component | c.parts != none	all m: Material | m.parts = none
inv5 U: no disj w1, w2: Human + Robot | w1.workers & w2.workers != none
inv4 C: all c: Component | c.parts != none	all m: Material | m.parts = none
inv4 C: all c: Component | c.parts != none	all m: Material | m.parts = none
inv5 U: all h: Human, r: Robot | no h.workers & r.workers
inv5 T: all w: Workstation | no w.workers.Human & w.workers.Robot
inv5 T: all h: Human, r: Robot | no h.workers = r.workers
inv4 C: all c: Component | some c.parts	all m: Material | m.parts = none
inv4 C: all c: Component | some c.parts	all m: Material | m.parts = none
inv6 U: no c: Component | c in c.parts
inv6 U: all c: Component | c not in c.parts
inv5 T: Human & Robot
inv5 S: all h: Human, r: Robot: h in w.workers & r in w.workers
inv5 S: all h: Human, r: Robot | h in w.workers & r in w.workers
inv5 T: all h: Human, r: Robot, w: Worker | h in w.workers & r in w.workers
inv5 O: all disj h, r: Worker | no w: Workstation | h in w.workers and r in w.workers
inv5 C: all h: Human, r: Robot, ws: Workstation | h not in ws.workers or r not in ws.workers
inv5 T: all h: Human, r: Robot, ws: Workstation | h not in ws.workers & r not in ws.workers
inv5 C: all h: Human, r: Robot, ws: Workstation | h not in ws.workers or r not in ws.workers
inv6 U: all c: Component | c not in c.parts
inv7 O: all c: Component | c in Dangerous <=> some p: c.parts | p in Dangerous
inv5 C: all h: Human, r: Robot, ws: Workstation | h not in ws.workers or r not in ws.workers
inv5 B: Workstation = workers.Human + workers.Robot
inv5 S: all workers.Human + workers.Robot
inv5 T: univ workers.Human + workers.Robot
inv5 T: univ workers.Human - workers.Robot
inv5 B: no workers.Human - workers.Robot
inv5 S: all workers.Human - workers.Robot
inv5 C: no workers.Human & workers.Robot
inv6 T: Component.~Component
inv6 T: Component.~Component
inv6 S: all c: Component: c not in c.^(c.parts)
inv6 T: all c: Component | c not in c.^(c.parts)
inv6 C: all c: Component | c not in c.^(parts)
inv7 O: all c: Component | c in Dangerous <=> some p: c.parts | p in Dangerous
inv8 C: all c: Component, ws: c.workstation | c in Dangerous implies no w: ws.workers | w in Human
inv10 U: all c: Component | all p: c.parts | p in c.*(parts-prev)
inv10 U: all c: Component | all p: c.parts | p in c.*(parts - prev)
inv7 O: all c: Component | c in Dangerous <=> some p: c.parts | p in Dangerous
inv8 C: all c: Component, ws: c.workstation | c in Dangerous implies no w: ws.workers | w in Human
inv8 S: all c: Component, ws: c.workstation | c in Dangerous implies no w: workers.Human
inv8 C: all c: Component, ws: c.workstation | c in Dangerous implies no w: ws.workers | w in Human
inv7 O: all c: Component | c in Dangerous <=> some p: c.parts | p in Dangerous
inv7 O: all c: Component | c in Dangerous iff some p: c.parts | p in Dangerous
inv7 O: all c: Component | c in Dangerous iff some p: c.parts | p in Dangerous
inv7 S: parts.dangerous in Dangerous
inv7 O: parts.Dangerous in Dangerous
inv8 O: all c: Component | c in Dangerous implies no workers.Human
inv8 T: all c: Component, ws: Workstation | c in Dangerous implies no ws.workers.Human
inv8 T: all c: Component, ws: Workstation | c in Dangerous implies no ws.Human
inv8 T: all c: Component, ws: Workstation | c in Dangerous implies no c.workstation.Human
inv8 U: all c: Dangerous | no w: Human | w.workers & c.workstation != none
inv8 C: all c: Component, ws: c.workstation | c in Dangerous implies no w: ws.workers | w in Human
inv8 S: all c:Dangerous, w:c.worstation.workrs | w not in Human
inv8 C: all c:Dangerous, w:c.workstation.workers | w not in Human
inv8 C: all c:Dangerous | no c.workstation.workers & Human
inv8 C: no Dangerous.workstation.workers & Human
inv9 S: all w:Workstation - end | one w.succ	no end : succ	Workstation in begin.*succ
inv9 S: all w:Workstation - end | one w.succ	no end : succ	Workstation in begin.*succ
inv9 C: all w:Workstation - end | one w.succ	no end.succ	Workstation in begin.*succ

