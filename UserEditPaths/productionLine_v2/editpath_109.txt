NA H: THEME UPDATE
inv1 C: all w:Worker | w in Human or w in Robot
inv2 C: all wk:Workstation | some w:Worker | w in wk.workers	all w:Worker | one wk:Workstation | w in wk.workers
inv2 C: all wk:Workstation  | some wk.workers	all w:Worker | one wk:Workstation | w in wk.workers
inv2 C: all wk:Workstation | some wk.workers	all w:Worker | one wk:Workstation | w in wk.workers
inv2 C: all wk:Workstation | some wk.workers	all w:Worker | one wk:Workstation | w in wk.workers
inv2 O: all wk:Workstation | some wk.workers	all w:Worker | one wk:Workstation | w in wk
inv2 C: all wk:Workstation | some wk.workers	all w:Worker | one wk:Workstation | w in wk.workers
inv3 C: all c:Component | one c.workstation
inv4 U: all c:Component, m:Material | some c.parts and no m.parts
inv4 U: all c:Component, m:Material | some c.parts and #m.parts=0
inv4 B: all c:Component, m:Material | some c.parts and one m.parts
inv4 U: all c:Component, m:Material | some c.parts
inv4 U: all p:Product | some p.parts => p in Component
inv4 B: all p:Product | no p.parts => p not in Material
inv4 U: all p:Product | no p.parts => p in Material
inv4 C: all p:Product | (no p.parts => p in Material) and (some p.parts => p in Component)
inv4 S: all c:Component | some c.parts	all m:Materia | no m.parts
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv4 U: all c:Component, m:Material | some c.parts and no m.parts
inv4 U: all c:Component, m:Material | (some c.parts) and no m.parts
inv4 U: all c:Component, m:Material | (some c.parts) and (no m.parts)
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv5 B: one wk:Workstation | Human in wk.workers <=> Robot not in wk.workers
inv5 B: all wk:Workstation | Human in wk.workers <=> Robot not in wk.workers
inv5 O: all wk:Workstation, h:Human, r:Robot | h in wk.workers <=> r not in wk.workers
inv6 U: all c:Component | c not in c.parts
inv6 B: one c:Component | c not in c.parts
inv6 U: all c:Component | c not in c.parts
inv6 O: all c:Component | c not in c.parts and c.parts not in c.parts
inv6 B: all c:Component | c not in c.parts and c.parts not in c
inv6 U: all c,c2:Component | (c not in c.parts) and (c2 in c.parts => c not in c2.parts)
inv6 B: all c2:Component, p:Product | p in c2.parts => p not in Component
inv6 U: all c:Component | c not in c.parts
inv6 U: all c:Component | c not in c.parts.parts
inv6 U: all c:Component | c not in c.parts.parts.parts
inv6 U: all c:Component | c not in c.parts
inv6 U: all c:Component | c not in c.parts
inv6 U: all c:Component | c not in c.parts	all p:Product | p in p.parts => p not in Component
inv6 B: all c:Component | c not in c.parts	all p:Product | p not in p.parts => p in Component
inv6 B: all c:Component | c not in c.parts	all p:Product | p not in p.parts => p in Component
inv6 B: one c:Component | c not in c.parts
inv6 B: lone c:Component | c not in c.parts
inv6 B: some c:Component | c not in c.parts
inv6 S: let c:Component | c not in c.parts
inv6 B: no c:Component | c not in c.parts
inv6 U: no c:Component | c in c.parts
inv6 B: all c:Component | c in c.parts
inv6 U: all c:Component | some c.parts => c not in c.parts
inv6 B: all c:Product | c not in c.parts
inv6 U: all c : Component | c not in c.parts
inv6 U: all c : Component | c -> c not in parts
inv6 U: all c : Component | c not in c.parts
inv7 B: all c:Component | Dangerous in c.parts => c in Dangerous
inv7 C: all c:Component, d:Dangerous | d in c.parts => c in Dangerous
inv8 B: all c:Component | c in Dangerous => Human not in c.workstation.workers
inv8 C: all c:Component, h:Human | c in Dangerous => h not in c.workstation.workers
inv8 C: all c:Dangerous, h:Human | c in Component => h not in c.workstation.workers
inv8 C: all c:Component, h:Human | c in Dangerous => h not in c.workstation.workers
inv9 B: all wk:Workstation | wk in begin => wk in end
inv9 B: all wk:Workstation | wk in begin => wk.succ in end
inv6 T: all c : Component | c not in c&parts
inv6 T: all c : Component | c not in c&parts
inv6 U: all c : Component | c not in c&c.parts
inv6 T: all c : Component | not c&c.parts
inv6 U: all c : Component | no c&c.parts
inv6 U: all c : Component, p:Product | p=c => p not in c.parts
inv6 B: all c : Component, p:Product | p not in c.parts => p=c
inv6 U: all c : Component, p:Product | p in c.parts => p!=c
inv6 B: all c : Component, p:Product | p in c.parts => p not in Component

