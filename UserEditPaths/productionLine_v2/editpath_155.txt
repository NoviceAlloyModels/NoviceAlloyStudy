NA H: THEME UPDATE
inv1 E: 
inv1 C: Worker in Human+Robot
inv2 U: all w : Workstation | some w.workers	all w : Worker | some workers.w
inv2 C: all w : Workstation | some w.workers	all w : Worker | one workers.w
inv3 C: all c : Component | one c.workstation
inv4 C: all c : Component | some c.parts	all m : Material | no m.parts
inv5 O: all w : Workstation | w.workers in Human or w.workers in Robot
inv6 S: all c : Components | c not in c.^parts
inv6 C: all c : Component | c not in c.^parts
inv7 O: all d : Dangerous | d.^(~parts) in Dangerous
inv7 O: all d : Dangerous | parts.d in Dangerous
inv6 U: all c : Component | c not in c.parts
inv6 C: all c : Component | c not in c.^parts
inv7 O: all d : Dangerous | parts.d in Dangerous
inv8 O: all d : Dangerous | d.workstation.workers in Robot
inv9 U: no end.succ+succ.begin	all w : Workstation-end-begin | one w.succ && one w.succ
inv9 U: no end.succ+succ.begin	all w : Workstation-end-begin | one w.succ && one succ.w
inv9 B: no end.succ+succ.begin	one succ.end	one begin.succ	all w : Workstation-end-begin | one w.succ && one succ.w
inv9 B: no end.succ+succ.begin	one succ.end	one begin.succ	begin != end	all w : Workstation-end-begin | one w.succ && one succ.w
inv9 B: no end.succ+succ.begin	one succ.end	one begin.succ	begin not in end	all w : Workstation-end-begin | one w.succ && one succ.w
inv9 B: no end.succ+succ.begin	one succ.end	one begin.succ	begin != end	all w : Workstation-end-begin | one w.succ && one succ.w
inv9 O: no end.succ+succ.begin	one succ.end	one begin.succ	begin != end	all w : Workstation-end-begin | one w.succ && one succ.w && w.succ != succ.w
inv9 S: no end.succ+succ.begin	one succ.end	one begin.succ	all w : Workstation | w != begin&suc	all w : Workstation-end-begin | one w.succ && one succ.w && w.succ != succ.w
inv9 O: no end.succ+succ.begin	one succ.end	one begin.succ	all w : Workstation | w != begin&end	all w : Workstation-end-begin | one w.succ && one succ.w && w.succ != succ.w
inv9 O: no end.succ+succ.begin	one succ.end	one begin.succ	all w : Workstation | w not in begin&end	all w : Workstation-end-begin | one w.succ && one succ.w && w.succ != succ.w
inv7 O: all d : Dangerous | parts.d in Dangerous
inv6 E: 
inv7 O: all d : Dangerous | parts.d in Dangerous
inv10 O: all c : Component, p : c.parts | c in c.workstation.^succ
inv10 O: all c : Component, p : c.parts | p in c.workstation.^succ
inv10 B: all c : Component, p : c.parts | p.workstation in c.workstation.^succ
inv10 B: all c : Component, p : c.parts | p.workstation in c.workstation.succ.^succ
inv10 O: all c : Component, p : c.parts | p.workstation in c.workstation.~succ.^~succ
inv10 B: all c : Component, p : c.parts | p.workstation in c.workstation.succ.^succ
inv10 O: all c : Component, p : c.parts | p.workstation in c.workstation.~succ.^~succ
inv10 B: all c : Component, p : c.parts | p.workstation in c.workstation.succ.^succ
inv10 T: all c : Component, p : c.parts | some p.workstation in c.workstation.succ.^succ
inv10 B: all c : Component, p : c.parts | p.workstation in c.workstation.succ.^succ
inv10 O: all c : Component, p : c.parts | p.workstation in c.workstation.~succ.^~succ
inv10 O: all c : Component, p : c.parts | some p.workstation && p.workstation in c.workstation.~succ.^~succ
inv10 B: all c : Component, p : c.parts | some p.workstation && p.workstation in c.workstation.succ.^succ
inv10 O: all c : Component, p : c.parts | p.workstation in c.workstation.~succ.^~succ
inv10 S: all c : Components | c.p.workstation in (^succ).(c.workstation)
inv10 S: all c : Components | c.parts.workstation in (^succ).(c.workstation)
inv10 C: all c : Component | c.parts.workstation in (^succ).(c.workstation)
inv9 C: all w : Workstation | (no succ.w <=> w in begin) and (no w.succ <=> w in end) and lone w.succ and w not in w.^succ
inv9 O: all w : Workstation | no succ.w && w in begin and (no w.succ <=> w in end) and lone w.succ and w not in w.^succ
inv9 S: all w : Workstation | no succ.w w in begin and (no w.succ <=> w in end) and lone w.succ and w not in w.^succ
inv9 U: all w : Workstation | no succ.w <=> w in begin and (no w.succ <=> w in end) and lone w.succ and w not in w.^succ
inv9 C: all w : Workstation | (no succ.w <=> w in begin) and (no w.succ <=> w in end) and lone w.succ and w not in w.^succ

