NA H: THEME UPDATE
inv1 C: Worker in (Human+Robot)
inv2 B: #Workstation.workers > 1	all worker: Worker | one ws: Workstation | worker in ws.workers
inv2 U: #Workstation.workers >= 1	all worker: Worker | one ws: Workstation | worker in ws.workers
inv2 T: all ws: Workstation | not none ws.workers	all worker: Worker | one ws: Workstation | worker in ws.workers
inv2 C: all ws: Workstation | not no ws.workers	all worker: Worker | one ws: Workstation | worker in ws.workers
inv3 C: all co: Component | one co.workstation
inv4 S: all product: Product | (product == Component implies not no product.parts) and  (product == Material implies no product.parts)
inv4 U: all product: Product | (product = Component implies not no product.parts) and  (product = Material implies no product.parts)
inv4 B: all product: Product | (product != Material implies some product.parts) and  (product = Material implies no product.parts)
inv4 U: all product: Product | (product != Material implies some product.parts) or  (product = Material implies no product.parts)
inv4 B: all product: Product | (product != Material implies some product.parts) and  (product = Material implies no product.parts)
inv4 O: all product: Product | (product != Material implies some product.parts)	all mat: Material | no mat.parts
inv4 O: all product: Product | product != Material implies some product.parts	all mat: Material | no mat.parts
inv4 O: all product: Product | product != Material implies not no product.parts	all mat: Material | no mat.parts
inv4 C: all product: Component | not no product.parts	all mat: Material | no mat.parts
inv4 O: all product: Component | not no product.parts	all product: Product | product != Material implies some product.parts	all mat: Material | no mat.parts
inv4 C: all product: Component | not no product.parts	all product: Product | product not in Material implies some product.parts	all mat: Material | no mat.parts
inv4 C: all product: Product | product not in Material implies some product.parts	all mat: Material | no mat.parts
inv5 O: all ws: Workstation | all disj w1, w2: ws.workers | w1 in Human implies w2 in Human
inv6 C: all component: Component | component not in component.^parts
inv7 B: all component: Component | component.^parts in Dangerous implies component in Dangerous
inv7 T: all c: Dangerous | all c1: *c | c1 in Dangerous
inv7 C: all c: Component | all p : c.parts | p in Dangerous implies c in Dangerous
inv8 O: all c: Component | c in Dangerous implies c.workstation.workers in Robot
inv1 C: Worker in (Human+Robot)
inv1 C: Worker in (Human+Robot)
inv1 C: Worker in (Human+Robot)
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
inv1 C: Worker in (Human+Robot)
inv1 C: Worker in (Human+Robot)
inv1 C: Worker in (Human+Robot)
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
inv9 E: 
inv9 B: no begin - end
inv9 U: all b: begin | b not in Workstation.succ
inv9 U: all b: begin, e: end | b not in Workstation.succ and no e.succ
inv9 U: all b: begin, e: end | b not in Workstation.succ and no e.succ	all w: Workstation | w not in w.^succ
inv9 U: all b: begin, e: end | b not in Workstation.succ and no e.succ	all w: Workstation | w not in w.^succ	all w: Workstation | w not in end implies some w.succ	all w: Workstation | w not in begin implies w in Workstation.succ
inv1 C: Worker in (Human+Robot)
inv2 C: all ws: Workstation | some ws.workers		all w: Worker | one w.~workers
inv3 C: all co: Component | one co.workstation
inv4 C: all c: Component | some c.parts	all mat: Material | no mat.parts
inv5 O: all ws: Workstation | all disj w1, w2: ws.workers | w1 in Human implies w2 in Human
inv5 O: all ws: Workstation | ws.workers in Human or ws.workers in Robot
inv6 C: all component: Component | component not in component.^parts
inv7 C: all c: Component, p : c.parts | p in Dangerous implies c in Dangerous
inv7 O: ^parts.Dangerous in Dangerous
inv7 O: parts.Dangerous in Dangerous
inv7 B: all c: Component | some p : c.parts | p in Dangerous implies c in Dangerous
inv7 C: all c: Component, p : c.parts | some p & Dangerous implies c in Dangerous
inv7 C: all c: Component, p : c.parts | p in Dangerous implies c in Dangerous
inv9 U: all b: begin, e: end | b not in Workstation.succ and no e.succ	all w: Workstation | w not in w.^succ	all w: Workstation | w not in end implies some w.succ	all w: Workstation | w not in begin implies w in Workstation.succ
inv9 C: all w: Workstation | lone w.succ	all w: Workstation | lone w.~succ	all w: Workstation | w in begin.*succ	no end.succ
inv9 C: succ in Workstation lone -> lone Workstation	Workstation in begin.*succ	no end.succ
inv9 U: all b: begin, e: end | b not in Workstation.succ and no e.succ	all w: Workstation | w not in w.^succ	all w: Workstation | w not in end implies some w.succ	all w: Workstation | w not in begin implies w in Workstation.succ
inv9 C: all b: begin, e: end | b not in Workstation.succ and no e.succ	all w: Workstation | w not in w.^succ	all w: Workstation | w not in end implies one w.succ	all w: Workstation | w not in begin implies w in Workstation.succ
inv10 B: all c: Component, p: Product | p in c.parts implies c.workstation in p.workstation.^succ
inv10 B: all c: Component, p: Component | p in c.parts implies c.workstation in p.workstation.^succ

