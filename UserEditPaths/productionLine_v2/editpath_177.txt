NA H: THEME UPDATE
inv1 S: no Workers-Human&Workers-Robot
inv1 C: no Worker-Human&Worker-Robot
inv1 C: no Worker-Human-Robot
inv2 S: all w: Workstation | some w.workers and no Workers-w.workers
inv2 B: all w: Workstation | some w.workers and no Worker-w.workers
inv2 U: all w: Workstation | some w.workers	all w: Worker | w in Workstation.workers
inv2 U: all w: Workstation | some w.workers	all w: Worker | lone w&Workstation.workers
inv2 U: all w: Workstation | some w.workers	all w: Worker | one w&Workstation.workers
inv2 C: all w: Workstation | some w.workers and	all w: Worker | one workers.w
inv3 C: all c: Component | one c.workstation
inv4 S: all p: Product | p in Component implies some p.parts and p in Materials implies no p.parts
inv4 U: all p: Product | p in Component implies some p.parts and p in Material implies no p.parts
inv4 C: all p: Product | (p in Component implies some p.parts) and (p in Material implies no p.parts)
inv4 S: all c: Componet | some c.parts	all m: Material | no p.parts
inv4 S: all c: Component | some c.parts	all m: Material | no p.parts
inv4 C: all c: Component | some c.parts	all m: Material | no m.parts
inv4 U: all c: Component, m: Material | some c.parts and no m.parts
inv4 U: all c: Component, m: Material | (some c.parts) and no m.parts
inv4 U: all c: Component, m: Material | (some c.parts) and (no m.parts)
inv4 C: all c: Component | some c.parts	all m: Material | no m.parts
inv5 T: all w: Workstation | no w.workers.Robot&w.workers.Human
inv5 B: all w: Workstation | Robot in w.workers implies Human not in w.workers
inv5 B: all w: Workstation | w.workers not in Human&Robot
inv5 T: all w: Workstation | Robot in w.workers = Human not in w.workers
inv5 B: all w: Workstation | Robot in w.workers implies Human not in w.workers
inv5 B: all w: Workstation, wk: w.workers | Robot in wk implies Human not in wk
inv5 B: all w: Workstation, wk: w.workers | (Robot in wk implies Human not in wk) and (Human in wk implies Robot not in wk)
inv5 B: all w: Workstation, wk: w.workers | (Robot in wk implies Human != wk) and (Human in wk implies Robot != wk)
inv5 C: all w: Workstation, h: Human, r: Robot | (h in w.workers implies r not in w.workers) and (r in w.workers implies h not in w.workers)
inv6 C: all c: Component | c not in c.^parts
inv7 B: all c: Component | c.parts in Dangerous implies c in Dangerous
inv7 B: all c: Component | c.parts in Dangerous implies c = Dangerous
inv7 C: all c: Component, p: c.parts | p in Dangerous implies c in Dangerous
inv7 C: all c: Component, p: c.parts | p in Dangerous implies c in Dangerous
inv8 B: all c: Component | c in Dangerous implies c.workstation.workers not in Human
inv8 B: all c: Component | c in Dangerous implies c.workstation.workers not in Human
inv9 U: all w: Workstation | w not in w.^succ
inv9 O: all w: Workstation | some w.succ and w not in w.^succ
inv9 U: all w: Workstation | lone w.succ and w not in w.^succ
inv9 B: all disj w1,w2: Workstation | w2 in w1.succ and w2 not in w1.^succ
inv9 O: all w: Workstation | Workstation in w.succ and w not in w.^succ
inv9 S: all w: Workstation | w not in end implies and w not in w.^succ
inv9 U: all w: Workstation | w not in end implies w not in w.^succ
inv9 U: all w: Workstation | w not in w.^succ
inv9 B: all disj w,w1: Workstation | w not in begin implies w1 in w.succ and w not in w.^succ
inv9 B: all disj w,w1: Workstation | (w not in begin implies w1 in w.succ) and w not in w.^succ
inv9 B: all w: Workstation | (w in begin implies some w.succ) and w not in w.^succ
inv9 U: all w: Workstation | (w in begin implies (some w.succ) or w in end) and w not in w.^succ
inv9 U: all w: Workstation | (w in begin implies (some w.succ) or w in end) and w not in w.^succ
inv9 O: all w: Workstation | (no Workstation-w or w in begin and some w.succ) and w not in w.^succ
inv9 O: all w: Workstation | (no Workstation-w or (w in begin and some w.succ)) and w not in w.^succ
inv9 T: all w: Workstation | (Workstation-w or w in end or some w.succ) and w not in w.^succ
inv9 T: all w: Workstation | (Workstation-w or w in end or some w.succ) and w not in w.^succ
inv9 U: all w: Workstation | (no Workstation-w or w in end or some w.succ) and w not in w.^succ
inv9 O: all w: Workstation | (no Workstation-w or w in end or some w.succ) and w not in w.^succ and w.succ not in begin
inv9 O: all w1,w2: Workstation | (w1 in begin and w2 in end) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)
inv9 B: all w1,w2: Workstation | ((w1 in begin and w2 in end) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or w1=w2 and w1 not in w2.succ
inv9 U: all w1,w2: Workstation | ((w1 in begin and w2 in end) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or w1=w2 implies no Workstation-w1 and w1 not in w2.succ
inv9 U: all w1,w2: Workstation | ((w1 in begin and w2 in end) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or (w1=w2 implies no Workstation-w1 and w1 not in w2.succ)
inv9 O: all w1,w2: Workstation | ((w1 in begin and w2 in end) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ))
inv9 U: all w1,w2: Workstation | ((w1 in begin and w2 in end and w1!=w2) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or (w1=w2 implies no Workstation-w1 and w1 not in w2.succ)
inv9 U: all w1,w2: Workstation | ((w1 in begin and w2 in end and w1!=w2) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or (w1=w2 implies no Workstation-w1 and w1 not in w1.^succ)
inv9 U: all w1,w2: Workstation | ((w1 in begin and w2 in end and w1!=w2) implies (some w1.succ and w1 not in succ.Workstation and no w2.succ)) or (w1=w2 implies no Workstation-(w1+w2) and (w1+w2) not in (w1+w2).^succ)
inv9 U: all w: Workstation | w not in w.^succ
inv9 U: all w: Workstation | w not in w.^succ and (w in begin or some succ.w) and (w in end or some w.succ)
inv9 C: all w: Workstation | w not in w.^succ and (w in begin or one succ.w) and (w in end or one w.succ)
inv9 C: all w: Workstation | w not in w.^succ and (w in begin or one succ.w) and (w in end or one w.succ)
inv10 B: all c: Component, p: c.parts, w: c.workstation | c.parts in w
inv10 B: all c: Component, p: c.parts, w: c.workstation | c.parts.workstation = w
inv10 B: all c: Component, p: c.parts, w: c.workstation | p.workstation = w
inv10 S: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.worstation | w2 in w1.^succs
inv10 S: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.workstation | w2 in w1.^succs
inv10 B: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.workstation | w2 in w1.^succ
inv10 B: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.workstation | w1 in w2.^succ
inv10 B: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.workstation | w2 in w1.^succ
inv10 B: all c1: Component, c2: c1.^parts, w1: c1.workstation, w2: c2.workstation | w1 in w2.^succ
inv9 C: all w: Workstation | w not in w.^succ and (w in begin or one succ.w) and (w in end or one w.succ)
inv8 B: all c: Component | c in Dangerous implies c.workstation.workers not in Human

