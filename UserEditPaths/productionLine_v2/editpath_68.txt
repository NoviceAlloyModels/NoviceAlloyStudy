NA H: THEME UPDATE
inv1 S: all w:Worker | worke in Human imples worker not in Robot
inv1 S: all w:Worker | w in Human imples w not in Robot
inv1 U: all w:Worker | w in Human implies w not in Robot
inv1 S: Human disj Robot
inv1 B: no (Human + Robot)
inv1 U: no (Human & Robot)
inv1 U: all w:Worker | w in Human implies w not in Robot
inv1 C: all w:Worker | w in Human or w in Robot
inv1 C: all w:Worker | w in Human or w in Robot
inv2 U: all w:Worker | one workers.w
inv2 U: all w:Worker | lone workers.w
inv2 C: all w:Worker | one workers.w	all w:Workstation | some w.workers
inv3 C: all c:Component | one c.workstation
inv3 C: all c:Component | one c.workstation
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv4 C: all c:Component | some c.parts	all m:Material | no m.parts
inv5 B: all w:Workstation | w.workers in Human implies w.workers not in Robot
inv5 O: all w:Workstation | w.workers in Human or w.workers in Robot
inv5 S: Workstation.workers in Human or w.workers in Robot
inv5 O: Workstation.workers in Human or Workstation.workers in Robot
inv5 S: all w:Workstation | w.workers in (Human or Robot)
inv5 S: all w:Workstation | w.workers in Human or w.workers in Robot
inv5 S: all w:Workstation | w.workers in Human or w.workers in Robot
inv5 E: 
inv5 O: all w:Workstation | w.workers in Human or w.workers in Robot
inv6 S: all c:Component | c not in c.part
inv5 O: all w:Workstation | w.workers in Human or w.workers in Robot
inv6 U: all c:Component | c not in c.parts
inv6 B: no parts & iden
inv6 U: all c:Component | c not in c.parts
inv6 C: all c:Component | c not in c.^parts
inv7 T: all c:Component | some c.parts in Dangerous implies c in Dangerous
inv7 T: all c:Component | (some c.parts) in Dangerous implies c in Dangerous
inv7 B: all c:Component | c.parts in Dangerous implies c in Dangerous
inv7 C: all c:Component | some (c.parts & Dangerous) implies c in Dangerous
inv8 S: all c:Component | c in Dangerous implies c.workstation.workes not in Human
inv8 B: all c:Component | c in Dangerous implies c.workstation.workers not in Human
inv8 O: all c:Component | c in Dangerous implies c.workstation.workers in Robot
inv8 B: all c:Component | c in Dangerous implies c.workstation.workers not in Human
inv9 U: all w:Workstation | w not in w.^succ
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ in Workstation - w
inv9 B: one w:Workstation | w.^succ in Workstation - w
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ in Workstation - w
inv9 U: all w:Workstation | w not in w.^succ	some w:Workstation | w.^succ in Workstation - w
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ in Workstation - w	one w:Workstation | no w.succ
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w in begin implies w.^succ in Workstation - w	one w:Workstation | no w.succ
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w in begin implies w.^succ in Workstation - begin
inv9 U: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = (Workstation - w)
inv9 U: all w:Workstation | w not in w.^succ		begin.^succ in Workstation - begin
inv9 S: all w:Workstation | w not in w.^succ		begin.^succ == Workstation - begin
inv9 U: all w:Workstation | w not in w.^succ		begin.^succ = Workstation - begin
inv9 U: all w:Workstation | w not in w.^succ		begin.^succ = (Workstation - begin)
inv9 B: all w:Workstation | w not in w.^succ	begin != end		begin.^succ = (Workstation - begin)
inv9 B: all w:Workstation | w not in w.^succ	all w:Workstation | w in begin implies w not in end		begin.^succ = (Workstation - begin)
inv9 O: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ in Workstation - w
inv9 U: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w
inv9 U: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ
inv9 U: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin
inv9 S: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin	all w.Workstation | lone w.succ
inv9 S: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin	all w.Workstation | lone w.succ
inv9 U: all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin
inv9 C: all w:Workstation | lone w.succ	all w:Workstation | w not in w.^succ	one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin
inv9 C: all w:Workstation | lone w.succ		one w:Workstation | w.^succ = Workstation - w	no end.succ	no succ.begin
inv9 U: all w:Workstation | lone w.succ		no end.succ	no succ.begin
inv9 C: all w:Workstation | lone w.succ	one w:Workstation | w.^succ = Workstation - w 	no end.succ	no succ.begin	begin.^succ = Workstation - begin
inv9 C: all w:Workstation | lone w.succ		no end.succ	no succ.begin	begin.^succ = Workstation - begin
inv9 C: all w:Workstation | lone w.succ	one w:Workstation | w.^succ = Workstation - w and no succ.w	no end.succ	no succ.begin
inv9 U: all w:Workstation | lone w.succ	one w:Workstation | w.^succ = Workstation - w and no succ.w	no end.succ
inv10 O: all c:Component | c.parts.workstation in succ.(c.workstation)

