NA H: THEME UPDATE
inv1 C: all w : Worker | w in Human or w in Robot
inv2 S: (all ws : Workstation | some w : Worker | ws->w in worker)	and	(all w : Worker | some ws : Workestation | ws->w in worker)
inv2 S: (all ws : Workstation | some w : Worker | ws->w in workers)	and	(all w : Worker | some ws : Workestation | ws->w in workers)
inv2 U: (all ws : Workstation | some w : Worker | ws->w in workers)	and	(all w : Worker | some ws : Workstation | ws->w in workers)
inv2 C: (all ws : Workstation | some w : Worker | ws->w in workers)	and	(all w : Worker | one ws : Workstation | ws->w in workers)
inv3 S: all c : Component | one ws : Workstation | c->w in workstation
inv3 C: all c : Component | one ws : Workstation | c->ws in workstation
inv4 C: (all c : Component | some p : Product | c->p in parts)	and	(all m : Material | no p : Product | m->p in parts)
inv5 T: all ws : Workstation | some w1,w2 : Worker | (ws->w1 and ws->w2 and w1 in Human) iff (w2 not in Robot)
inv5 T: all ws : Workstation | some w1,w2 : Worker | (ws->w1 and ws->w2 and w1 in Human) iff (w2 not in Robot)
inv5 B: all ws : Workstation | some w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	iff (w2 not in Robot)
inv5 B: all ws : Workstation | some w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	iff (w2 in Human)
inv5 B: all ws : Workstation | some w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)
inv5 O: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)
inv6 U: all c1,c2 : Component | c1->c2 in parts implies c1!=c2
inv6 U: all c1,c2 : Component | c1->c2 in parts implies c2->c1 not in parts
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2]{	all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2]
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2] : r{	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2] : r {	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2]: r {	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2]= r {	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1,c2=]: r {	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component]: r {	r iff	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component] {	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component]: {	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component]:  {	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component]:  {	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])		}			{pred inv6 {		all c1,c2 : Component | c1->c2 in parts implies c2->c1 not in parts
inv5 S: all ws : Workstation | all w1,w2 : Worker |	(ws->w1 in workers and ws->w2 in workers and w1 in Human)	implies (w2 in Human)		}		fun path [c1 : Component,c2:Component]: r:Bool  {	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv6 U: all c1,c2 : Component | c1->c2 in parts implies c2->c1 not in parts
inv6 S: all c1 | not path[c1,c1]		}		pred path [c1 : Component,c2:Component]{	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv6 S: all c1 : Component | not path[c1,c1]		}		pred path [c1 : Component,c2:Component]{	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv6 S: all c1 : Component | not path[c1,c1]		}		pred path [c1 : Component,c2:Component]{	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and path[c3,c2])
inv6 S: all c1 : Component | not path[c1,c1]		}		pred path [c1 : Component,c2:Component]{	(all c3 : Component | c1->c3 in parts implies c3->c2 not in parts and	path[c3,c2])
inv6 S: all c1 : Component | not path[c1,c1]		}		pred path [c1 : Component,c2:Component]{	all c3 : Component | c1->c3 in parts implies (c3->c2 not in parts) and path[c3,c2]

