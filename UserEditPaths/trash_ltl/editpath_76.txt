NA H: THEME UPDATE
prop1 S: historically (no Trash & no Protected)
prop1 C: historically (no Trash and no Protected)
prop2 U: (some File) since (no File)
prop3 C: always (some File)
prop4 C: eventually (some Trash)
prop5 O: eventually (some f : File | File' = File - f)
prop6 U: all t : Trash | always (t in Trash)
prop1 C: historically (no Trash + Protected)
prop2 U: (historically no File) until (some File)
prop2 U: (historically (no File)) until (some File)
prop2 U: historically ((no File) until (some File))
prop2 U: historically (no File) until some File
prop3 C: always some File
prop4 C: eventually some Trash
prop1 C: historically no Trash + Protected
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop6 C: always all f : File |  f in Trash implies always f in Trash
prop6 B: always (some File implies File in File')
prop6 B: always ((some File) implies (File in File'))
prop6 C: always all f : File |  f in Trash implies always f in Trash
prop6 B: always ((some File) implies (always File in File'))
prop6 U: always ((some File) implies (always File in File))
prop6 B: always ((some File) implies (always File in File'))
prop6 B: always ((some File) implies (always (File in File')))
prop6 C: always all f : File |  f in Trash implies always f in Trash
prop6 C: always (all f : File |  f in Trash implies always f in Trash)
prop6 C: always (all f : File |  (f in Trash) implies (always f in Trash))
prop6 C: always (all f : File |  (f in Trash) implies (always (f in Trash)))
prop6 C: always ((some Trash) implies (always (Trash in Trash')))
prop6 C: always ((some Trash) implies (always Trash in Trash'))
prop6 C: always (some Trash implies (always Trash in Trash'))
prop6 C: always (some Trash implies always Trash in Trash')
prop6 U: always some Trash implies always Trash in Trash'
prop6 C: always (some Trash implies always Trash in Trash')
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop2 U: historically (no File) until some File
prop2 U: historically (no File until some File)
prop5 O: some f : File | eventually (f not in File)
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop8 B: (some link) implies (File.(~link) in Trash)
prop8 B: (some link) implies (eventually File.(~link) in Trash)
prop8 T: all l : link | eventually l.File in Trash
prop8 T: some l : link | eventually l.File in Trash
prop8 U: all f : File | (some f.link) implies (eventually f in Trash)
prop8 B: all f : File | (some link.f) implies (eventually f in Trash)
prop8 B: all f : File | (some f.~link) implies (eventually f in Trash)
prop9 C: always (no Protected & Trash)
prop10 U: always (Protected in Protected')
prop12 B: eventually (File in Trash)
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop9 C: always (no Protected & Trash)
prop10 U: always (Protected in Protected')
prop12 B: eventually (File in Trash)
prop2 U: historically (no File) until some File
prop11 C: always all f:File |  f not in Protected implies after f in Protected
prop12 U: eventually some f:File | f in Trash implies always f in Trash
prop11 U: some (File - Protected) implies ((File - Protected) in Protected')
prop11 B: some (File - Protected) implies (after (File - Protected) in Protected)
prop11 U: all f : File | (f not in Protected) implies (after f in Protected)
prop11 C: always all f : File | (f not in Protected) implies (after f in Protected)
prop11 B: always (some (File - Protected) implies (after ((File - Protected) in Protected)))
prop11 C: always (some (File - Protected) implies ((File - Protected) in Protected'))
prop11 B: always (some (File - Protected) implies (after((File - Protected) in Protected)))
prop11 C: always (some (File - Protected) implies ((File - Protected) in Protected'))
prop10 U: always (Protected in Protected')
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop9 C: always (no Protected & Trash)
prop11 C: always (some (File - Protected) implies ((File - Protected) in Protected'))
prop13 O: all f : File | (f in Trash) releases (f not in Trash)
prop13 O: always all f : File | (f in Trash) releases (f not in Trash)
prop13 B: always all f : File | (f in Trash) until (f not in Trash)
prop13 B: always all f : File | (f not in Trash) until (f in Trash)
prop13 C: all f : File | (f in Trash) implies (once (f not in Trash))
prop13 B: (File in Trash) implies (once (File not in Trash))
prop13 C: all f : File | (f in Trash) implies (once (f not in Trash))
prop13 C: all f : File | (f in Trash) implies (once f not in Trash)
prop14 U: always (some (Protected & Trash) implies ((Protected & Trash) not in Protected'))
prop14 C: always all f : File | (f in Protected & Trash) implies (f not in Protected')
prop14 B: always some f : Protected & Trash | f not in Protected'
prop14 B: always some f : (Protected & Trash) | f not in Protected'
prop14 B: always some f : Protected & Trash | (f in Protected & Trash) implies (f not in Protected')
prop14 B: always some f : File | (f in Protected & Trash) implies (f not in Protected')
prop14 C: always all f : File | (f in Protected & Trash) implies (f not in Protected')
prop14 C: always all f : Protected & Trash | f not in Protected'
prop14 U: always ((some Protected & Trash) implies Protected & Trash not in Protected')
prop14 U: always ((some Protected & Trash) implies (Protected & Trash not in Protected'))
prop14 C: always all f : Protected & Trash | f not in Protected'
prop15 B: always (some File implies (eventually File in Trash))
prop15 B: some File implies (eventually File in Trash)
prop15 B: (some File) implies (eventually (File in Trash))
prop15 U: all f : File | eventually f in Trash
prop15 C: always all f : File | eventually f in Trash
prop16 U: all f : File | (f in Protected) implies (historically f in Protected)
prop16 C: always all f : File | (f in Protected) implies (historically f in Protected)
prop16 T: always (some (File in Protected)) implies (historically some (File in Protected))
prop16 T: always ((some (File in Protected)) implies (historically some (File in Protected)))
prop16 U: always ((some Protected) implies (historically some Protected))
prop16 B: always ((some Protected') implies (historically Protected in Protected'))
prop16 O: always ((some Protected') implies (historically Protected = Protected'))
prop16 T: always all f : File | (some (File in Protected)) implies (historically f in Protected)
prop16 C: always all f : File | (f in Protected) implies (historically f in Protected)
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop9 C: always (no Protected & Trash)
prop11 C: always (some (File - Protected) implies ((File - Protected) in Protected'))
prop13 C: all f : File | (f in Trash) implies (once f not in Trash)
prop14 C: always all f : Protected & Trash | f not in Protected'
prop15 C: always all f : File | eventually f in Trash
prop16 C: always all f : File | (f in Protected) implies (historically f in Protected)
prop17 C: always all t : Trash | t not in File'
prop17 B: always Trash not in File'
prop17 B: always (Trash not in File')
prop17 B: always (Trash-Trash' not in File')
prop17 O: always (Trash&Trash' not in File')
prop17 B: always (Trash not in File')
prop17 S: always all t : Trash | t not in File')
prop17 C: always all t : Trash | t not in File'
prop18 B: always all p : Protected | (p not in Protected') implies (p in Trash')
prop18 C: always all p : Protected | (p not in Protected') implies (p in Trash)
prop19 C: always all p : Protected | (p in Protected) until (p in Trash)
prop19 B: always (some Protected) until (Protected in Trash)
prop19 C: always all p : Protected | (p in Protected) until (p in Trash)
prop20 B: always all t : Trash | (t in Trash) since (t in Protected)
prop20 C: always all t : Trash | (t in Trash) since (t not in Protected)
NA M: MOD BASE MODEL
prop20 C: always all t : Trash | (t in Trash) since (t not in Protected)
prop5 O: always some f : File | eventually f not in File
prop5 O: always some f : File | eventually f not in File'
prop5 O: some f : File | eventually f not in File'
prop8 T: always all l : link | eventually File.l in Trash
prop8 T: always all l : link | eventually (File.l in Trash)
prop8 T: always (all l : link | eventually (File.l in Trash))
prop8 O: always all f : File | eventually f in Trash
prop8 C: always all f : File | (some f.link) implies (eventually f in Trash)
prop10 U: always (Protected in Protected')
prop10 U: always all p : Protected | p in Protected'
prop10 C: always Protected = Protected'
prop12 B: always (eventually File in Trash)
prop12 B: always all f : File | eventually f in Trash
prop12 B: all f : File | eventually f in Trash
prop5 B: some f : File | eventually f in Trash
prop5 B: always some f : File | eventually f in Trash
prop2 B: always ((no File) implies (some File))
prop2 B: always ((no File) until (some File))
prop2 B: always ((no File) releases (some File))
prop2 B: always (eventually some File)
prop2 O: before (no File)
prop1 C: historically no (Trash + Protected)
prop3 C: always some File
prop4 C: eventually some Trash
prop5 E: 
prop6 C: always (some Trash implies (always Trash in Trash'))
prop7 C: eventually some Protected
prop8 C: always all f : File | (some f.link) implies (eventually f in Trash)
prop9 C: always (no Protected & Trash)
prop10 C: always Protected = Protected'
prop11 C: always (some (File - Protected) implies ((File - Protected) in Protected'))
prop12 E: 
prop13 C: all f : File | (f in Trash) implies (once f not in Trash)
prop14 C: always all f : Protected & Trash | f not in Protected'
prop15 C: always all f : File | eventually f in Trash
prop16 C: always all f : File | (f in Protected) implies (historically f in Protected)
prop17 C: always all t : Trash | t not in File'
prop18 C: always all p : Protected | (p not in Protected') implies (p in Trash)
prop19 C: always all p : Protected | (p in Protected) until (p in Trash)
prop20 C: always all t : Trash | (t in Trash) since (t not in Protected)

