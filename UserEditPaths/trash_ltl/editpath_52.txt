NA H: THEME UPDATE
prop1 C: no (Trash+Protected)
prop2 S: no Files
prop2 U: no File
prop2 U: historically no File
prop2 U: historically no File until some File
prop2 U: no File until some File
prop2 U: no File until some File'
prop3 C: always some File
prop4 T: eventually some File in Trash
prop4 C: eventually some Trash
prop5 O: some f : File | eventually f not in File'
prop5 C: eventually some f : File |  f not in File'
prop6 B: always some f:File | f in Trash implies always f in Trash
prop6 B: always some f:File | f in Trash implies always f in Trash'
prop6 B: always some f:File | (f in Trash) implies (always f in Trash')
prop6 U: always some Trash implies (always some Trash')
prop6 T: always some Trash implies (always some Trash in Trash')
prop6 U: always some Trash implies (always Trash in Trash')
prop6 C: always (some Trash implies (always Trash in Trash') )
prop1 C: no (Trash+Protected)
prop3 C: always some File
prop2 U: no File until some File'
prop2 U: historically no File until some File'
prop2 U: historically no File
prop2 U: historically no File until some File
prop4 C: eventually some Trash
prop5 C: eventually some f : File |  f not in File'
prop7 C: eventually some Protected
prop6 C: always all f : File |  f in Trash implies always f in Trash
prop8 S: some f:File | f in Link implies eventually f in Trash
prop8 C: always all f:File | some f.link implies eventually f in Trash
prop9 B: always Protected not in Trash
prop9 C: always (Trash-Protected) = Trash
prop10 T: always Protected implies Protected'
prop10 T: always (Protected implies Protected')
prop10 C: always Protected = Protected'
prop11 C: always all f:File | (f not in Protected) implies (f in Protected')
prop12 U: eventually some f:File | f in Trash implies always f in Trash
prop12 U: eventually some f:File | f in Trash implies always f in Trash
prop12 U: eventually some f:File | f in Trash'
prop12 U: eventually some f:File | f in Trash' implies always f in Trash'
prop12 U: eventually some f:File | f in Trash implies always f in Trash'
prop12 U: eventually some f:File | ((f not in Trash)and(f in Trash')) implies always f in Trash'
prop12 T: eventually some f:File | ((f not in Trash)+(f in Trash')) implies always f in Trash'
prop12 B: some f:File | ((f not in Trash)and(f in Trash')) implies always f in Trash'
prop13 C: all f:File | f in Trash implies once f not in Trash
prop14 U: all f:File | ((f in Protected) and (f in Trash)) implies f not in Protected'
prop14 U: all f:File | (f in Protected & Trash) implies f not in Protected'
prop14 C: always all f:File | (f in Protected & Trash) implies f not in Protected'
prop15 U: all f:File | eventually f in Trash
prop15 C: always all f:File | eventually f in Trash
prop16 U: all f:File| f in Protected implies historically f in Protected
prop16 C: always all f:File| f in Protected implies historically f in Protected
prop17 B: always some f:File | f in Trash implies f not in File'
prop17 C: always all f:File | f in Trash implies f not in File'
prop17 C: always all f:Trash | f not in File'
prop18 B: all p:Protected | p not in Protected' implies p in Trash'
prop18 B: always all p:Protected | p not in Protected' implies p in Trash'
prop18 B: always all p:Protected | p not in Protected' implies always p in Trash'
prop18 C: always all p:Protected | p not in Protected' implies  p in Trash
prop19 U: all p:Protected | p in Protected until p in Trash
prop19 C: always all p:Protected | p in Protected until p in Trash
prop20 C: always all f:Trash | f in Trash since (f not in Protected)

