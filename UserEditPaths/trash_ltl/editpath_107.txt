NA H: THEME UPDATE
inv1 C: no Trash and no Protected
inv2 S: no Files and next some Files
inv2 T: no File and next some File
inv2 C: no File and after some File
inv3 C: always some File
inv3 C: always some File
inv5 S: eventually (some f : Trash | Trash' = Trash - f
inv4 C: eventually some Trash
inv5 B: eventually (some f : Trash | Trash' = Trash - f)
inv5 O: eventually (File' in File and File not in File')
inv5 U: eventually (some f : File | f not in File implies always f not in File)
inv6 U: all f : File | always (f in Trash implies always f in Trash)
inv10 C: always Protected' = Protected
inv9 C: always no Protected & Trash
inv11 S: all f : File - Protected | always (next f in Protected)
inv11 S: all f : File - Protected | always (next f in Protected)
inv11 B: all f : File - Protected | always (after f in Protected)
inv11 O: always Protected' = File-Protected
inv11 B: always Protected' = Protected + (File-Trash)
inv12 S: eventually
inv10 C: always Protected' = Protected
inv12 B: eventually (some f : File - Trash | f in Trash implies always f in Trash)
inv13 C: all f : File | f in Trash implies once f not in Trash
inv14 B: all f : Protected & Trash | after f not in Trash
inv14 U: all f : Protected | f in Trash implies after f not in Protected
inv14 B: Protected' = Protected - Trash
inv14 B: no Protected' & Trash
inv14 B: all f : File | f in Trash implies (after f not in Protected)
inv14 S: all f : File | f in Trash' implies after f not in Protected
inv14 S: all f : File | f in Trash' implies after f not in Protected
inv14 B: all f : File | f in Trash' implies after f not in Protected
inv14 B: all f : File | f in Trash' implies  f not in Protected'
inv14 B: all f : Protected & Trash | f in Trash' implies (after f not in Protected')
inv14 U: all f : Protected & Trash | f in Trash' implies (after f not in Protected)
inv14 B: all f : Protected & Trash | always (after f not in Protected)
inv14 B: all f : Trash | always (after f not in Protected)
inv15 B: some f : File | eventually f in Trash
inv15 B: always (some f : File | eventually f in Trash)
inv15 U: all f : File | eventually f in Trash
inv16 U: all f : File | f in Protected implies historically f in Protected
inv16 C: always (all f : File | f in Protected implies historically f in Protected)
inv16 B: always Protected in Protected'
inv16 O: always Protected = Protected'
inv16 C: always (all f : File | f in Protected implies historically f in Protected)
inv17 B: all f : Trash | File' = File - f
inv17 O: always (all f : Trash | File' = File - f)
inv17 C: always (all f : Trash | f not in File')
inv15 C: always (all f : File | eventually f in Trash)
inv14 O: always (all f : Trash | always (after f not in Protected))
inv14 B: always (all f : Trash' | always (after f not in Protected))
inv13 C: all f : File | f in Trash implies once f not in Trash
inv13 C: always (all f : File | f in Trash implies once f not in Trash)
inv11 O: always Protected' = File
inv11 U: always (File - Protected) - Trash in Protected'
inv11 U: always File - (Protected + Trash) in Protected'
inv10 C: always Protected' = Protected
inv5 C: eventually (some f : File | f not in File')
inv6 C: always (all f : File | f in Trash implies always f in Trash)
inv9 C: always no Protected & Trash
inv11 C: always File - Protected in Protected'
inv12 B: eventually (some f : File-Trash | f in Trash implies always f in Trash)
inv12 B: eventually (some f : File-Trash | f in Trash' implies always f in Trash)
inv12 B: eventually (some f : File-Trash | f in Trash' implies always f in Trash')
inv14 S: always (f : Protected | f in Trash implies after f not in Protected)
inv14 C: always (all f : Protected | f in Trash implies after f not in Protected)
inv8 T: all f1, f2 : link | some f1.link
inv8 S: all : f1, f2 : File | f1 -> f2 in link implies eventually f1 in Trash and f2 in Trash
inv8 S: all : f1, f2 : File | f1 -> f2 in link implies (eventually f1 in Trash and f2 in Trash)
inv8 S: all : f1, f2 : File | f1 -> f2 in link implies eventually f1 in Trash and f2 in Trash
inv8 B: all f1, f2 : File | f1 -> f2 in link implies eventually f1 in Trash and f2 in Trash
inv8 T: all f1, f2 : File | f1 -> f2 in link implies eventually f1 in Trash and f2 in Trash and f1 -> f2 in Trash
inv8 T: 0	all f1, f2 : File | f1 -> f2 in link implies eventually f1 in Trash and f2 in Trash and f1 -> f2 in Trash
inv8 T: 0	all f1, f2 : File | f1 -> f2 in link implies eventually (f1 in Trash and f2 in Trash and f1 -> f2 in Trash)
inv8 T: all f1, f2 : File | f1 -> f2 in link implies eventually (f1 in Trash and f2 in Trash and f1 -> f2 in Trash)
inv8 T: all f1, f2 : File | f1 -> f2 in link implies eventually (f1 in Trash and f2 in Trash and f1 -> f2 in Trash)
inv8 T: all f1, f2 : File | f1 -> f2 in link implies eventually (f1 in Trash and f2 in Trash and f1 -> f2 in Trash)

