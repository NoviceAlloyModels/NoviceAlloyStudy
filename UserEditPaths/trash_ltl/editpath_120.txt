NA H: THEME UPDATE
inv1 S: no Trash,	no Protected
inv1 C: no Trash and no Protected
inv2 U: after some File
inv2 B: some File releases no File
inv2 C: no File and after some File
inv3 C: always some File
inv4 O: some f : File | eventually f in Trash
inv4 T: eventually Trash
inv4 C: eventually some Trash
inv3 C: always some File
inv4 C: eventually some Trash
inv5 B: some f : File | eventually some File - f
inv5 O: some f : File | eventually File = File - f
inv5 O: some f : File | eventually File' = File - f
inv5 O: some f : File | eventually f not in File
inv5 O: some f : File | eventually File' = File - f
inv5 O: eventually (some f : File |  File' = File - f)
inv5 C: eventually (some f : File | after f not in File)
inv6 T: (always Trash) releases (File in Trash)
inv6 T: (always Trash) releases some (File in Trash)
inv6 C: always (Trash in Trash')
inv7 C: eventually some Protected
inv8 T: eventually (link in Trash)
inv8 T: eventually (some x,y : File | x->y in Trash)
inv8 B: eventually (some x : File | x.link in Trash)
inv8 B: eventually (File.link in Trash)
inv8 T: eventually (File<:link in Trash)
inv8 B: eventually (File.link in Trash)
inv8 T: eventually (File:>link in Trash)
inv8 B: eventually (File.link in Trash)
inv8 B: eventually (always File.link in Trash)
inv8 B: eventually (File.link in Trash)
inv8 B: eventually (File.link in Trash)
inv8 B: eventually (some x,y : File | x->y in link implies x in Trash and y in Trash)
inv8 B: eventually (some x,y : File | x->y in link implies (x in Trash and y in Trash))
inv8 S: eventually (some f : File | f.link implies f in Trash))
inv8 S: eventually (some f : File | some f.link implies f in Trash))
inv8 B: eventually (some f : File | some f.link implies f in Trash)
inv8 B: eventually (all f : File | some f.link implies f in Trash)
inv8 B: always (some f : File | some f.link implies eventually f in Trash)
inv8 C: always (all f : File | some f.link implies eventually f in Trash)
inv9 T: always no Protected in Trash
inv9 T: always (no Protected in Trash)
inv9 B: always (Protected not in Trash)
inv9 T: always Protected & Trash
inv9 C: always no Protected & Trash
inv10 U: Protected' = Protected
inv10 U: Protected = Protected
inv10 U: Protected' = Protected
inv10 C: always Protected' = Protected
inv11 B: after (all f : File | f in Protected)
inv11 B: after File in Protected
inv11 U: after ((File & Protected) in Protected)
inv11 U: always after ((File & Protected) in Protected)
inv11 B: always after ((File - Protected) in Protected)
inv11 O: always ((File - Protected) in Protected)
inv11 B: after ((File - Protected) in Protected)
inv11 B: always after ((File - Protected) in Protected)
inv11 B: always (after ((File - Protected) in Protected))
inv11 C: always ( ((File - Protected) in Protected'))
inv11 S: always ( ((File - Protected) in after Protected))
inv11 C: always ((File - Protected) in Protected')
inv12 C: eventually (some f : File | eventually always f in Trash)
inv13 C: always (all f : File | f in Trash implies once f not in Trash)
inv14 C: always (all f : File | f in Protected & Trash implies f not in Protected')
inv15 S: always (all f : File | f after eventually f in Trash)
inv15 S: always (all f : File | f eventually f in Trash)
inv15 S: always (all f : File | f eventually f in Trash)
inv15 C: always (all f : File | eventually f in Trash)
inv15 C: always (all f : File | eventually f in Trash)
inv16 T: always (historically Protected)
inv16 T: (historically Protected)
inv16 T: (historically Protected)
inv16 B: (all f : File | historically f in Protected)
inv16 O: always (all f : File | historically f in Protected)
inv16 C: always (all f : Protected | historically f in Protected)
inv17 U: always (all f : Trash | f not in Trash')
inv17 C: always (all f : Trash | after f not in File)
inv18 U: always (all f : Protected | f not in Protected implies f in Trash)
inv18 O: always (all f : File | f in Protected triggered f in Trash)
inv18 O: always (all f : File | f in Protected releases f in Trash)
inv18 C: always (all f : Protected | f not in Protected' implies f in Trash)
inv18 C: always (all f : Protected | f not in Protected' implies f in Trash)
inv19 S: always (all f : Protected | )
inv18 C: always (all f : Protected | f not in Protected' implies f in Trash)
inv18 C: always (all f : Protected | f in Trash releases f in Protected)
inv19 U: always (all f : Protected | f in Trash until f in Protected)
inv19 C: always (all f : Protected | f in Protected until f in Trash)

