NA H: THEME UPDATE
inv1 C: no (Trash+Protected)
inv2 S: no Files
inv2 U: no File
inv2 U: historically no File
inv2 U: historically no File until some File
inv2 U: no File until some File
inv2 U: no File until some File'
inv3 C: always some File
inv4 T: eventually some File in Trash
inv4 C: eventually some Trash
inv5 O: some f : File | eventually f not in File'
inv5 C: eventually some f : File |  f not in File'
inv6 B: always some f:File | f in Trash implies always f in Trash
inv6 B: always some f:File | f in Trash implies always f in Trash'
inv6 B: always some f:File | (f in Trash) implies (always f in Trash')
inv6 U: always some Trash implies (always some Trash')
inv6 T: always some Trash implies (always some Trash in Trash')
inv6 U: always some Trash implies (always Trash in Trash')
inv6 C: always (some Trash implies (always Trash in Trash') )
inv1 C: no (Trash+Protected)
inv3 C: always some File
inv2 U: no File until some File'
inv2 U: historically no File until some File'
inv2 U: historically no File
inv2 U: historically no File until some File
inv4 C: eventually some Trash
inv5 C: eventually some f : File |  f not in File'
inv7 C: eventually some Protected
inv6 C: always all f : File |  f in Trash implies always f in Trash
inv8 S: some f:File | f in Link implies eventually f in Trash
inv8 C: always all f:File | some f.link implies eventually f in Trash
inv9 B: always Protected not in Trash
inv9 C: always (Trash-Protected) = Trash
inv10 T: always Protected implies Protected'
inv10 T: always (Protected implies Protected')
inv10 C: always Protected = Protected'
inv11 C: always all f:File | (f not in Protected) implies (f in Protected')
inv12 U: eventually some f:File | f in Trash implies always f in Trash
inv12 U: eventually some f:File | f in Trash implies always f in Trash
inv12 U: eventually some f:File | f in Trash'
inv12 U: eventually some f:File | f in Trash' implies always f in Trash'
inv12 U: eventually some f:File | f in Trash implies always f in Trash'
inv12 U: eventually some f:File | ((f not in Trash)and(f in Trash')) implies always f in Trash'
inv12 T: eventually some f:File | ((f not in Trash)+(f in Trash')) implies always f in Trash'
inv12 B: some f:File | ((f not in Trash)and(f in Trash')) implies always f in Trash'
inv13 C: all f:File | f in Trash implies once f not in Trash
inv14 U: all f:File | ((f in Protected) and (f in Trash)) implies f not in Protected'
inv14 U: all f:File | (f in Protected & Trash) implies f not in Protected'
inv14 C: always all f:File | (f in Protected & Trash) implies f not in Protected'
inv15 U: all f:File | eventually f in Trash
inv15 C: always all f:File | eventually f in Trash
inv16 U: all f:File| f in Protected implies historically f in Protected
inv16 C: always all f:File| f in Protected implies historically f in Protected
inv17 B: always some f:File | f in Trash implies f not in File'
inv17 C: always all f:File | f in Trash implies f not in File'
inv17 C: always all f:Trash | f not in File'
inv18 B: all p:Protected | p not in Protected' implies p in Trash'
inv18 B: always all p:Protected | p not in Protected' implies p in Trash'
inv18 B: always all p:Protected | p not in Protected' implies always p in Trash'
inv18 C: always all p:Protected | p not in Protected' implies  p in Trash
inv19 U: all p:Protected | p in Protected until p in Trash
inv19 C: always all p:Protected | p in Protected until p in Trash
inv20 C: always all f:Trash | f in Trash since (f not in Protected)

