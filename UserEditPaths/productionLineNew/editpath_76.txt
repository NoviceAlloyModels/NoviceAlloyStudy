NA H: THEME UPDATE
inv1 C: all w : Worker | w in Human iff w !in Robot
inv2 T: all w : Workstation | #w.workers > 0	all p : Worker | one w : Workstation | p in workstation.workers
inv2 C: all ws : Workstation | ws.workers != none	all w : Worker | one ws : Workstation | w in ws.workers
inv2 C: all ws : Workstation | ws.workers != none	all w : Worker | one ws : Workstation | w in ws.workers
inv3 C: all c : Component | #(c.workstation) = 1
inv4 C: all c : Component | c.parts != none	all m : Material | m.parts = none
inv5 C: all ws : Workstation | (ws.workers & Human) = none or (ws.workers & Robot) = none
inv6 U: all c : Component | c !in c.parts
inv6 C: all c : Component | c !in c.^parts
inv7 B: all c : Component | c.parts in Dangerous => c in Dangerous
inv7 C: all c : Component | (c.parts & Dangerous != none) => c in Dangerous
inv8 U: all ws : Workstation | (ws.workers & Dangerous) = none or (ws.workers & Human) = none
inv8 O: all c : Component & Dangerous | all ws : Workstation | no (ws.workers & Human)
inv8 C: all c : Component & Dangerous | all ws : c.workstation | no (ws.workers & Human)
inv9 U: all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws !in ws.succ	all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws !in ws.^succ	all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 O: all ws : Workstation | ws !in ws.*succ	all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws !in ws.*succ => ws = end	all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws !in ws.*succ => ws = begin	all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr.succ = none) => wr = end)
inv9 U: all ws : Workstation | ws.succ = none => ws = end	all ws : Workstation | succ.ws = none => ws = begin	all ws : Workstation | (ws.succ != none) => (all wr : Workstation | wr in ws.succ => (wr != ws) and (wr.succ = none) => wr = end)
inv9 S: all ws : Workstation | (ws.succ = none) => ws = end	all ws : Workstation | (ws.succ != none) => ws = begin	all ws : Workstation | (ws.succ != none) => all ws' : Workstation | ws' in ws.succ => (ws' != ws) implies (ws'.succ = none) => ws' = end
inv9 B: all ws : Workstation | (ws.succ = none) => ws = end	all ws : Workstation | (ws.succ != none) => ws = begin	all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.succ = none) => wr = end
inv9 B: all ws : Workstation | (ws.succ = none) => ws = end	all ws : Workstation | (ws.succ != none) => ws = begin	all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.*succ = none) => wr = end
inv9 B: all ws : Workstation | (ws.succ = none) => ws = end	all ws : Workstation | (ws.succ != none) => ws = begin	all ws : Workstation | (ws.succ != none) => all wr : Workstation | wr in ws.succ => (wr != ws) implies (wr.^succ = none) => wr = end
inv10 B: all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 B: all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 T: all c : Component | all p : Product | p & c.parts => (p.workstation.succ = c.workstation)
inv10 B: all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.workstation)
inv10 B: all c : Component | all p : Product | p in c.parts => (p.workstation.*succ = c.workstation)
inv10 O: all c : Component | all p : Product | p in c.parts => (p.workstation.*succ = c.*workstation)
inv10 O: all c : Component | all p : Product | p in c.parts => (p.workstation.succ = c.*workstation)
inv10 B: all c : Component | all p : Product | p in c.parts => c.workstation = begin
NA H: THEME UPDATE

