NA H: THEME UPDATE
inv1 C: all w : Worker | w in Human or w in Robot
inv2 C: all ws : Workstation | some ws.workers	all w : Worker | one workers.w
inv2 U: all ws : Workstation, w : Worker | some ws.workers && one workers.w
inv2 S: all ws : Workstation, w : Worker | some ws.workers & one workers.w
inv2 C: all ws : Workstation | some ws.workers	all w : Worker | one workers.w
inv3 C: all c : Component | one c.workstation
inv4 C: all c : Component | some c.parts	all m : Material | no m.parts
inv5 C: all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 not in Robot)
inv5 O: all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv5 O: all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv6 U: all c : Component | c not in c.parts
inv5 O: all ws : Workstation, w : Worker | w in ws.workers && w in Human implies (all w1 : Worker | w1 in ws.workers implies w1 in Human)
inv6 U: all c : Component | c not in c.parts
inv7 C: all c : Component, d : Dangerous | d in c.parts implies c in Dangerous
inv6 O: all c : Component | no parts.c
inv6 U: all p : Product | p in Component implies p not in p.parts
inv6 C: all c : Component | c not in c.^(parts)
inv8 S: all c : component, w : Worker | c in Dangerous implies c.workstation.workers not in Human
inv8 B: all c : Component, w : Worker | c in Dangerous implies c.workstation.workers not in Human
inv8 B: all c : Component | c in Dangerous implies c.workstation.workers not in Human
inv9 S: all e : entry | end in e.*(succs)
inv9 S: all b : begin | end in e.*(succs)
inv9 S: all b : begin | end in b.*(succs)
inv9 S: all ws : Workstation| ws in begin implies ws.*(succs) in end
inv9 S: all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succs) && ws1 in end)
inv9 U: all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succ) && ws1 in end)
inv9 U: all b: begin | end in b.*(succ)
inv9 B: all b: begin | end in b.^(succ)
inv9 B: all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.^(succ) && ws1 in end)
inv9 U: all ws : Workstation| ws in begin implies (some ws1 : Workstation | ws1 in ws.*(succ) && ws1 in end)
inv9 B: all ws : Workstation| ws in begin implies (some ws1 : end | end in ws.^(succ))
inv9 B: all ws : Workstation| ws in begin implies (some ws1 : end | end in ws1.^(succ))
inv9 U: all ws : Workstation| ws in begin implies (some ws1 : end | end in ws1.*(succ))
inv9 B: all ws : Workstation| ws in begin implies (some ws1 : end | end in ws.^(succ))
inv9 B: all ws : Workstation| ws in begin implies (some ws1 : end | ws1 in ws.^(succ))
inv9 U: all ws : Workstation| ws in begin implies (some ws1 : end | ws1 in ws.^(succ)) or ws in end
inv9 S: all ws : Workstation| ws in begin implies end in ws.^(succs)
inv9 U: all ws : Workstation| ws in begin implies end in ws.*(succ)
inv9 S: all ws : Workstation| ws in begin implies some succs.end
inv9 S: all ws : Workstation| ws in begin implies one ws.^(succs).end
inv9 T: all ws : Workstation| ws in begin implies one ws.^(succ).end
inv9 T: all ws : Workstation| ws in begin implies one ws.^(succ) in end
inv9 B: all ws : Workstation| ws in begin implies ws.^(succ) in end
inv9 B: all ws : Workstation | ws in begin implies some ws.^(succ) & end
inv9 U: all ws : Workstation | ws in begin implies some ws.*(succ) & end
inv9 T: all ws : Workstation | ws in begin implies ws.*(succ) & end
inv9 U: all ws : Workstation | ws in begin implies one (ws.*(succ) & end)
inv9 B: all ws : Workstation | one (ws.*(succ) & end) && one ws.*(succ) & begin
inv9 S: all ws : Workstation | (ws in begin implies some ws.*(succ) & end) && (ws in end implies no ws.succ
inv9 U: all ws : Workstation | (ws in begin implies some ws.*(succ) & end) && (ws in end implies no ws.succ)
inv9 U: all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end))
inv9 U: all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or begin = end
inv9 U: all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (ws in begin && ws in end)
inv9 U: all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (begin.succ in end)
inv9 U: all ws : Workstation | (ws in begin implies no succ.ws) or (ws in end implies no ws.succ) or (some (ws.*(succ) & end)) or (ws in begin and ws.succ in end)

