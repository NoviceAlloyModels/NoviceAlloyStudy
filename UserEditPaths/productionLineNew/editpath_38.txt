NA H: THEME UPDATE
inv1 S: all w : Worker : w in Human+Robot
inv1 C: all w : Worker | w in Human+Robot
inv2 T: all ws: Workstation, w: Worker | some w in ws.workers
inv2 T: all ws: Workstation, w: Worker | some w in ws.workers
inv1 C: all w : Worker | w in Human+Robot
inv3 E: 
inv2 U: all ws: Workstation | some w: Worker | w in ws.workers
inv1 C: Worker = Human + Robot
inv2 C: all w: Workstation | some w.workers	all w: Worker |one work : Workstation | w in work.workers
inv2 C: all w: Workstation | some w.workers	all w: Worker | one work : Workstation | w in work.workers
inv3 C: all c : Component | one c.workstation
inv3 C: all c : Component | one c.workstation
inv4 C: all c: Component | some c.parts	all m: Material | no m.parts
inv5 B: Human in Workstation.workers implies Robot not in Workstation.workers
inv5 B: Human in Workstation.workers implies Robot not in Workstation.workers	Robot in Workstation.workers implies Human not in Workstation.workers
inv5 B: all w: Workstation | (Robot in w.workers => Human not in w.workers) or (Human in w.workers => Robot not in w.workers)
inv5 T: all w: Workstation | (Robot in w.workers => no Human in w.workers) or (Human in w.workers => Robot not in w.workers)
inv5 C: all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 U: all c : Component | c not in c.parts
inv6 C: all c : Component | c not in c.^parts
inv8 S: aall c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv6 C: all c : Component | c not in c.^parts
inv7 B: all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
inv7 O: all p : Dangerous | all p2 : parts.p | p2 in Dangerous
inv8 C: all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv9 B: all w : Workstation | one w.succ
inv9 B: all w : Workstation | one w.^succ
inv9 S: all w : Workstation | w in begin => one w.succs
inv9 B: all w : Workstation | w in begin => one w.succ
inv9 U: all w : Workstation | w in begin => one w.succ && w in end => one succ.w
inv9 U: all w : Workstation | w in begin => lone w.succ && w in end => lone succ.w
inv9 T: all w : Workstation | w in begin => set w.succ && w in end => set succ.w
inv9 U: all w : Workstation | w in begin => lone w.^succ && w in end => lone ^succ.w
inv9 U: all w : Workstation | w in begin => lone w.succ && w in end => lone succ.w
inv9 U: all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w
inv9 S: all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w nad no w.succ
inv9 U: all w : Workstation | w in begin => lone w.succ or w in end => lone succ.w or w in begin+end => no succ.w and no w.succ

