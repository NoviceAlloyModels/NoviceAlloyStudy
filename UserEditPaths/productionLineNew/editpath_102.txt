NA H: THEME UPDATE
inv1 S: all w: Worker| x in Robot or x in Human
inv1 C: all x: Worker| x in Robot or x in Human
inv2 C: (all x: Workstation| some w: Worker| w in x.workers) && (all w: Worker| one workers.w)
inv3 S: all c: Component| some w: Workstation| w in c.component
inv3 U: all c: Component| some w: Workstation| w in c.workstation
inv3 T: all c: Component| some w: Workstation| one w in c.workstation
inv3 U: all c: Component| some w: Workstation| w in c.workstation
inv3 O: (all c: Component| some w: Workstation| w in c.workstation) && (all c: Component| one workstation.c)
inv3 C: all c: Component | one c.workstation
inv4 S: (all c: Components| some c.parts) && (all m: Material| no m.parts)
inv4 C: (all c: Component| some c.parts) && (all m: Material| no m.parts)
inv5 C: (all h: Human| all r: Robot| all w: Workstation| h in w.workers implies r not in w.workers)	&& (all h: Human| all r: Robot| all w: Workstation| r in w.workers implies h not in w.workers)
inv6 C: all c: Component| c not in c.^(parts)
inv7 B: all m: Material| some c: Component| (m in Dangerous && m in c.parts) implies c.parts in Dangerous
inv7 B: all m: Material| all c: Component| (m in Dangerous && m in c.parts) implies c.parts in Dangerous
inv8 B: all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous implies h not in w.workers
inv7 C: all c: Component| all x: c.parts| x in Dangerous implies c in Dangerous
inv8 B: all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous implies h not in w.workers
inv8 U: all c: Component| all h: Human| all w: Workstation| c.parts in Dangerous and w in workstation.c implies h not in w.workers
inv8 U: all c: Component| all h: Human| all w: Workstation| (c.parts in Dangerous and w in workstation.c) implies h not in w.workers
inv8 S: all c: w.parts | all h: Human| all w: Workstation| c in Dangerous implies h not in w.workers
inv8 U: all h: Human| all w: Workstation| all c: w.parts | c in Dangerous implies h not in w.workers
inv8 U: all c: Component| all h: Human| all w: Workstation| w in workstation.c and c.parts in Dangerous implies h not in w.workers
inv8 S: all c: Component & Dangerous| all x: c.workstation| no (w.workers and Human)
inv8 T: all c: Component & Dangerous| all x: c.workstation| no (x.workers and Human)
inv8 C: all c: Component & Dangerous| all x: c.workstation| no (x.workers & Human)
inv9 S: all w: Workstation | w.succ.size = 1 && w.workers.size >= 0
inv9 S: all w: Workstation | #w.succ = 1 && w.workers.size >= 0
inv9 B: all w: Workstation | #w.succ = 1 && lone w.workers
inv9 U: all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2
inv9 B: all w : Workstation | some succ[w] && some w.^succ
inv9 B: all w1, w2 : Workstation | w1 in w2.succ => w1.workers = w2.workers
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) => (w2 in succ.*succ)
inv9 T: all w1, w2 : Workstation | (w1 in succ.w2) implies (w2 in succ.*succ)
inv9 B: all ws : Workstation | #ws.succ= 1
inv9 B: all ws : Workstation | #ws.succ=0
inv9 B: all ws : Workstation | #ws.succ=1
inv9 U: all w1, w2: Workstation | (w1 in w2.succ && w2 in w1.succ) => w1 = w2
NA M: MOD BASE MODEL

