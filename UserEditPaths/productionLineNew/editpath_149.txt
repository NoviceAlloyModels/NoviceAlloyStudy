NA H: THEME UPDATE
inv1 O: all w : Worker | (w in Human or w in Robot) and no Human & Worker
inv1 B: all w : Worker | no Human & Worker
inv1 B: no Human & Worker
inv1 S: all w : Worker | (w in Human or w in Robot) and (w not in Human or w not in Robot
inv1 C: all w : Worker | (w in Human or w in Robot) and (w not in Human or w not in Robot)
inv2 T: all w : Workstation | some worker : Worker | worker in w.workers	and	all wo : Worker | workers.wo
inv2 U: all w : Workstation, v : Worker | some worker : Worker | worker in w.workers and some workers.v
inv2 S: all w : Workstation, v : Worker | some worker : Worker
inv2 S: all w : Workstation, v : Worker | some worker : Worker
inv3 C: all c : Component | one c.workstation
inv4 U: all c : Component | all m : Material | some c.parts and no m.parts
inv4 U: all c : Component | all m : Material |  no m.parts and some c.parts
inv4 U: all c : Component | all m : Material |  (no m.parts) and (some c.parts)
inv5 C: all w : Workstation | (some Human & w.workers) implies (no Robot & w.workers)
inv6 S: all c : Components | c not in c.parts
inv6 U: all c : Component | c not in c.parts
inv6 O: all c : Component | c not in c.*parts
inv6 C: all c : Component | c not in c.^parts
inv4 U: all c : Component, m : Material |  (no m.parts) and (some c.parts)
inv4 U: all c : Component, m : Material |  (no m.parts) and (some c.parts)
inv4 C: all c : Component | (some c.parts)	all m : Material | no m.parts
inv4 C: all c : Component | (some c.parts)	all m : Material | no m.parts		no Material.parts
inv2 S: all w : Workstation | some w.workers	all wo : Worker | one workers.w
inv2 C: all w : Workstation | some w.workers	all wo : Worker | one workers.wo
inv7 B: all c : Component | Dangerous in c.^parts implies c in Dangerous
inv7 B: all c : Component | Dangerous in c.*parts implies c in Dangerous
inv7 O: all c : Component | some (Dangerous & c.*parts) implies c in Dangerous
inv8 T: no (workers.Human and Dangerous.workstation)
inv8 T: no (workers.Human and Dangerous.workstation)
inv8 C: no (workers.Human & Dangerous.workstation)
inv8 C: no (workers.Human & Dangerous.workstation)
inv9 U: all w : Workstation | one w.succ or w in end
inv9 S: all w : Workstation-w | one w.succ or w in end
inv9 U: all w : Workstation | one w.succ or w in end or w = w
inv9 B: all w : Workstation | one w.succ
inv9 B: one Workstation.succ
inv9 U: all w: Workstation | w not in w.succ
inv9 U: all w: Workstation-end | (w not in w.succ) and one w.succ
inv9 U: all w: Workstation-end | (w not in w.^succ) and one w.succ
inv9 B: all w: Workstation-end | (w not in w.*succ) and one w.succ
inv9 S: all w: Workstationd | (w not in w.*succ)
inv9 O: all w: Workstation | (w not in w.*succ)
inv9 O: all w: Workstation | (w not in w.*succ)
inv9 U: all w: Workstation | (w not in w.^succ)
inv9 U: all w: Workstation | (w not in w.^succ) and (one w.succ or w in end)
inv9 S: all w: Workstation | (w not in w.^succ	no end.succ
inv9 U: all w: Workstation | (w not in w.^succ)	no end.succ
inv9 T: one Workstation.succ or end
inv9 B: one Workstation-end.succ
inv9 S: all w : Workstations | w not in w.^succs
inv9 S: all w : Workstation | w not in w.^succs
inv9 U: all w : Workstation | w not in w.^succ
inv9 U: all w : Workstation-end | (w not in w.^succ) and (one w.succ)	no end.succ	no succ.begin
inv9 O: all w : Workstation | (w not in w.^succ) and (one w.succ)	no end.succ	no succ.begin
inv9 S: all w: Workstation | one w.succ	all w, w': Workstation | w' in w.succ implies not w' in w.succ	one begin.succ	no end.succ
inv9 O: all w: Workstation | one w.succ	all w, v: Workstation | w' in w.succ implies not w' in w.succ	one begin.succ	no end.succ
inv9 O: all w: Workstation | one w.succ	all w, v: Workstation | v in w.succ implies not w in v.succ	one begin.succ	no end.succ
inv9 O: all w,v: Workstation | one w.succ and (w in v.*succ implies v not in w.*succ)		one begin.succ	no end.succ
inv9 O: all w,v: Workstation | one w.succ and (w in v.*succ implies v not in w.*succ)		one begin.succ iff some Workstation-begin	no end.succ

