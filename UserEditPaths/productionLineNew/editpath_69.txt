NA H: THEME UPDATE
inv1 S: Workers = Human + Robot
inv1 C: Worker = Human + Robot
inv2 U: all w: Workstation | some workers	all w: Worker | (one work : Workstation | w in work.workers)
inv3 E: 
inv2 C: all w: Workstation | some w.workers	all w: Worker | (one work : Workstation | w in work.workers)
inv3 C: all c: Component | one c.workstation
inv3 C: all c: Component | one c.workstation
inv4 C: all c: Component | some c.parts	all c: Material | no c.parts
inv5 U: all w: Workstation | no (w.workers & Human & Robot)
inv6 E: 
inv5 C: all w: Workstation | no (w.workers & Robot) or no (w.workers & Human)
inv6 U: all c: Component | not c in c.parts
inv6 O: all c: Component | not c in c.*parts
inv6 C: all c: Component | not c in c.^parts
inv7 B: all c: Component | Dangerous in c.^parts implies Dangerous in c
inv7 B: all c: Component | Dangerous in c.*parts implies Dangerous in c
inv7 B: all c: Component | Dangerous in c.^parts implies Dangerous in c
inv7 B: all c: Dangerous | Dangerous in c.^parts
inv7 B: all c: Component | Dangerous in c.^parts implies some c & Dangerous
inv7 B: all c: Component | Dangerous in c.^parts implies (some c & Dangerous)
inv8 O: all c: Component & Dangerous | all x : Workstation | no (x.workers & Human)
inv8 C: all c: Component & Dangerous | all x : c.workstation | no (x.workers & Human)
inv7 B: all c: Component | Dangerous in c.^parts implies (some c & Dangerous)
inv7 T: all c: Component | Dangerous in c.^parts implies (c & Dangerous)
inv7 B: all c: Component | Dangerous in c.^parts implies some (c & Dangerous)
inv7 B: all c: Component | Dangerous in c.^parts implies no (c & Dangerous)
inv7 B: all c: Component | Dangerous in c.^parts implies some (c & Dangerous & Component)
NA H: THEME UPDATE
inv2 C: all w : Worker | #(workers.w) = 1	all  wt : Workstation | #(wt.workers) > 0
inv4 C: all m : Material | no m.parts	all c : Component | some c.parts
inv4 C: all c : Component | some c.parts	all m : Material | no m.parts
inv4 C: all c : Component - Material | some c.parts	all m : Material | no m.parts
inv5 O: all  wt : Workstation | (wt.workers in Human) or (wt.workers in Robot)
inv5 O: all  wt : Workstation | (wt.workers in Human) or (wt.workers in Robot)
inv10 B: all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in *succ.(c.workstation))
inv9 C: all w : Workstation | w not in w.^succ	all w : Workstation | no w.succ => w in end	all w : Workstation | no succ.w => w in begin	all w : Workstation | (w not in end) => one w.succ
inv10 B: all c : Component | no c.^parts.workstation or ((c.^parts & Component).workstation not in *succ.(c.workstation))
inv8 B: all c : Component | c in Dangerous => c.workstation.workers not in Human

