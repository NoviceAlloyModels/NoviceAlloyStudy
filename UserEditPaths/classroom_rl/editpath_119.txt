NA H: THEME UPDATE
inv15 B: all p : Person | p.^(~Tutors) in Teacher
inv7 C: all c : Class | c in Teacher.Teaches
inv7 C: Class = Teacher.Teaches
inv12 B: all t : Teacher | some g : Group | t->g in (Class.Groups)
inv11 U: all c : Class | (some(c.Groups)) implies (some(c.(~Teaches)))
inv11 C: all c : Class | (some(c.Groups)) implies (some((c.(~Teaches) & Teacher)))
inv1 C: no (Person-Student)
inv2 C: no Teacher
inv3 C: (Student-Teacher) = Student
inv4 C: no ((Person-Student)-Teacher)
inv5 C: some (Teacher.Teaches)
inv6 C: all t : Teacher | some t.Teaches
inv7 C: Class = Teacher.Teaches
inv8 C: all t : Teacher | lone t.Teaches
inv9 C: all c : Class | lone ((c.~Teaches) & Teacher)
inv10 C: all c : Class, s : Student | some g : Group | c->s->g in Groups
inv11 C: all c : Class | (some(c.Groups)) implies (some((c.(~Teaches) & Teacher)))
inv13 C: (no (Person-Teacher).Tutors) and (no (Tutors.(Person-Student)))
inv14 E: 
inv15 B: all p : Person | p.^(~Tutors) in Teacher
inv15 B: all p : Person | p.Tutors in Teacher
inv15 B: all p : Person | p.^Tutors in Teacher
inv15 B: all p : Person | p.^(~Tutors) in Teacher
inv15 B: all p : Person | p.~(^Tutors) in Teacher
inv15 B: all p : Person | p.^(Tutors) in Teacher
inv15 T: all p : Person | some (p.^(Tutors).Teacher)
inv15 B: all p : Person | p.^(~Tutors) in Teacher
inv15 C: all p : Person | some (p.^(~Tutors) & Teacher)
inv12 O: all t : Teacher | some t.Groups
inv12 C: all t : Teacher | some t.Teaches.Groups
inv14 C: all c : Class, g : Group, p1, p2 : Person | (p1->c in Teaches and c->p2->g in Groups) implies (p1->p2 in Tutors)
inv14 C: all c : Class, g : Group, p1, p2 : Person | {	    (p1->c in Teaches and c->p2->g in Groups) implies (p1->p2 in Tutors)  	  }
inv14 U: all c : Class, g : Group, p1, p2 : Person | {	    ((p1 in Teacher) and (p1->c in Teaches) and (c->p2->g in Groups)) implies (p1->p2 in Tutors)  	  }
inv14 U: all c : Class, g : Group, p1 : Teacher, p2 : Student | {	    ((p1->c in Teaches) and (c->p2->g in Groups)) implies (p1->p2 in Tutors)  	  }
inv14 U: all c : Class, g : Group, t : Teacher, s : Student | {	    ((t->c in Teaches) and (c->s->g in Groups)) implies (t->s in Tutors)  	  }

