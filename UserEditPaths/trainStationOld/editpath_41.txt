NA H: THEME UPDATE
inv1 C: no Green
inv2 B: eventually some Green
inv2 B: always eventually some Green
inv2 C: all s : Signal | eventually s in Green
inv2 C: all s : Signal | eventually s in Green
inv2 O: eventually historically Green = Signal
inv2 O: eventually historically Signal in Green
inv2 O: historically eventually Signal in Green
inv2 C: all s : Signal | eventually s in Green
inv3 T: all t : Track | always t.pos
inv3 U: all t : Track | always lone t.pos
inv3 U: always all t : Track | always lone t.pos
inv3 U: always all t : Track | lone t.pos
inv3 S: always t : Track | lone pos.t
inv3 B: always all t : Track | lone pos.t
inv3 B: always pos.~pos in iden
inv3 U: always ~pos.pos in iden
inv3 U: always after ~pos.pos in iden
inv3 U: always ~pos.pos in iden
inv3 U: always ~pos.pos in iden
inv3 S: always ~pos.pos in iden and always all t : Train | lone t.pos
inv3 U: always ~pos.pos in iden and (always all t : Train | lone t.pos)
inv3 U: always ~pos.pos in iden and (always all t : Train | always lone t.pos)
inv3 T: always pos
inv3 S: always pos = after pos
inv3 S: always pos in after pos
inv3 S: always (pos = after pos)
inv3 S: always all t : Train | (t.pos = after t.pos)
inv3 S: always all t : Train | (t.pos = after t.pos)
inv3 S: always all t : Train | (t.pos in after t.pos)
inv3 S: always all t : Train | t.pos in after t.pos
inv2 C: all s : Signal | eventually s in Green
inv3 U: always all t : Train | lone t.pos
inv3 S: False releases always pos
inv3 S: false releases always pos
inv3 S: no releases always pos
inv3 S: no releases pos
inv3 S: always pos = after pos
inv3 U: always (Train->Track - pos) + pos = (Train->Track - pos) + pos
inv3 U: always ((Train->Track - pos) + pos) = ((Train->Track - pos) + pos)
inv3 U: always pos = pos
inv3 S: always pos = pos and no pos in no pos
inv3 T: always pos = pos and (Train->Track not in pos) = (Train->Track not in pos)
inv3 U: always pos = pos and (Train.pos not in Track implies always Train.pos not in Track)
inv3 U: always pos = pos and (all t : Train | t.pos not in Track implies always t.pos not in Track)
inv3 U: always pos = pos and (all t : (Train - pos.Track) | t.pos not in Track implies always t.pos not in Track)
inv3 U: always pos = pos and (always all t : (Train - pos.Track) | t.pos not in Track implies always t.pos not in Track)
inv3 C: always pos' = pos
inv3 U: always ^pos = pos
inv3 C: always pos' = pos
inv4 B: always prox.~prox in iden
inv4 B: always ~prox.prox in iden
inv4 C: always pos.~pos in iden
inv5 U: always all t : Train | (t.pos).prox = Exit releases t.pos.prox in Track
inv5 B: always all t : Train | some t1 : Track | t.pos = t1 implies after t.pos in (t1.prox + t1)

