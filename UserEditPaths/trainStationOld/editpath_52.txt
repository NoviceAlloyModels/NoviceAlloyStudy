NA H: THEME UPDATE
prop1 S: Signal in Red
prop1 C: no s:Green|   s  in Signal
prop1 O: no Signal
prop1 C: no (Signal &Green)
prop2 O: eventually no (Signal-Green)
prop2 C: all s:Signal | eventually s in Green
prop2 O: eventually Signal in (Signal&Green)
prop2 O: eventually (Signal in (Signal&Green))
prop2 O: eventually (Signal in Green)
prop2 C: all s:Signal | eventually s in Green
prop3 U: Train.pos' =Train.pos
prop3 U: always Train.pos' =Train.pos
prop3 C: always all t:Train | t.pos' =t.pos
prop4 U: all disj t1,t2:Train | no (t1.pos &t2.pos)
prop4 U: all disj t1,t2:Train | some (t1.pos &t2.pos ) implies lone ((t1.pos &t2.pos ).signal &Green)
prop4 U: all disj t1,t2:Train | some (t1.pos &t2.pos ) implies lone ((t1.pos &t2.pos ).signal &Green) or no (t1.pos &t2.pos )
prop6 U: all s:Signal | (s in Green implies s not in Green') or (s not in Green implies s in Green')
prop4 U: all disj t1,t2:Train | no (t1.pos & t2.pos )
prop4 C: always all disj t1,t2:Train | no (t1.pos & t2.pos )
prop6 U: always (all s:Signal | (s in Green implies s not in Green') or (s not in Green implies s in Green'))
prop6 S: always (all s:Signal | (s in Green implies s not in Green') )
prop6 S: always (all s:Green | after  s not in Green )
prop6 S: always (all s:Signals |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green'))  )
prop6 S: always (all s:Signals |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green')) )
prop6 S: always (all s:Signals |  (s in Green implies always (no (s &  Green'))) )
prop6 S: always (all s:Signals |  (s in Green implies always (no (s &  Green') )
prop6 S: always (all s:Signals |  s in Green implies always (no (s &  Green') ))
prop6 S: always (all s:Signals | s in Green implies  (no (s &  Green') ))
prop6 S: always (all s:Signals | s in Green )
prop6 S: always (all s:Signals |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green'))) )
prop6 S: always (all s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green'))) )
prop6 S: always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or no (s & Green) implies always (some (s &  Green'))) )
prop6 B: always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or	no (s & Green) implies always (some (s &  Green')))
prop6 B: always (some s:Signal |  (s in Green implies always (no (s &  Green'))) or	no (s & Green) implies always (some (s &  Green')))
prop6 U: always (all s:Signal |  (s in Green implies always (no (s &  Green'))) or	no (s & Green) implies always (some (s &  Green')))
prop6 U: always (all s:Signal |  (s in Green implies eventually (no (s &  Green'))) or	no (s & Green) implies  eventually (some (s &  Green')))
prop6 U: always (all s:Signal | always (s in Green) implies eventually (no (s &  Green'))  or	always (no (s & Green)) implies  eventually (some (s &  Green')))
prop6 U: always (all s:Signal |  (s in Green) implies eventually (s not in Green ) or	s not in Green implies  eventually (s in  Green) )
prop6 U: always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or	always s not in Green implies  eventually (s in  Green) )
prop3 C: always all t:Train | t.pos' = t.pos
prop6 U: always (all s:Signal | always (s in Green) implies eventually (s not in Green ) or	always s not in Green implies  eventually (s in  Green) )

