NA H: THEME UPDATE
prop1 O: before no (Signal & Green)
prop1 O: before no Green
prop1 C: historically no Green
prop2 O: eventually Signal = Green
prop2 O: eventually all s:Signal | s in Green
prop2 C: all s:Signal | eventually s in Green
prop3 S: always (all t:Trains, k:Tracks | some t.pos :> k implies after t.pos :> k)
prop3 T: always (all t:Train, k:Track | some t.pos :> k implies after t.pos :> k)
prop3 T: always (all t:Train, k:Track | some t.pos :> k implies after t.pos :> k)
prop3 T: always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
NA H: THEME UPDATE
prop3 T: always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
prop3 T: always (all t:Train, k:Track | some t->k in pos implies after t->k in pos)
prop1 C: historically no Green
prop2 C: all s:Signal | eventually s in Green
prop3 S: always( all t:Train, some tk:Track | t->tk in pos implies after t->tk in pos)
prop3 B: always( all t:Train | some tk:Track | t->tk in pos implies after t->tk in pos)
prop3 U: always( all t:Train | some t.pos implies after t.pos' = t.pos)
prop3 U: always( all t:Train | some t.pos implies t.pos' = t.pos)
prop3 C: always( all t:Train | t.pos' = t.pos)
prop4 U: all tk : Track | lone pos.tk
prop4 U: all tk : Track | lone pos.tk :> Train
prop4 U: all tk : Track | lone Train <: pos.tk
prop4 U: all tk : Track | lone pos.tk
prop4 C: always( all tk : Track | lone pos.tk )
prop5 S: all t:Train {	t.pos in Exit => Train' = Train - t	t.pos not in Exit => t.pos' = one (t.pos).prox	}
prop5 S: all t:Train {	t.pos in Exit => Train' = Train - t	t.pos not in Exit => t.pos' = one (t.pos).prox	}
prop5 S: all t:Train {	t.pos in Exit => no t.pos'	t.pos not in Exit => t.pos' = one (t.pos).prox	}
prop5 S: all t:Train {	t.pos in Exit => no t.pos'	t.pos not in Exit => t.pos' = some ((t.pos).prox)	}
prop5 B: all t:Train {	t.pos in Exit => no t.pos'	t.pos not in Exit => some tk : ((t.pos).prox) | t.pos' = tk	}
prop5 B: all t:Train {	t.pos in Exit => no t.pos'	t.pos not in Exit => {	one tk:((t.pos).prox) | t.pos' = tk	}	}
prop5 B: all t:Train {	t.pos in Exit => no t.pos'	t.pos in (Track - Exit) => {	one tk:((t.pos).prox) | t.pos' = tk	}	}
prop5 B: all t:Train {	t.pos in Exit => t.pos' = t.pos - t.pos	t.pos in (Track - Exit) => {	one tk:((t.pos).prox) | t.pos' = tk	}	}
prop5 B: all t:Train {	some t.pos =>{	t.pos in Exit => t.pos' = t.pos - t.pos	t.pos in (Track - Exit) => {	one tk:((t.pos).prox) | t.pos' = tk	}	}	}
prop5 B: all t:Train {	t.pos in Exit => Train' = Train - t	t.pos in (Track - Exit) => {	one tk:((t.pos).prox) | t.pos' = tk	}	}
prop5 B: all t:Train {	some (t.pos & Exit) => t.pos' = (t.pos) - (t.pos)		}
prop5 S: all t:Train {	some tk | t.pos {	(tk in Exit) => t.pos' = t.pos - tk	(tk not in Exit) => some tk2: tk.prox | t.pos' = tk2	}	}
prop5 S: all t:Train {	some tk | t.pos {	(tk in Exit) => t.pos' = t.pos - tk	(tk not in Exit) => some tk2: tk.prox | t.pos' = tk2	}	}
prop5 B: all t:Train {	some tk:t.pos {	(tk in Exit) => t.pos' = t.pos - tk	(tk not in Exit) => some tk2: tk.prox | t.pos' = tk2	}	}
prop5 O: always(	all t:Train {	some tk:t.pos {	(tk in Exit) => t.pos' = t.pos - tk	(tk not in Exit) => some tk2: tk.prox | t.pos' = tk2	}	}	)
prop5 S: always(	all t:Train {	some (t.pos & Exit) => t.pos' = t.pos - tk	some (t.pos && (Track-Exit)) => some tk2: tk.prox | t.pos' = tk2	}	)
prop5 T: always(	all t:Train {	some (t.pos & Exit) => no t.pos'	some (t.pos && (Track-Exit)) => some tk2: t.pos | t.pos' = tk2	}	)
prop5 O: always(	all t:Train {	some (t.pos & Exit) => no t.pos'	some (t.pos & (Track-Exit)) => some tk2: t.pos | t.pos' = tk2	}	)
prop5 O: always(	all t:Train {	some (t.pos & Exit) => no t.pos'	some (t.pos & (Track-Exit)) => some tk2: (t.pos).prox { t.pos' = tk2 }	}	)
prop5 O: always(	all t:Train {	some (t.pos & Exit) => no t.pos'	some (t.pos & (Track-Exit)) => some tk2: (t.pos).prox | t.pos' = tk2	}	)
prop5 B: always(	all t:Train {	t.pos in Exit => no t.pos'	t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2	}	)
prop5 B: always(	all t:Train {	t.pos in Exit => no t.pos'	t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2	no t.pos => t.pos' = t.pos	}	)
prop5 E: 
prop6 O: always ( all s : Signal | (s in Green implies s' not in Green) and (s not in Green implies s' in Green) )
prop6 U: always ( all s : Signal | (s in Green implies s' not in Green) or (s not in Green implies s' in Green) )
prop6 S: always ( all s : Signal { s in Green => s' not in Green}	s not in Green => s' in Green)
prop6 O: always ( all s : Signal { s in Green => s' not in Green	s not in Green => s' in Green	}	)
prop6 O: always ( all s : Signal { s in Green => Green' = Green - s	s not in Green => Green' = Green + s	}	)
prop6 C: always ( all s : Signal | (s in Green implies eventually s not in Green) and (s not in Green implies eventually s in Green) )
prop5 B: all t:Train{	always( t.pos in Exit implies eventually no t.pos)	always( t.pos in Entry implies eventually t.pos in t.pos.prox)	}
prop7 B: all t:Train | t.pos in (Entry + Exit) implies eventually t.pos not in (Entry + Exit)
prop7 U: all t:Train | some t.pos :> (Entry+Exit) implies eventually no t.pos :> (Entry+Exit)
prop7 U: always ( all t:Train | some t.pos :> (Entry+Exit) implies eventually no t.pos :> (Entry+Exit) )
prop7 C: always ( all t:Train | some t.pos :> Track implies eventually no t.pos :> Track )
prop5 B: always(	all t:Train{	no t.pos :> Exit => eventually(t.pos in t.pos.prox)	some t.pos :> Exit => eventually(no t.pos)	}	)
prop5 B: always( all t:Train | some t.pos :> Exit implies eventually (no t.pos) )	always( all t:Train | some t.pos :> (Track-Exit) implies eventually (t.pos in t.pos.prox) )
prop8 O: always ( all t:Train | no t.pos.signal :> Green implies t.pos' = t.pos )
prop8 B: always ( all t:Train | some s:Signal | (some (t.prox).signal :> s) and (s not in Green) implies t.pos' = t.pos)
prop8 U: always ( all t:Train, s:Signal | some (t.prox).signal :> s implies (s in Green) releases (t.pos' = t.pos) )
prop8 O: always ( all t:Train, s:Signal | some (t.pos).signal :> s implies (s in Green) releases (t.pos' = t.pos) )
prop8 B: always ( all t:Train | some t.pos.prox.signal implies (t.pos.prox.signal in Green) releases (t.pos' = t.pos) )
prop8 U: always ( all tk:Track | some tk.signal implies (tk.signal in Green) releases ( #(pos.tk') = #(pos.tk) ) )
prop8 U: always ( all tk:Track | some tk.signal implies (tk.signal in Green) releases ( #pos.tk' = #pos.tk ) )
prop8 U: always ( all tk:Track | some tk.signal and (tk.signal in Green) implies ( #pos.tk' = #pos.tk ) )
prop8 U: always ( all tk:Track | some tk.signal and (tk.signal in Green) implies ( #(pos.tk') = #(pos.tk) ) )
prop8 B: all t:Train | some t.pos.signal and t.pos.signal in Green implies t.pos' = t.pos
prop8 B: always ( all t:Train | some t.pos.signal and t.pos.signal in Green implies t.pos' = t.pos )
prop8 C: always ( all t:Train | some t.pos.signal and (t.pos.signal not in Green) implies t.pos' = t.pos )
prop9 B: always ( all t:Train | no t.pos until t.pos in Entry )
prop9 T: always ( all t:Train | (no t.pos) until (t.pos :> Entry) )
prop9 O: always ( all t:Train | (no t.pos) until (some t.pos :> Entry) )
prop9 B: always ( all t:Train | historically no t.pos and eventually t.pos in Entry )
prop9 U: always ( all t:Train | historically no t.pos implies eventually t.pos in Entry )
prop9 B: always ( all t:Train | (no t.pos) triggered (eventually t.pos in Entry) )
prop9 B: always ( all t:Train | (no t.pos) triggered (t.pos in Entry) )
prop9 B: always ( all t:Train | (no t.pos) triggered (t.pos' in Entry) )
prop9 S: always ( all t:Train | no t.pos implies eventually (t.pos in Entry)
prop9 U: always ( all t:Train | no t.pos implies eventually (t.pos in Entry) )
prop9 B: always ( all t:Train | eventually (no t.pos until t.pos in Entry))
prop9 B: always ( all t:Train | some tk:Entry | eventually (no t.pos until t.pos in tk))
prop9 B: always ( all t:Train | eventually (no t.pos until t.pos in Entry))
prop9 B: always ( all t:Train | some Entry implies eventually (no t.pos until t.pos in Entry))
prop9 B: always ( all t:Train | eventually t.pos in Entry )
prop9 B: always ( all t:Train | some Track implies eventually t.pos in Entry )
prop9 B: always ( all t:Train | some Track implies eventually (some t.pos :> Entry) )
prop9 B: all t:Train | eventually (t.pos in Entry and before no t.pos)
prop9 B: all t:Train | some tk:Entry | eventually (t->tk in pos and before no t.pos)
prop9 T: all t:Train | some tk:Entry | (no t->tk in pos) implies eventually (t->tk in pos and before no t.pos)
prop9 U: all t:Train | some tk:Entry | t->tk not in pos implies eventually (t->tk in pos and before no t.pos)
prop9 U: all t:Train | some tk:Entry | (t.pos not in Entry) implies eventually (t->tk in pos and before no t.pos)
prop9 U: all t:Train | some tk:Entry | (t->tk not in pos) implies eventually (t->tk in pos)
prop9 U: all t:Train | some tk:Entry | (t.pos not in Entry) implies eventually (t->tk in pos and before no t.pos)
prop10 U: all j:Junction | lone ( (prox.j).signal & Green )
prop10 C: always ( all j:Junction | lone ( (prox.j).signal & Green ) )
prop11 O: always (all t:Train | t.pos in Track implies historically t.pos in Entry)
prop11 O: always ( all t:Train | some t.pos :> Track implies historically ( t.pos in Entry) )
prop11 O: always ( all t:Train | some t.pos :> (Track-Entry) implies historically ( t.pos in Entry) )
prop11 O: always ( all t:Train | some t.pos implies historically some t.pos :> Entry)
prop11 T: always ( all t:Train | some t.pos implies once t.pos :> Entry)
prop11 C: always ( all t:Train | some t.pos implies once some t.pos :> Entry)
prop11 O: always ( all t:Train| some t.pos and historically t.pos in Entry)
prop11 C: always ( all t:Train | some t.pos implies once some t.pos :> Entry)
prop11 U: always ( all t:Train| some t.pos implies once t.pos in Entry)
NA H: THEME UPDATE

