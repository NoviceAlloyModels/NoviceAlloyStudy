NA H: THEME UPDATE
inv1 S: Signal = Red
inv1 S: signal = Red
inv1 S: Track.signal = Red
inv1 S: Track.signal = Red
inv1 S: Track.signal = Red
inv1 C: no Green
inv2 O: all g : Signal | eventually g = Green
inv2 O: all g : Signal |always( eventually g = Green )
inv2 O: all g : Track.signal | eventually g = Green
inv2 O: all g : Track.signal | no (g & Green) implies eventually g = Green
inv2 O: always ( all g : Signal | eventually g=Green)
inv2 S: always ( all s : Track.signal | eventually g=Green)
inv2 O: always ( all s : Track.signal | eventually s=Green)
inv2 O: always ( all s : Signal | eventually s=Green)
inv2 O: all s : Signal | eventually s=Green
inv3 B: no prox
inv3 U: no Train.prox
inv3 B: all t : Train , x : t.pos | no x.prox
inv3 B: no Track.prox
inv3 B: no prox.Track.prox
inv3 B: always(no Track.prox)
inv3 B: always no prox
inv3 B: no Entry.prox and no Exit.prox and no Track.prox
inv3 B: no prox
inv3 B: always (no prox)
inv4 S: lone
inv4 S: lone
inv3 B: always (no Track.prox and no prox.Track)
inv3 O: always (no Track.*prox)
inv3 B: always (no Track.^prox)
inv3 B: always (no Track.prox)
inv3 O: no prox and no Entry and no Exit
inv4 B: lone Train.pos
inv4 B: always(lone Train.pos)
inv4 U: always(lone pos.Train)
inv4 S: all t : Train | always (lone.t)
inv4 U: all t : Train | always (lone t.pos)
inv4 U: all t : Train | always (lone pos.t)
inv4 U: all disj t : Train | always (lone pos.t)
inv4 O: all t1,t2 : Train | always no (t1.pos & t2.pos)
inv4 O: all t1,t2 : Train | always ( no (t1.pos & t2.pos) and t1.prox not in t2.pos)
inv4 O: all t1,t2 : Train | always  no (t1.pos & t2.pos)
inv4 O: all t1,t2 : Train | always  no (t1.pos & t2.pos)
inv5 B: all t:Train | t.pos' in t.pos.prox

