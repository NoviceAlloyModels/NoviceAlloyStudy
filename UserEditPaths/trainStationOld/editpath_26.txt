NA H: THEME UPDATE
prop1 C: no Green
prop2 T: eventually Green
prop2 U: eventually Green in Signal
prop2 O: always all s: Signal | eventually s in Green
prop2 O: always all s: Signal | eventually s = Green
prop2 O: always all s: Signal | eventually Signal = Green
prop2 O: always all s: Signal | eventually always s in Green
prop2 O: eventually all s: Signal | s in Green
prop3 S: always all t: Train | always t in one Track
prop3 O: always all t: Train | always t in Track
prop3 U: always all t: Train | always t not in Track
prop3 U: always all t: Train | t not in Track
prop3 B: always all t: Train | some tr: Track | t in tr implies t' in tr
prop3 B: always all t: Train | some tr: Track | t in pos.tr implies t' in pos.tr
prop3 B: always all t: Train | one tr: Track | t in pos.tr implies t' in pos.tr
prop3 B: always all t: Train | one tr: Track | always t in pos.tr implies t' in pos.tr
prop3 B: always all t: Train | one tr: Track | always (t in pos.tr implies t' in pos.tr)
prop3 B: always all t: Train | always one tr: Track | always (t in pos.tr implies t' in pos.tr)
prop3 T: always Train.pos.Track
prop3 T: always Train.pos
prop4 T: always one Train in Track
prop4 S: always one Train in one Track
prop4 T: always one Train.pos in Track
prop2 S: eventually all Signal in Green
prop2 O: eventually all s: Signal | s in Green
prop2 O: always all s: Signal | eventually s in Green
prop2 O: always eventually all s: Signal | s in Green
prop2 O: always all s: Signal | eventually s in Green
prop2 C: all s: Signal | eventually s in Green
prop4 T: always all t: Train | always one Train in Track
prop4 T: always all t: Train | always one Train.pos in Track
prop4 B: always all t: Train | always lone Train.pos
prop4 B: always lone Train.pos
prop4 O: always lone pos.Track
prop4 O: always one pos.Track
prop4 T: always one pos.Track in Track
prop3 T: all t: Train | always t.pos
prop3 U: always all t: Train | t in t.pos implies after t in t.pos
prop3 U: always all t: Train | always t in t.pos implies after t in t.pos
prop3 S: always all t: Train | always t in one t.pos implies after t in t.pos
prop3 B: always all t: Train | always one t.pos implies after t in t.pos
prop3 B: always all t: Train | always one t.pos implies after t' in t.pos
prop3 T: always all t: Train | always t.pos implies after t' in t.pos
prop3 O: always all t: Train | always t' in t.pos
prop3 U: always all t: Train | always after t.pos = t.pos
prop3 S: always all t: Train | always t.pos = after t.pos
prop3 S: all t: Train | always t.pos = after t.pos
prop3 S: always all t: Train | t.pos = after t.pos
prop3 T: always all t: Train | t.pos implies after t.pos
prop3 B: always all t: Train |one tr: Track | t.pos in tr implies after t.pos in tr
prop3 O: always all t: Train | always t in Entry
prop3 O: always Train in Entry
prop3 O: Train in Entry
prop3 B: always Train.pos in Entry
prop3 S: always Train.pos in one Track implies always after Train.pos in one Track
prop3 S: always Train.pos in one Track implies after Train.pos in one Track
prop3 U: always Train.pos' = Train.pos
prop3 C: always pos' = pos
prop6 B: always all s: Signal | s in Green implies s' not in Green
prop6 U: always all s: Signal | always s in Green implies s' not in Green
prop6 O: always all s: Signal | always s != s'
prop6 O: all s: Signal | always s != s'
prop6 O: always Signal != Signal'
prop4 T: always all t1, t2: Train | some tr1,tr2: Track | t1.pos.tr1 and t2.pos.tr2 implies t1=t2
prop4 B: always all t1, t2: Train | some tr1,tr2: Track | t1.pos in tr1 and t2.pos in tr1 implies t1=t2
prop4 B: always all t1, t2: Train | some tr1: Track | t1.pos in tr1 and t2.pos in tr1 implies t1=t2
prop4 B: always all t1, t2: Train | some tr1: Track | always (t1.pos in tr1 and t2.pos in tr1 implies t1=t2)
prop4 B: always all t1, t2: Train | lone tr1: Track | always (t1.pos in tr1 and t2.pos in tr1 implies t1=t2)
prop4 T: always all t1, t2: Train | lone tr1: Track | always t1.pos.tr1 & t2.pos.tr2 in none
prop4 T: always all t1, t2: Train | lone tr1: Track | always no t1.pos.tr1 & t2.pos.tr2
prop4 T: always all t1, t2: Train | lone tr1: Track | always no t1.pos.tr1 & t2.pos.tr1
prop4 T: always all t1, t2: Train | lone tr1: Track | always (no t1.pos.tr1 & t2.pos.tr1)
prop4 B: always all t1, t2: Train | always lone tr1: Track | always (no t1.pos & t2.pos)
prop4 O: always all t1, t2: Train | always (no t1.pos & t2.pos)
prop4 T: always all t1, t2: Train | always t1.pos & t2.pos implies t1=t2
prop4 T: always all t1, t2: Train | always (t1.pos & t2.pos implies t1=t2)
prop6 O: always Signal != Signal'
prop6 O: always some s : Signal | eventually s' != s
prop6 O: always some s : Signal | always s' != s
prop6 O: always one s : Signal | always s' != s
prop6 O: always all s : Signal | always s' != s
prop6 O: always all s : Signal | eventually s' != s
prop6 O: always all s : Signal | always eventually s' != s
prop6 B: always all s : Signal | s in Green implies s' not in Green
prop6 B: always all s : Signal | always (s in Green implies s' not in Green)
prop6 B: always all s : Signal | always (s in Green implies s' not in Green) or	always (s not in Green implies s' in Green)
prop6 B: always all s : Signal | always (s in Green implies s' not in Green) or	always (s not in Green implies s' in Green)
prop6 U: always all s : Signal | (s in Green implies s' not in Green) or	(s not in Green implies s' in Green)
prop6 B: always one s : Signal | (s in Green implies s' not in Green) or	(s not in Green implies s' in Green)
prop6 B: always some s : Signal | (s in Green implies s' not in Green) or	(s not in Green implies s' in Green)
prop6 B: all s : Signal | always (s in Green implies s' not in Green) or	(s not in Green implies s' in Green)
prop6 B: all s : Signal | always (s in Green implies s' not in Green) or always	(s not in Green implies s' in Green)
prop6 S: all s : Signal | always s!= s'
prop6 S: all s : Signal | always s != s'
prop6 O: all s : Signal | always s != s'
prop6 O: all s : Signal | always s != s'

