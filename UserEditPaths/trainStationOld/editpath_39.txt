NA H: THEME UPDATE
inv1 C: no Green
inv2 O: eventually (all s:Signal | s in Green)
inv2 C: all s:Signal | eventually s in Green
inv3 S: always ()
inv3 S: always ()
inv4 C: always (pos.(~pos) in iden)
inv4 C: always (pos.(~pos) in iden)
inv3 C: always (all t:Train | (t.pos)' = t.pos)
inv9 U: eventually (all t:Train | t.pos in Entry)
inv9 U: all t:Train | eventually t.pos in Entry
inv9 U: all t:Train | some t.pos implies eventually t.pos in Entry
inv9 B: all t:Train | some t.pos and eventually t.pos in Entry
inv10 C: always (all j:Junction | lone ((prox.j).signal&Green))
inv11 S: always (t:Train | one t.pos implies once t.pos in Entry)
inv11 U: always (all t:Train | one t.pos implies once t.pos in Entry)
inv11 U: all t:Train | always one t.pos implies once t.pos in Entry
inv15 B: all t:Train | eventually (t.pos)' != t.pos
inv15 U: all t:Train | one t.pos implies eventually (t.pos)' != t.pos
inv15 U: all t:Train | always one t.pos implies eventually (t.pos)' != t.pos
inv14 S: always (all t:Train )
inv4 C: always (pos.(~pos) in iden)
inv5 S: always (all t:pos.Track | (t.pos)' in t.pos.next
inv7 C: always (all t:pos.Track | eventually no t.pos)
inv7 C: always (all t:pos.Track | eventually no t.pos)
inv7 C: always (all t:pos.Track | eventually no t.pos)
inv6 C: always (all s:Signal | (s in Green implies eventually s not in Green) and (s not in Green implies eventually s in Green))
inv8 S: always ( all t:pos.Track.(signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green
inv8 T: always ( all t:pos.Track.(signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv8 T: always ( all t:pos.Track.(Signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv8 T: always ( all t:pos.Track.signal.(Signal-Green) | t.pos=(t.pos)' until t.pos.signal in Green )
inv9 U: eventually (all t:Train | t.pos in Entry)
inv11 U: always (all t:pos.Track | once t.pos in Entry)
inv11 U: always (all t:pos.Track | once (t.pos in Entry))
inv15 B: always eventually (some t:Train | (t.pos)' != t.pos)
inv15 B: always eventually (some t:pos.Track | (t.pos)' != t.pos)
inv15 B: always eventually (some t:Train | (t.pos)' != t.pos)
inv16 U: always (all t:pos.Exit | (some t.pos) since t.pos in Entry)

