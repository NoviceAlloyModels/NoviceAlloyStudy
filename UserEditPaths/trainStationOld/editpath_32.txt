NA H: THEME UPDATE
inv1 C: no Green
inv2 O: eventually Green = Signal
inv2 O: always(eventually Green = Signal)
inv2 O: eventually Green = Signal
inv2 O: eventually(historically Green = Signal)
inv2 C: all s: Signal | eventually s in Green
inv3 S: always all t: Train | after t.pois = t.pos
inv3 U: always all t: Train | after t.pos = t.pos
inv3 T: always pos
inv3 T: always all t: Train, tk: Track | t.pos.tk in pos implies after t.pos.tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies after t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos or t->tk not in pos implies always t->tk not in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | one t.pos and t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos and t->tk not in pos implies always t->tk in pos
inv3 O: always all t: Train, tk: Track | t->tk in pos or t->tk not in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos or t->tk not in pos implies always t->tk not in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos
inv3 C: always all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 U: always all t: Train, tk: Track | t->tk in pos implies always t->tk in pos and t->tk not in pos implies always t->tk not in pos
inv3 C: always all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 U: always(Train->Track in pos implies always Train->Track in pos)
inv3 U: always (Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos)
inv3 U: always ((Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos))
inv3 U: Train->Track in pos implies always Train->Track in pos and Train->Track not in pos implies always Train->Track not in pos
inv3 U: (Train->Track in pos implies always Train->Track in pos) and (Train->Track not in pos implies always Train->Track not in pos)
inv3 C: all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 C: all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv3 S: all (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv3 S: all (Train->Track in pos implies always Train->Track in pos) and (no (Train->Track) & pos implies always no (Train->Track) & pos)
inv3 S: all (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv3 U: (Train->Track in pos implies always Train->Track in pos) and (no Train->Track & pos implies always no Train->Track & pos)
inv4 T: all t: Train | always t.prox.~t.prox in iden
inv4 T: all t: Train | always (t.prox.~t.prox) in iden
inv4 B: all t: Train | always prox.~prox in iden
inv4 B: always prox.~prox in iden
inv4 B: always ~prox.prox in iden
inv4 B: always prox.~prox in iden
inv3 C: all t: Train, tk: Track | (t->tk in pos implies always t->tk in pos) and (t->tk not in pos implies always t->tk not in pos)
inv4 B: always prox.~prox in iden
inv3 U: always prox' = prox
inv3 U: always prox = prox'
inv3 U: always prox' = prox
inv3 C: always pos' = pos
inv4 C: always pos.~pos in iden
inv5 U: all t: Train | after t.pos in t.pos + t.pos.prox
inv5 B: always all t: Train | t.pos' in t.pos + t.pos.prox
inv5 B: always all t: Train | t not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 U: always all t: Train | t.prox not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 U: always all t: Train | t.pos not in Exit implies t.pos' in t.pos + t.pos.prox
inv5 B: always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox
inv5 B: always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox
inv4 C: always pos.~pos in iden

