NA H: THEME UPDATE
inv1 B: File in Trash
inv1 T: no File in Trash
inv1 T: ~(File in Trash)
inv1 C: no Trash
inv2 C: File in Trash
inv2 C: all f:File | f in Trash
inv1 C: all f:File | f not in Trash
inv1 C: no Trash
inv3 C: some f:File | f in Trash
inv3 C: some Trash
inv4 B: Protected not in Trash
inv4 T: (File in Protected) not in Trash
inv4 C: all p:Protected | p not in Trash
inv4 T: ~(Protected in Trash)
inv4 B: Protected not in Trash
inv5 T: all p:~(Protected) | p in Trash
inv5 S: all f:File | (f not in Protected) implies p in Trash
inv5 C: all f:File | (f not in Protected) implies f in Trash
inv6 S: file.file
inv6 T: link
inv6 S: all f1:File, some f2:File | (f1 -> f2) in link
inv4 T: no Protected in Trash
inv4 C: all p:Protected | p not in Trash
inv4 C: all p:Protected | p not in Trash
inv7 S: all l:Link | link not in Trash
inv4 C: all p:Protected | p not in Trash
inv7 T: no link in Trash
inv8 C: no link
inv9 T: ~(link.link)
inv9 C: no link.link
inv9 C: no link.link
inv10 T: all f:File | (f in link and link in Trash) implies f in Trash
inv5 C: all f:File | (f not in Protected) implies f in Trash
inv9 C: no link.link
inv10 T: link.Trash no Link
inv6 T: File.link
inv10 T: link.Trash no Link
inv10 E: 
inv6 U: File.link in File
inv6 U: File.link in File
inv10 E: 
inv9 C: no link.link
inv6 E: 
inv6 U: File.link in File
inv6 S: all f1:File, lone f2:File | (f1 -> f2) in link
inv6 S: all f1:File, lone f2:File | f1 -> f2 in link
inv6 T: all f1,f2,f3:File | f1 -> f3 and f2 -> f3 in link implies f1 = f2
inv6 T: all f1,f2,f3:File | (f1 -> f3 and f2 -> f3 in link) implies f1 = f2
inv6 T: all f1,f2,f3:File | ((f1 -> f3 and f2 -> f3) in link) implies f1 = f2
inv6 T: all f1,f2,f3:File | ((f1 -> f3 in link and f2 -> f3) in link) implies f1 = f2
inv6 B: all f1,f2,f3:File | ((f1 -> f3 in link and f2 -> f3 in link)) implies f1 = f2
inv6 C: all f1,f2,f3:File | ((f1 -> f2 in link and f1 -> f3 in link)) implies f2 = f3
inv6 T: all f1,f2,f3:File | ((f1 -> f2 and f1 -> f3) in link) implies f2 = f3
inv6 T: all f1,f2,f3:File | (f1 -> f2 and f1 -> f3) in link implies f2 = f3
inv6 C: all f1,f2,f3:File | (f1 -> f2 in link and f1 -> f3 in link) implies f2 = f3
inv6 C: all f1,f2,f3:File | f1 -> f2 in link and f1 -> f3 in link implies f2 = f3
inv7 T: no link in Trash
inv7 S: all f1,f2:File | f1 -> f2 in Link
inv7 S: all f1,f2:File | f1 -> f2 in Link implies f1 not in Trash
inv7 S: all f:File | isLinked[f] implies f not in Trash	}		/* There are no links. */		pred isLinked(f1:File){	all f2:File | f1 -> f2 in Link
inv7 S: all f:File | isLinked[f] implies f not in Trash	}		pred isLinked(f1:File){	all f2:File | f1 -> f2 in Link
inv7 U: all f:File | isLinked[f] implies f not in Trash	}		pred isLinked(f1:File){	all f2:File | f1 -> f2 in link
NA H: THEME UPDATE
inv1 C: no Trash
inv1 C: no Trash
NA H: THEME UPDATE

