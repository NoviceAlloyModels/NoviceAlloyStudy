NA H: THEME UPDATE
inv1 T: all t: Track | some t.Entry && some t.Exit
inv1 T: all t: Track | some t in Entry && some t in Exit
inv1 B: all t: Track | t in Entry || t in Exit
inv1 S: all t: Track |  in Entry || t in Exit
inv1 S: all t: Track |  in Entry || t in Exit
inv2 B: all t, t1: Track | some s: Signal | s in t.signals && s in t1.signals => t=t1
inv2 C: all s: Signal | one signals.s
inv3 U: all t: Track | t in Exit => no t.succs
inv3 U: all e: Exit | no e.succs
inv3 U: all t: Track | no t.succs => t in Exit
inv4 U: all t: Track | no succs.t => t in Entry
inv4 U: all t: Track | no succs.t => t in Entry
inv4 U: all t: Entry | no succs.t
inv4 C: all t: Track | no succs.t <=> t in Entry
inv3 C: all t: Track | no t.succs <=> t in Exit
inv5 S: all t: Track | some succs.t <=> t in Junctions
inv5 B: all t: Track | some succs.t <=> t in Junction
inv5 T: all t, t1, t2: Track | t1 in succs.t && t2.succs.t <=> t in Junction
inv5 T: all t, t1, t2: Track | t1 in succs.t && t2.succs.t => t in Junction
inv5 B: all t, t1, t2: Track | t1 in succs.t && t2 in succs.t => t in Junction
inv5 B: all t, t1, t2: Track | t1 in succs.t && t2 in succs.t <=> t in Junction
inv5 B: all t, t1, t2: Track | t1 in succs.t && t2 in succs.t => t in Junction
inv5 B: all t: Track | some succs.t <=> t in Junction
inv5 B: all t: Track | lone succs.t <=> t in Junction
inv5 B: all t: Track |some x: Track | some succs.t && x in succs.t <=> t in Junction
inv5 C: all t : Track | #succs.t > 1 <=> t in Junction
inv6 C: all t: Entry | some s: Speed | s in t.signals
inv7 C: all t: Track | t not in t.^succs
inv8 S: all t: Entry |
inv8 S: all t: Entry |
inv8 S: all t: Entry |
inv9 S: all t: Track | some x: Junction | no (t.succ & Junction) <=> no (t.signals & Speed)
inv9 B: all t: Track | some x: Junction | no (t.succs & Junction) <=> no (t.signals & Speed)
inv9 B: all t: Track | no (t.succs & Junction) <=> no (t.signals & Speed)
inv9 B: all t: Track | no (t.succs & Junction) => no (t.signals & Speed)
inv9 B: all t: Track | all x: t.succs | x not in Junction => no (t.signals & Speed)
inv10 B: all t: Track | some x: Junction | x in t.succs => (some s: Semaphore | s in t.signals)
inv10 B: all t: Track | some x: Junction | x in t.succs => some s: Semaphore | s in t.signals
inv10 B: all t: Track | some x: Junction | x in t.succs <=> some s: Semaphore | s in t.signals
inv10 O: all t: Track | some (t.succs & Junction) <=> some (t.signals & Semaphore)
inv9 B: all t: Track | no (t.succs & Junction) <=> no (t.signals & Speed)
inv9 B: all t: Track | no (t.^succs & Junction) <=> no (t.signals & Speed)
inv9 B: all t: Track | no (t.succs & Junction) => no (t.signals & Speed)
inv9 O: all t: Track | no (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 O: all t: Track | no (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 O: all t: Track | some (t.succs & Junction) <=> some (t.signals & Semaphore)
inv8 B: all t: Entry | some x: Exit | x in t.^succs
inv8 B: all t: Entry | some x: Exit | x in t.succs
inv8 B: all t: Entry | some (t.succs & Exit)
inv8 B: all t: Entry | some (t.^succs & Exit)
inv8 B: all t: Entry | some (t.succs & Exit)
inv8 B: all t: Entry | all x: t.succs | some (x.succs & Exit)
inv1 B: all t: Track | #t.succs in Entry && #t.succs in Exit
inv1 B: all t: Track | #(t.succs & Entry) > 1 && #(t.succs & Exit) > 1
inv1 B: all t: Track | some (t.succs & Entry) && some (t.succs & Exit)
inv1 B: all t: Track | some (t & Entry) && some (t.succs & Exit)
inv1 B: all t: Track | some (succs.t & Entry) && some (t.succs & Exit)
inv1 B: all t: Track | #(succs.t & Entry)>=1 && #(t.succs & Exit)>=1
inv1 C: some ex: Exit, e: Entry | e in Track && ex in Track
inv1 C: some ex: Exit, e: Entry | e in Track && ex in Track
inv8 B: all t: Entry | all x: t.succs | some (x.succs & Exit)
inv8 S: all t: Entry | all x: t.succs | #(x.succs & Exit) == #Exit
inv8 S: all t: Entry | all x: t.succs | #(x.^succs & Exit) == #Exit
inv8 S: all t: Entry | #(t.^succs & Exit) == #Exit
inv8 S: all t: Entry | #(t.succs & Exit) == #Exit
inv8 O: all t: Entry | #(t.succs & Exit) = #Exit
inv8 O: all t: Entry | #(t.^succs & Exit) = #Exit
inv8 O: all t: Entry | all e: Exit | e in t.^succs
inv8 O: all t: Entry | all e: Exit | e in t.succs
inv8 O: all t: Entry | all e: Exit | e in t.^succs && t in e.^succs
inv8 C: all t: Entry | all e: Exit | e in t.*succs
inv9 B: all t: Track | no (t.*succs & Junction) <=> no (t.signals & Semaphore)
inv9 O: all t: Track | no (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 B: all t: Track | no (t.^succs & Junction) <=> no (t.signals & Semaphore)
inv9 U: all t: Track | no (t.^succs & Junction) => no (t.signals & Semaphore)
inv9 C: all t: Track | no (t.succs & Junction) => no (t.signals & Semaphore)
inv9 C: all t: Track | no (t.succs & Junction) => no (t.signals & Semaphore)
inv9 U: all t: Track | no (t.^succs & Junction) => no (t.signals & Semaphore)
inv9 C: all t: Track | no (t.succs & Junction) => no (t.signals & Semaphore)
inv1 C: some ex: Exit, e: Entry | e in Track && ex in Track
inv2 C: all s: Signal | one signals.s
inv3 C: all t: Track | no t.succs <=> t in Exit
inv4 C: all t: Track | no succs.t <=> t in Entry
inv5 C: all t : Track | #succs.t > 1 <=> t in Junction
inv6 C: all t: Entry | some s: Speed | s in t.signals
inv7 C: all t: Track | t not in t.^succs
inv8 C: all t: Entry | all e: Exit | e in t.*succs
NA H: THEME UPDATE

