NA H: THEME UPDATE
inv1 C: some Exit and some Entry
inv2 S: one signal -> some Track
inv2 T: Signal one -> some Track
inv2 S: one Signal -> some Track
inv2 T: one Signal in Track
inv2 T: one Signal in Track
inv2 S: one Signal in one Track
inv2 B: all t1,t2: Track | no (t1.signals & t2.signals)
inv2 T: all t1,t2: Track | no ((t1.signals and t1.succs.^signals) & (t2.signals and t2.succs.^signals))
inv2 T: all t1,t2: Track | no ((t1.signals and t1.^succs.signals) & (t2.signals and t2.^succs.signals))
inv2 B: all t1,t2: Track | no ((t1.signals + t1.^succs.signals) & (t2.signals + t2.^succs.signals))
inv2 B: all t1,t2: Track | lone ((t1.signals + t1.^succs.signals) & (t2.signals + t2.^succs.signals))
inv2 S: all t1, t2: Tracks,	s: Signal |	((s in t1.(^succs.signals)) and (s in t2.(^succs.signals)) implies t1 = t2
inv2 S: all t1, t2: Tracks,	s: Signal |	((s in t1.(^succs.signals)) and (s in t2.(^succs.signals))) implies t1 = t2
inv2 B: all t1, t2: Track,	s: Signal |	((s in t1.(^succs.signals)) and (s in t2.(^succs.signals))) implies t1 = t2
inv2 O: all t1, t2: Track,	s: Signal |	((s in t1.(^succs.signals)) and (s in t2.(^succs.signals))) implies t1 = t2	Signal in Track
inv2 O: all t1, t2: Track,	s: Signal |	((s in t1.(^succs.signals)) and (s in t2.(^succs.signals))) implies t1 = t2	all s: Signal | s in Track
inv2 B: all s: Signal | one Track
inv2 C: signals in Track one -> set Signal
inv2 S: all s: Signal | s in one Track
inv2 U: all s: Signal | some t: Track | s in t.signals
inv2 S: all s: Signal | some t: Track | s in one t.signals
inv2 C: all s: Signal | one t: Track | s in t.signals
inv2 C: all s: Signal | one t: Track | s in t.signals
inv2 C: all s: Signal | one t: Track | s in t.signals
inv3 B: all t: (Track - Junction - Entry) | no t.succs
inv3 C: Track - succs.Track = Exit
inv4 S: Track - Tracks.succs = Entry
inv4 C: Track - Track.succs = Entry
inv5 S: all t: Tracks | some t.succs = Junction
inv5 T: all t: Track | some t.succs = Junction
inv5 S: Junction = some succ.Tracks
inv5 S: Junction = Tracks - Exit - Entry
inv5 B: Junction = Track - Exit - Entry
inv5 S: all j: Junction | all t: Track | j in some t.succs
inv5 C: Junction = { t : Track | not lone succs.t  }
inv5 B: Junction = { t : Track | some succs.t  }
inv5 C: Junction = { t : Track | not lone succs.t  }
inv6 T: all e: Entry | one e.Speed
inv6 T: all e: Entry | one e.signals.Speed
inv6 T: all e: Entry | some Speed in e.signals
inv6 C: Entry in signals.Speed
inv7 S: Track.^succ & Track.^succ = id
inv7 S: Track.^succs & Track.^succs = id
inv7 T: Track.^succs & Track.^succs = iden
inv7 B: lone (Track.^succs & Track.^succs)
inv7 O: no (*succs)
inv7 C: no (iden & ^succs)
inv8 C: Entry->Exit in *succs
inv9 B: Junction.succs not in Semaphore.signals
inv9 S: (Tracks - Junction.succs) not in Semaphore.signals
inv9 B: (Track - Junction.succs) not in Semaphore.signals
inv9 B: (Track - succs.Junction) not in signals.Semaphore
inv9 B: succs.Junction in signals.Semaphore
NA H: THEME UPDATE

