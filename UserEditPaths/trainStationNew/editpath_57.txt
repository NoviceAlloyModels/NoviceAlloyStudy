NA H: THEME UPDATE
inv1 O: one Entry and one Exit
inv1 C: some Entry and some Exit
inv1 O: one Entry and one Exit
inv1 C: some Entry and some Exit
inv2 C: all s : Signal | one signals.s
inv3 U: no Exit.succs
inv3 U: all e : Exit | no e.succs
inv3 B: no succs.Exit
inv3 U: no Exit.succs
inv3 E: 
inv2 C: all s : Signal | one signals.s
inv3 E: 
inv3 B: some Exit.succs
inv3 B: one Exit.succs
inv3 U: no Exit.succs
inv3 B: all t1,t2 : Track | t1->t2 in succs implies t2 not in Exit	no Exit.succs
inv3 U: all t1,t2 : Track | t1->t2 in succs implies t1 not in Exit	no Exit.succs
inv3 U: all t1,t2 : Track | t1->t2 in succs implies t1 not in Exit
inv3 U: all t1,t2 : Track | t1->t2 in succs implies t1 not in Exit
inv3 E: 
inv3 U: no Exit.succs
inv3 E: 
inv3 U: no Exit.succs
inv3 C: Track - succs.Track = Exit
inv4 B: Track - Track.succs = Exit
inv4 C: Track - Track.succs = Entry
inv5 S: Junctions = Track.{t1,t2 : Track | t1->t2 in succs and no (lone succs.t1)}
inv5 S: Junctions = Track.{t1,t2 : Track | t1->t2 in succs and no (lone succs.t1)}
inv5 S: Junctions = Track.{t1,t2 : Track | t1->t2 in succs and no (lone succs.t1)}
inv5 T: Junction = Track.{t1,t2 : Track | t1->t2 in succs and no (lone succs.t1)}
inv5 T: Junction = Track.{t1,t2 : Track | t1->t2 in succs and no (lone succs.t1)}
inv5 T: Junction = Track.{t1,t2 : Track | t1->t2 in succs and (no (lone succs.t1))}
inv5 T: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and (no (lone succs.t1))}
inv5 B: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs }
inv5 B: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and ((lone succs.t1))}
inv5 B: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and ((lone succs.t1))}
inv5 B: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and (( not lone succs.t1))}
inv5 C: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and (( not lone succs.t2))}
inv5 C: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and (not lone succs.t2)}
inv5 C: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and not lone succs.t2}
inv5 C: Junction = Track.{t1 : Track, t2 : Track | t1->t2 in succs and (not lone succs.t2)}
inv6 T: some (Entry.signals).Speed
inv6 T: some (Entry.signals).Speed
inv6 T: some (Entry.signals).Speed
inv6 T: some (Entry.signals).Speed
inv6 T: some (Entry.signals).Speed
inv6 B: some (Entry.signals) & Speed
inv6 B: some ((Entry.signals) & Speed)
inv6 B: one ((Entry.signals) & Speed)
inv6 B: some ((Entry.signals) & Speed)
inv6 C: Entry in signals.Speed
inv6 C: Entry in signals.Speed
inv7 C: no ^succs & iden
inv8 B: Exit in Entry.^succs
inv8 B: Exit in Entry.*succs
inv8 O: all e : Entry | Exit in e.^succs
inv8 C: all e : Entry | Exit in e.*succs
inv9 E: 
inv9 C: all t : Track | t in Track - succs.Junction implies no t.signals & Semaphore
inv9 C: all t : Track | t in Track - succs.Junction implies no t.signals & Semaphore
inv10 O: all t : Track | t in succs.Junction implies one t.signals & Semaphore
inv10 O: all t : Track | t in succs.Junction implies one (t.signals & Semaphore)
inv10 C: all t : Track | t in succs.Junction implies some (t.signals & Semaphore)
inv10 O: all t : Track | t in succs.Junction implies one (t.signals & Semaphore)
inv10 C: all t : Track | t in succs.Junction implies some (t.signals & Semaphore)

