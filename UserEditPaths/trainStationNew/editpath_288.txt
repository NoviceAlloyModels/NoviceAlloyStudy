NA H: THEME UPDATE
inv4 B: all e:Entry| no e.^(succs)
inv4 U: all e:Entry| no succs.e
inv4 T: all e:Entry| no succs.^(e)
inv4 U: all e:Entry| no succs.e
inv1 B: lone Entry	lone Exit
inv1 C: some Entry	some Exit
inv2 C: all s:Signal| one signals.s
inv3 U: no Exit.succs
inv3 U: all x:Exit| no x.succs
inv3 U: all x:Exit| no x.^(succs)
inv3 U: no Exit.succs
inv3 B: all x:Track| x in Entry => no x.succs
inv3 U: all x:Track| x in Exit => no x.succs
inv3 B: all x:Track - (Junction + Entry)| no x.succs
inv3 U: all x:Exit - (Junction + Entry)| no x.succs
inv3 U: all x:Exit | no x.succs
inv3 U: all x:Track | x in Exit => no x.succs
inv3 B: no Entry & Junction	no Exit & Entry	no Exit & Junction	all x:Track | x in Exit => no x.succs
inv3 B: no Entry & Junction	no Entry & Junction & Exit	no Exit & Entry	no Exit & Junction	all x:Track | x in Exit => no x.succs
inv7 C: all x: Track | x not in x.^(succs)
inv3 B: all x:Track | x in Exit => one x.succs
inv3 U: all x:Track | x in Exit => no x.succs
inv3 S: all x:Track | no x.succ => x in Exit
inv3 U: all x:Track | no x.succs => x in Exit
inv3 T: all x:Track | no x.succs => x is Exit
inv3 T: all x:Track | no x.succs => x & Exit
inv3 S: all t:Track | t in Exit <=> no t.succ
inv3 C: all t:Track | t in Exit <=> no t.succs
inv3 U: all t:Track | t in Exit => no t.succs
inv3 C: all t:Track | t in Exit <=> no t.succs
inv5 S: all x:Track | some succs.x <=> x in Junctions
inv5 B: all x:Track | some succs.x <=> x in Junction
inv5 U: all x:Track |x in Junction => some succs.x
inv5 B: all x:Track |x in Junction <=> some succs.x
inv5 C: all x:Track |x in Junction <=> #(succs.x)>1
inv6 B: all x:Track | one x.signals
inv6 B: all x:Track | x in Entry => one x.signals
inv6 B: all x:Track | x in Entry <=> one x.signals
inv6 O: all x:Track | x in Entry <=> one (x.signals & Speed)
inv6 O: all x:Track | x in Entry => one (x.signals & Speed)
inv6 C: all x:Track | x in Entry => some (x.signals & Speed)
inv6 O: all x:Track | x in Entry <=> some (x.signals & Speed)
inv6 C: all x:Track | x in Entry => some (x.signals & Speed)
inv8 B: Exit in Entry.^(succs)
inv8 B: Exit in Entry.*(succs)
inv8 B: Exit in Entry.*(succs)
inv8 B: Exit in Entry.^(succs)
inv8 T: all x:Track | x in Exit => Entry.^(succs)
inv8 T: all x:Track | x in Exit => Entry.^(succs)
inv8 B: all x:Track | x in Exit => x in Entry.^(succs)
inv8 B: Exit in Entry.^(succs) or Exit = Entry
inv8 B: Exit in Entry.^(succs)
inv8 B: all x :Track | x in Entry => one (Exit & x.^(succs))
inv8 B: all x :Track | x in Entry <=> one (Exit & x.^(succs))
inv8 B: all x :Track | x in Entry => one (Exit & x.^(succs))
inv8 B: all x :Track | x in Entry => lone (Exit & x.^(succs))
inv8 B: all x :Track | x in Entry => one (Exit & x.^(succs))
inv8 B: all x :Track | x in Entry => some (Exit & x.^(succs))

