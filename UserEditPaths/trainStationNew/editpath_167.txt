NA H: THEME UPDATE
inv1 O: some Entry	one Exit
inv1 S: some Entry, Exit
inv1 S: some Entry, Exit
inv1 C: some Entry	some Exit
inv2 U: all s: Signal | s in Track.signals
inv2 U: all s: Signal, t1, t2: Track | s in t1.signals and s in t2.signals => t1=t2
inv2 U: all s: Signal | s in Track.signals
inv2 C: all s: Signal | one t: Track | s in t.signals
inv3 S: no Exit.succ
inv3 U: no Exit.succs
inv3 U: all t: Track | no t.succs => t in Exit
inv3 U: all t: Track | t in Exit => no t.succs
inv3 C: all t: Track | no t.succs <=> t in Exit
inv4 T: all t: Track | t not in Track.succs <=> Entry
inv4 T: all t: Track | t not in Track.succs <=> Entry
inv4 T: all t: Track | t not in Track.succs => Entry
inv4 C: all t: Track | t not in Track.succs <=> t in Entry
inv5 B: all t1, t2, t3: Track | t1 in t2.succs && t1 in t3.succs <=> t1 in Junction
inv5 S: all t: Track | t in Track.succs <=> t1 in Junction
inv5 B: all t: Track | t in Track.succs <=> t in Junction
inv5 O: all t, t1: Track | t in (Track-t1).succs && t in t1.succs <=> t in Junction
inv5 B: all disj t, t1: Track | t in (Track-t1).succs && t in t1.succs <=> t in Junction
inv5 O: all t, t1: Track | t!=t1 && t in (Track-t1).succs && t in t1.succs <=> t in Junction
inv5 O: all t, t1: Track | t in (Track-t1).succs && t in t1.succs <=> t in Junction
inv5 T: all t, t1: Track | some t in Track.succs <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv5 B: all disj t, t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv5 B: all t: Track | t in Track.succs <=> t in Junction
inv5 U: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 <=> t in Junction
inv5 T: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2!=t <=> t in Junction
inv5 B: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 && t1!=t && t2!=t <=> t in Junction
inv5 B: all t, t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 && t1!=t && t2!=t <=> t in Junction
inv5 O: all t, t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 <=> t in Junction
inv5 B: all t, t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 && t1!=t && t2!=t <=> t in Junction
inv5 B: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs && t1!=t2 && t1!=t && t2!=t <=> t in Junction
inv5 B: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs  <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs  <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | (t in t1.succs && t in t2.succs) || (t1 in t.succs && t2 in t.succs) <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs => t in Junction
inv5 B: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs => t in Junction
inv5 B: all t: Track | some t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv6 O: all t: Track | one s: Speed | s in t.signals
inv6 O: all e: Entry | one s: Speed | s in e.signals
inv6 C: all e: Entry | some s: Speed | s in e.signals
inv6 C: all e: Entry | some s: Speed | s in e.signals
inv7 B: all t: Track | t in t.^(succs)
inv7 C: all t: Track | t not in t.^(succs)
inv8 B: all e: Entry | some s: Exit | s in e.^(succs)
inv8 B: all e: Entry | some s: Exit | s in e.*(succs)
inv8 B: all e: Entry | some s: Exit | s in e.*(succs)
inv8 C: all e: Entry, s: Exit | s in e.*(succs)
inv9 B: all t: Track | some j: Junction | j not in t.succs => Semaphore not in t.signals
inv9 B: all t: Track | some j: Junction | j not in t.succs <=> Semaphore not in t.signals
inv9 B: all t: Track | Junction not in t.succs => Semaphore not in t.signals
inv9 T: all t: Track | some j: Junction | j not in t.succs => one Semaphore not in t.signals
inv9 B: all t: Track | some j: Junction | j not in t.succs => one s: Semaphore | s not in t.signals
inv9 O: all t: Track | some j: Junction | j not in t.succs => all s: Semaphore | s not in t.signals
inv9 B: all t: Track | some j: Junction | j not in t.succs => one s: Semaphore | s not in t.signals
inv9 B: all t: Track | one j: Junction | j not in t.succs => Semaphore not in t.signals
inv9 B: all t: Track | some j: Junction | j in t.succs => Semaphore in t.signals
inv9 B: all t: Track | Junction not in t.succs => Semaphore not in t.signals
inv9 B: all t: Track | some j: Junction | j not in t.^(succs) => Semaphore not in t.^(succs).signals
inv10 B: all t: Track | Junction in t.succs => Semaphore in t.signals
inv10 B: all t: Track | Junction in t.^(succs) => Semaphore in t.^(succs).signals
inv10 B: all t: Track | some j: Junction | j in t.succs => Semaphore in t.signals
inv10 B: all t: Track | Junction in t.succs => Semaphore in t.signals
inv5 B: all t: Track | some disj t1, t2: Track | t in t1.succs && t in t2.succs <=> t in Junction
inv1 C: some Entry && some Exit
inv1 S: some Entry, some Exit
inv1 S: some Entry, Exit
inv1 C: some Entry && some Exit

