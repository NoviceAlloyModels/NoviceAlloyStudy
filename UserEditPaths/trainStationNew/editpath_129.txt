NA H: THEME UPDATE
inv1 B: all t : Track | some (t & Entry)	all t: Track | some (t & Exit)
inv1 T: all t : Track - Entry - Exit | not t.succs
inv1 T: all t : Track - Entry - Exit | not t.succs
inv1 B: all t : Track - Entry - Exit | no t.succs
inv1 T: all en: Entry, ex: Exit | no en not in Track and no ex not in Track
inv1 T: all en: Entry, ex: Exit | some en in Track
inv1 S: all en: Entry, ex: Exit | some no en not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv1 T: all en: Entry, ex: Exit | no en not in Track and ex not in Track
inv2 B: one t: Track | some t.signals
inv2 C: all s: Signal | one t:Track | s in t.signals
inv3 T: all t: Track | t.Entry
inv3 B: all t: Track | t in Entry
inv3 U: all t: Track | (t in Exit) implies no t.succs
inv3 T: all t: Track | (t & Exit) implies no t.succs
inv3 U: all t: Exit | no t.succs
inv3 B: all t: Track - Entry - Junction | no t.succs
inv3 B: all t: Track - Entry - Junction | no t.succs and (t not in t.succs)
inv3 B: all t: Track - Entry - Junction | no t.succs
inv3 B: all t: Track | no t.succs
inv3 B: all t: Track | no (t.succs & Exit)
inv7 U: all t: Track | t not in t.succs
inv7 C: all t: Track | t not in t.^succs
inv3 U: all e: Exit | no e.succs
inv3 B: all t : Track | no t.succs iff t in Entry
inv3 C: all t : Track | no t.succs iff t in Exit
inv1 T: all t: Track | some Entry in t
inv1 U: all e: Entry | some e
inv1 B: all e: Entry | one Exit and one Entry
inv1 S: all e: Entry | sone Exit and sone Entry
inv1 U: all e: Entry | some Exit and some Entry
inv1 B: one e: Entry | e in Track
inv1 O: one e: Entry, ex: Exit | e in Track and ex in Track
inv1 C: some e: Entry, ex: Exit | e in Track and ex in Track
inv2 C: all s: Signal | one t:Track | s in t.signals
inv3 C: all t : Track | no t.succs iff t in Exit
inv4 U: all e: Entry | no e.~succs
inv4 B: all e: Entry | no e.^succs
inv4 U: all e: Entry | no e.~^succs
inv6 S: All e: Entry : some e.signals
inv6 S: All e: Entry | some e.signals
inv6 U: all e: Entry | some e.signals
inv6 U: all e: Entry | (e in Track) implies some Track.signals
inv6 U: all e: Entry | (e in Track) implies some e.signals
inv6 T: all t: Track | (t & Entry) implies t.signals
inv6 T: all t: Track | (t & Entry) implies some t.signals
inv6 U: all e: Entry | some e.signals
inv6 U: all e: Entry | some e.signals
inv6 T: all e: Entry | some s: Speed | some (e.signals in s)
inv6 T: all e: Entry | some s: Speed | some (s in e.signals)
inv6 C: all e: Entry | some s: Speed | (s in e.signals)
inv6 B: all e: Entry | (Speed in e.signals)
inv6 T: all e: Entry | some (Speed in e.signals)
inv6 C: all e: Entry | some s: Speed | (s in e.signals)
inv6 T: all e: Entry | (some Speed in e.signals)
inv6 T: all e: Entry | (some Speed) in e.signals
inv6 B: all e: Entry | Speed in e.signals
inv6 T: all e: Entry | no Speed not in e.signals
inv8 B: all e: Entry, ex: Entry | ex in e.^succs
inv8 T: all e: Entry, ex: Entry | no ex not in e.^succs
inv8 B: all e: Entry, ex: Entry | ex  in e.^succs
inv8 O: all e: Entry, ex: Exit | ex  in e.^succs
inv8 B: all e: Entry | some ex: Exit | ex  in e.^succs
inv8 O: all e: Entry | Exit in e.^succs
inv8 T: all e: Entry | no Exit not in e.^succs
inv8 B: all e: Entry | Junction not in e.^succs
inv8 O: all e: Entry | Exit in e.^succs
inv8 S: all e: Entry, all ex: Exit | ex in e.^succs
inv8 O: all e: Entry, ex: Exit | ex in e.^succs
inv8 B: all e: Entry | some ex: Exit | ex in e.^succs
inv4 U: all e: Entry | no e.~succs
inv4 U: all e: Entry | no e.~^succs
inv4 U: all e: Entry | no e.^~succs
inv4 U: all t: Track | no (t.succs & Entry)
inv4 B: all t: Track | (Entry not in t.succs)
inv4 B: all t: Track - Entry | (Entry not in t.succs)
inv4 U: all e: Entry | e not in succs.Entry
inv4 U: all e: Entry | e not in Entry.succs
inv4 U: all e: Entry | e not in Track.succs
inv6 C: all e: Entry | some s: Speed | (s in e.signals)
inv4 U: all e: Entry | e not in Track.succs
inv4 U: all t: Track | t in Entry implies t not in Track.succs
inv4 C: all t: Track | t in Entry iff t not in Track.succs
inv3 C: all t : Track | no t.succs iff t in Exit
inv4 C: all t: Track | t in Entry iff t not in Track.succs

