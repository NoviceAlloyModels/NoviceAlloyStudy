NA H: THEME UPDATE
inv1 T: some Track.Entry and some Track.Exit
inv1 C: some Entry and some Exit
inv2 S: all s: Signal, one t: Track | s in t.signals
inv2 C: all s: Signal | one t: Track | s in t.signals
inv3 U: all t: Track | t in Exit => no t.succs
inv3 U: no Exit.succs
inv3 T: Exit => no Track.succs
inv3 U: no Exit.succs
inv3 U: all e: Exit | no e.succs
inv3 B: no (Track.succs & Exit)
inv3 U: all t: Track | t in Exit => no t.succs
inv3 U: all t: Track & Exit| no t.succs
inv3 B: no Track.succs & Exit
inv3 B: no (Track.succs & Exit)
inv3 U: all t: Track & Exit | no t.succs
inv3 U: all t: Track | t in Exit => no t.succs
inv3 T: all t: Track | t is Exit => no t.succs
inv3 U: all t: Track | t in Exit => no t.succs
inv3 U: no Track.succs & Exit.succs
inv3 U: all t: Track | no t.succs => t in Exit
inv3 B: all t: Track | no t.succs => t in Exit	Track not in Track.^succs
inv3 B: some Track-Exit
inv3 T: some (Track-Exit).Exit
inv3 B: some (Track-Exit).succs
inv3 U: all t: Track | no t.succs => t in Exit
inv3 U: all t: Track | no t.succs and t not in t.succs => t in Exit
inv3 U: all t: Track | no t.succs => t in Exit
inv3 U: all t: Track | no t.succs => t in Exit and t not in Track-Exit
inv3 B: all t: Track | no t.succs => t in Exit and t not in Entry
inv3 U: all t: Track | t in Exit => lone t.succs
inv3 U: all t: Track | t in Exit => no t.succs
inv3 B: all t: Track | t in Exit => t not in Junction and no t.succs
inv3 S: all t: Track | t in Exit => t not in Junction+Enret and no t.succs
inv3 B: all t: Track | t in Exit => t not in Junction+Entry and no t.succs
inv3 B: all t: Track | no t.succs => t in Exit and t not in Junction+Entry
inv3 B: all t: Track | no t.succs => t in Exit and t not in Junction+Entry	all t: Track | t not in t.succs
inv3 S: Tracks.succs = Exit.succs
inv3 B: Track.succs = Exit.succs
inv3 U: all t: Track | t in Exit => no t.succs
inv3 B: all t: Track | t in Exit => no t.succs	all t: Track | t in Exit => t not in Junction	all t: Track | t in Exit => t not in Entry
inv3 B: all t: Track | t in Exit => no t.succs	no (Entry & Junction & Exit)
inv3 B: Track = Junction+Entry+Exit	all t: Track | t in Exit => no t.succs
inv3 B: Track = Junction+Entry+Exit	no Exit & Junction	no Entry & Junction	no Entry & Exit	all t: Track | t in Exit => no t.succs
inv3 B: Track = Junction+Entry+Exit	all t: Track | t in Exit => no t.succs
inv3 O: Track = Junction+Entry+Exit	all t: Track | t in Exit <=> no t.succs
inv3 C: all t: Track | t in Exit <=> no t.succs
inv3 C: all t: Track | t in Exit <=> no t.succs
inv4 U: all t: Track | t in Entry => t not in Track.succs
inv4 C: all t: Track | t in Entry <=> t not in Track.succs
inv5 B: all t: Track | t in Junction <=> some (t & Track.succs)
inv5 B: all t: Track | t in Junction <=> t in Track.succs
inv5 T: all t: Track | t in Junction <=> no (lone (t in Track.succs))
inv5 T: all t: Track | t in Junction <=> t in Track.succs #2
inv5 T: all t: Track | t in Junction <=> (t & Track.succs) > 2
inv5 T: all t: Track | t in Junction <=> (t & Track.succs) > #2
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 2
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 1
inv5 B: all t: Track | t in Junction <=> #(t & Track-t.succs) > 1
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 1
inv5 T: all t: Track | t in Junction <=> #(t in Track.succs) > 1
inv5 T: all t: Track | t in Junction <=> #(t in Track.succs) >= 1
inv5 B: all t: Track | t in Junction <=> some (t & Track.succs)
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 1
inv5 B: all t: Track | t not in Junction <=> lone (t & Track.succs)
inv5 B: all t: Track | t not in Junction <=> lone (t & Track-t.succs)
inv5 T: all t: Track | t in Junction <=> #(t & Track-t.succs)
inv5 B: all t: Track | t in Junction <=> #(t & Track-t.succs) > 1
inv5 S: all t: Track | t in Junction <=> (t & Track.succs) > 1 &
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 1
inv5 B: all t: Track | t in Junction <=> #(t & Track-t.succs) > 1
inv5 B: all t: Track | t in Junction <=> #(t & (Track-t).succs) > 1
inv5 B: all t: Track | t not in Junction <=> lone (t & (Track-t).succs)
inv5 B: all t: Track, t2: Track, t3: Track | t != t2 && t2 != t3 && t != t3 && t in t2.succs && t in t3.succs <=> t in Junction
inv5 B: all t: Track, t2: Track, t3: Track | t != t2 && t2 != t3 && t != t3 && t in t2.succs && t in t3.succs <=> t in Junction and t2 not in t2.succs && t3 not in t3.succs
inv5 B: all t: Track, t2: Track, t3: Track | t != t2 && t2 != t3 && t != t3 && t in t2.succs && t in t3.succs => t in Junction and t2 not in t2.succs && t3 not in t3.succs
inv5 U: all t: Track, t2: Track, t3: Track | t != t2 && t2 != t3 && t != t3 && t in t2.succs && t in t3.succs and t2 not in t2.succs && t3 not in t3.succs => t in Junction
inv5 S: all t, t2: Track | t in t2.succs and some (t & (Tree-t2).succs) => t in Junction
inv5 U: all t, t2: Track | t in t2.succs and some (t & (Track-t2).succs) => t in Junction
inv5 U: all t, t2: Track | t in t2.succs and some (t & (Track-t2-t).succs) => t in Junction
inv5 B: all t: Track | t in Junction <=> #(t & Track.succs) > 1
inv5 B: all t: Track | t in Junction => #(t & Track.succs) > 1
inv5 U: all t: Track | #(t & Track.succs) > 1 => t in Junction

