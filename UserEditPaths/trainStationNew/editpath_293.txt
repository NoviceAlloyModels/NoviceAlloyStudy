NA H: THEME UPDATE
inv1 S: some Entry & some Exit
inv1 C: some Entry and some Exit
inv2 C: all s : Signal | one signals.s
inv3 C: all t : Track | t in Exit <=> no t.succs
inv4 S: all t: Track | t in Entry <=> t not in Track.^succ
inv4 C: all t: Track | t in Entry <=> t not in Track.^succs
inv4 S: Track - Tracks.^succs
inv4 T: Track - Track.^succs
inv4 T: Track - Track.^succs
inv4 C: Entry = Track - Track.^succs
inv4 C: Entry = Track - Track.^succs
inv5 S: Junctions = Track - Track.succ.succ
inv5 S: Junctions = Track - Track.succ.succ
inv5 S: Junction = Track - Track.succ.succ
inv5 B: Junction = Track - Track.succs.succs
inv5 S: Junction = Track - Track.succs.succs^
inv5 S: Junction = Track - Track.succ^succs
inv5 T: Junction = Track - Track.succs^succs
inv5 B: Junction = Track - (Track.succs).^succs
inv5 B: all t : Track | t in Junction <=> t in Track.succs.^succs
inv5 B: all t : Track | t in Junction <=> t in Track.succs.succs.^succs
inv5 B: all t : Track | t in Junction <=> t in Track.succs.succs.*succs
inv5 B: all t : Track | t in Junction <=> t in (Track.succs.succs).*succs
inv5 S: all t : Track | t in Junction iff #succs.t>1 para a 5
inv5 E: 
inv5 C: all t : Track | t in Junction iff #succs.t>1
inv6 E: 
inv6 S: all t : Entry | some e.signals
inv6 U: all e : Entry | some e.signals
inv6 C: all e : Entry | some e.signals & Speed
inv7 C: all t : Track | t not in t.^succs
inv8 O: all e: Entry | all ex : Exit | ex in e.^succs
inv8 S: all e: Entry | all ex : Exit |  in e.*succs
inv8 C: all e: Entry | all ex : Exit |  ex in e.*succs
inv8 O: all disj e: Entry , ex : Exit |  ex in e.^succs
inv8 C: all e: Entry , ex : Exit | e != ex =>  ex in e.^succs
inv8 O: all disj t1:Entry,t2:Exit |  t2 in t1.^(succs)
inv8 C: all e: Entry | all ex : Exit |  ex in e.*succs
inv9 C: all t : Track | no Junction & t.succs => no Semaphore & t.signals
inv10 C: all t : succs.Junction | some t.signals & Semaphore
inv10 C: all t : succs.Junction | some t.signals & Semaphore
NA H: THEME UPDATE

