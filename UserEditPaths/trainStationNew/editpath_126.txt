NA H: THEME UPDATE
inv1 T: all t:Track | some Entry in succs and some Exit in succs
inv1 T: all t:Track | some Entry in t.succs and some Exit in t.succs
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 O: one t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 U: all t:Track | some e:Entry ,ex:Exit | #e>=1 and #ex>=1
inv1 S: all t:Track | some e:Entry ,ex:Exit |
inv1 S: all t:Track | some e:Entry ,ex:Exit
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs and t in t.succs
inv1 U: all t:Track | some Exit and some Entry
inv1 T: all t:Track | some Exit in t.succs and some Entry in t.succs
inv1 T: all t:Track, e:Entry, ex:Exit | #e in t.succs >=1 and #ex in t.succs >=1
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs or ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs	all e:Entry, ex:Exit | some t:Track | e in t.succs and ex in t.succs
inv1 B: all e:Entry, ex:Exit | some t:Track | e in t.succs and ex in t.succs
inv2 B: all s:Signal | one Track
inv2 B: all s:Signal, t1,t2:Track | s in t1.signals => s not in t2.signals
inv2 S: all s:Signal, t1,t2:Track | s in t1.signals => s not in Track.signals - t
inv2 B: all s:Signal, t1:Track | s in t1.signals => s not in Track.signals - t1
inv2 B: all s:Signal, t1:Track | s in t1.signals and s not in Track.signals - t1
inv2 B: all s:Signal, t1:Track | s in t1.signals and s not in Track.signals - t1.signals
inv2 U: all s:Signal, t1:Track | s in t1.signals => s not in Track.signals - t1.signals
inv2 B: all s:Signal, t1:Track | s not in Track.signals - t1.signals
inv2 B: all s:Signal, t1:Track | s not in (Track.signals - t1.signals)
inv2 U: all s:Signal | one t1:Track | s not in (Track.signals - t1.signals)
inv2 S: all s:Signal | one t1:Track | s in t.signals
inv2 C: all s:Signal | one t:Track | s in t.signals
inv1 O: one t:Track | some ex:Exit, e:Entry | e in t.succs and ex in t.succs
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv1 O: some ex:Exit, e:Entry | e in Track.succs and ex in Track.succs
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv3 U: all ex:Exit | no ex.succs
inv3 U: no Exit.succs
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => t = Exit
inv3 B: all t:Track| #t.succs=0 => t = Exit
inv3 U: all t:Track| #t.succs=0 => t in Exit
inv3 U: all t:Track| no t.succs => t in Exit
inv3 U: all t:Track| t in Exit => no t.succs
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | #ex.succs=0
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | ex in Track => #ex.succs=0
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => Exit in t
inv3 T: all ex:Exit | ex.succs={}
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv4 U: all e:Entry | no e.prev
inv4 U: all e:Entry | no e.succs.prev
inv4 U: all e:Entry | no (e.succs).prev
inv4 T: all e:Entry | no (e.succs).prev[e]
inv4 U: all e:Entry | no prev[e]
inv4 U: all e:Entry | #prev[e]=0
inv4 S: all e:Entry | #prevs[e]=0
inv4 S: all e:Entry | no prevs[e]
inv4 S: all e:Entry | no e.succs.prevs[e]
inv4 S: all e:Entry | first = e
inv4 S: all e:Entry | Track.succs.first = e
inv4 S: all e:Entry, t:Track | t.succs.first = e
inv4 S: all e:Entry, t:Track | t.succs.first = Entry
inv4 S: all e:Entry, t:Track | e in t.succs => t.succs.first = e
inv4 S: some first e:Entry | e in Track
inv4 S: some first e:Entry | e in Track
inv4 S: some first e:Entry | e in Track
inv3 U: all ex:Exit | no ex.next
inv3 U: all ex:Exit | no ex.succs.next
inv3 S: all ex:Exit | ex.succs.last = ex
inv3 S: all ex:Exit | Track.succs.last = ex
inv3 S: all ex:Exit | Track.last = ex
inv3 S: all ex:Exit | ex.last = ex
inv3 S: all ex:Exit | ex.last
inv3 T: all ex:Exit | no Track.succs[ex+1]
inv3 T: all ex:Exit | no Track.succs[ex]
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | Track not in ex.succs
inv3 U: all ex:Exit | Track not in ex.succs and ex not in ex.succs
inv3 S: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Juction not in ex.succs
inv3 B: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | Exit not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv6 O: all e:Entry | one s:Speed | s in e.signals
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv7 B: some ex:Exit, e:Entry | e not in ex.succs
inv7 B: some ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs
inv7 B: all ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs
inv7 E: 
inv2 C: all s:Signal | one t:Track | s in t.signals
inv7 U: all t:Track | t not in t.succs
inv7 U: all t:Track | t not in t.succs and t not in succs.t
inv7 U: all t:Track | t not in t.succs and t not in t.~(Track<:succs)
inv7 U: all t:Track | t not in t.succs and t not in t.~(t<:succs)
inv7 B: all t:Track | t not in t.succs and t.succs not in t
inv7 U: all t:Track | t not in t.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs
inv7 U: all t:Track | t not in t.succs	all t1,t2:Track | t2 in t1.succs => t1 not in t2.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs) and (t1 in t2.succs => t2 not in t1.succs)
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 U: all t:Track | t not in t.succs =>	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 U: all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs)
inv7 S: all t:Track | t not in t.succs	all disj t1,t2:Track | (t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 B: all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 B: all disj t1,t2:Track | (t1 not in t1.succs and t2 not in t2.succs) and (t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs)
inv7 B: all disj t1,t2:Track | (t1 not in t1.succs) and (t2 not in t2.succs) and (t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs)
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 O: all t:Track | t not in t.succs and t.succs not in t.succs
inv7 B: all t:Track | t not in t.succs		all disj t1,t2:Track | t1.succs not in t2.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t1.succs not in t2.succs and t2.succs not in t1.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2:Track | t1.succs not in t2.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs => t1.succs not in t2.succs
inv7 U: all t:Track | t not in t.succs	all disj t1,t2:Track | t2 in t1.succs and t2.succs in t1.succs => t1.succs not in t2.succs
inv7 O: all t:Track | t not in t.succs and t.succs not in Track.succs
inv7 U: all t:Track, e:Entry, ex:Exit | (t not in t.succs) and ex in e.succs => e not in ex.succs
inv7 B: all t:Track | one e:Entry, ex:Exit | (t not in t.succs) and ex in e.succs => e not in ex.succs
inv7 B: all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs
inv7 B: all t:Track | t not in t.succs	all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs
inv7 B: all t:Track, ex:Exit | t not in t.succs and no ex.succs	all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs
inv7 B: all t:Track, ex:Exit | t not in t.succs and no ex.succs	all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and e not in Track.succs
inv7 B: all t:Track, ex:Exit, e:Entry, j:Junction | t not in t.succs and no ex.succs and e not in t.succs
inv7 B: all t:Track, ex:Exit, e:Entry, j:Junction | t not in t.succs and no ex.succs and e not in Track.succs
inv7 B: all t:Track | t not in t.succs	all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2 : Track | t1 in t2.succs => t2 not in t1.succs	all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs	all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs	all disj ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs
inv7 B: all t:Track | t not in t.succs	all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs	all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs and ex not in j
inv7 B: all t:Track | t not in t.succs	all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs	all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs and j in e.succs
inv5 U: all disj t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs => t1 in Junction
inv5 U: all disj t1,t2,t3:Track | (t1 not in t1.succs) and t1 in t2.succs and t1 in t3.succs => t1 in Junction
inv5 B: all t:Track | t not in t.succs	all disj t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs => t1 in Junction
inv5 B: all t:Junction | t not in t.succs	all disj t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs => t1 in Junction
inv5 B: all t:Junction | t not in t.succs	all disj t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs => t1 = Junction
inv5 U: all disj t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs and t3 in t2.succs=> t1 in Junction
inv5 U: all disj t1,t2,t3:Track | t1 in t2.succs and #t2.succs=1 and t1 in t3.succs and #t3.succs=1 => t1 in Junction
inv5 B: all t:Track | t not in t.succs	all disj t1,t2,t3:Track | t1 in t2.succs and #t2.succs=1 and t1 in t3.succs and #t3.succs=1 => t1 in Junction
inv5 B: all disj t1,t2,t3:Track | t1 in t2.succs  => t1 in Junction
inv3 S: all ex:Exit | no ex.successor
inv3 U: all ex:Exit | no ex.succs
inv3 U: all t:Track | no t.succs => t in Exit
inv3 U: all t:Track | #t.succs=0 => t in Exit
inv3 B: all t:Track | #t.succs=0 => t = Exit
inv3 B: all t:Track, e:Exit | #t.succs=0 => t = e
inv3 U: all ex:Exit | no ex.succs and ex not in ex.succs
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 S: all ex:Exit | ex in Track => ex in Entry.succs and ex in Juction.succs
inv3 B: all ex:Exit | ex in Track => ex in Entry.succs and ex in Junction.succs
inv3 B: all ex:Exit | ex in Track => ex in Entry.succs
inv3 B: all ex:Exit | ex in Track => (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs)
inv3 B: all ex:Exit | ex in Track => no ex.succs and ( (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs))
inv3 B: all ex:Exit | ex in Track => Junction not in ex.succs and ( (Junction in Entry.succs and ex in Junction.succs) or (ex in Entry.succs))
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs and ex not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry | j not in ex.succs and e not in ex.succs and ex not in ex.succs and Track not in ex.succs
inv3 U: all ex:Exit, j:Junction, e:Entry, t:Track | j not in ex.succs and e not in ex.succs and ex not in ex.succs and t not in ex.succs
inv3 B: all ex:Exit, j:Junction, e:Entry, t:Track | j not in ex.succs and e not in ex.succs and ex not in ex.succs and t not in ex.succs and t not in t.succs
inv3 B: all t:Track | t not in t.succs and t not in Exit.succs
inv3 U: all t:Track | no Exit.succs
inv3 U: no Exit.succs
inv3 U: no Exit.succs
inv3 U: all t:Track | no t.succs => t in Exit
inv3 U: all t:Track, e:Exit | e in t.succs => no e.succs
inv3 S: e:Exit | e in Track.succs => no e.succs
inv3 U: all e:Exit | e in Track.succs => no e.succs
inv3 U: all e:Exit | e in Track => no e.succs
inv3 B: all e:Exit | e in Track => no Track.succs
inv3 U: all e:Exit, t:Track | e in Track => t not in e.succs
inv3 U: all e:Exit, t:Track | t not in e.succs
inv3 T: all e:Exit, t:Track | no t not in e.succs
inv3 U: all e:Exit, t:Track | t not in e.succs
inv3 U: all t:Track | t not in Exit.succs
inv3 B: Track not in Exit.succs
inv3 B: Track not in Exit
inv3 O: Junction not in Exit and Entry not in Exit and Exit not in Exit
inv3 B: Junction not in Exit and Entry not in Exit
inv3 B: one t:Track | no Exit.succs
inv3 B: one t:Track | no t.succs

