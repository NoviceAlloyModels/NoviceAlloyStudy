NA H: THEME UPDATE
inv1 U: all t: Track| some Entry and some Exit
inv1 T: all t: Track| some t in Entry and some t in Exit
inv1 B: all t: Track| t in Entry and t in Exit
inv1 U: (all t: Entry| some Entry) && (all t: Exit | some Exit)
inv1 T: all t: Track| (some t in Entry) && (some t in Exit)
inv1 B: all t: Track| (t in Entry) && (t in Exit)
inv2 S: all s: Signal| some t: Track| s in one t.signals
inv2 U: all s: Signal| some t: Track| s in t.signals
inv2 T: all s: Signal| some t: Track| #t.signals.s=1
inv2 T: all s: Signal| some t: Track| one t.signals.s
inv1 B: all x: Track| one Entry	all y: Track| one Exit
inv1 B: (all x: Track| one Entry) && (all y: Track| one Exit)
inv1 B: (all x: Track| lone Entry) && (all y: Track| lone Exit)
inv1 B: (all x: Track| lone Entry && lone Exit)
inv1 U: (all x: Track| some Entry && some Exit)
inv1 U: (all x: Track| some Entry) && (all y: Track| some Exit)
inv1 C: some e: Entry| some s: Exit| e in Track and s in Track
inv3 U: all t: Track| no t.succs implies t in Exit
inv3 U: all t: Track| t in Exit implies no t.succs
inv2 S: all s: Signals | one signals.s
inv2 C: all s: Signal| one signals.s
inv3 U: all e: Exit| no e.succs
inv3 C: all t: Track| no t.succs <=> t in Exit
inv4 O: all t1,t2: Track| t1 in Entry <=> t1 not in t2.succs
inv4 U: all t1,t2: Track| t1 in Entry implies t1 not in t2.succs
inv4 T: all t1,t2: Track| t1 in t2.succs implies t1 not Entry
inv4 O: all t1,t2: Track| t1 not in t2.succs <=> t1 in Entry
inv4 B: all t1,t2,t3: Track| t1 not in t2.succs and t3 in t1.succs <=> t1 in Entry
inv4 B: all t: Track| some a: Track| a not in t.succs <=> a in Entry
inv4 B: all t: Track| all e: Entry| e not in t.succs && some e.succs
inv4 O: all t1,t2: Track| t2 not in t1.succs && some t2.succs
inv4 B: all t1,t2: Track| t2 not in t1.succs && some t2.succs implies t2 in Entry
inv4 B: all t1,t2: Track| t2 not in t1.succs && some t2.succs && t2 not in t2.^(succs) implies t2 in Entry
inv4 B: all t1,t2: Track| (t2 not in t1.succs && some t2.succs && t2 not in t2.^(succs)) implies t2 in Entry
inv4 O: all t1,t2: Track| t1 in Entry <=> t1 not in t2.succs
inv4 C: all t: Track| no succs.t <=> t in Entry
inv5 B: all t: Track| some succs.t <=> t in Junction
inv5 S: all t1,t2,t3: Track| t1 in t2.succs and t1 in t3.succs <=> t in Junction
inv5 S: all t1,t2,t3: Track| (t1 in t2.succs and t1 in t3.succs) <=> t in Junction
inv5 B: all t1,t2,t3: Track| (t1 in t2.succs and t1 in t3.succs) <=> t1 in Junction
inv5 U: all t: Track| one succs.t => t not in Junction
inv5 U: all t: Track| lone succs.t => t not in Junction
inv5 B: all t: Track| some succs.t => t  in Junction
inv5 U: all t: Track| #succs.t=2 => t in Junction
inv5 U: all t: Track| #succs.t=2 => t in Junction
inv5 U: all t: Track| #succs.t=2 => t in Junction
inv5 B: all t: Track| some succs.t <=> t in Junction
inv5 B: all t: Track| some succs.t and some t.succs <=> t in Junction
inv5 B: all t: Track| #succs.t!=1 and some t.succs <=> t in Junction
inv5 B: all t: Track| #succs.t!=1 and #succs.t!=0 and some t.succs <=> t in Junction
inv5 C: all t: Track| #succs.t!=1 and #succs.t!=0 <=> t in Junction
inv6 C: all t: Entry| some s: Speed| s in t.signals
inv7 C: all t: Track| t not in t.^(succs)
inv8 B: Track in Entry.*(succs)
inv8 B: Exit in Entry.*(succs)
inv8 B: Exit in Entry.*(succs)
inv8 B: Exit in Entry.^(succs)
inv8 B: Exit in Entry.*(succs)
inv8 B: Entry in Exit.*(succs)
inv8 S: all e: Entry| all c: Exit| c in e*(succes)
inv8 T: all e: Entry| all c: Exit| c in e*(succs)
inv8 C: all e: Entry| all c: Exit| c in e.*(succs)
inv9 B: all t: Track| t.succs not in Junction implies no t.signals
inv9 B: all t: Track| Semaphore in t.signals => t.succs not in Junction
inv10 B: all t: Track| t.succs in Junction => Semaphore in t.signals
inv10 T: all t: Track| t.succs in Junction and t.succs not Exit => Semaphore in t.signals
inv10 B: all t: Track| (t.succs in Junction and t.succs not in Exit) => Semaphore in t.signals
inv10 B: all t: Track| some t1: Junction| t1 in t.succs => Semaphore in t.signals
inv10 T: all t: Track| some t1: Junction| t1 in t.succs => one Semaphore in t.signals
inv10 B: all t: Track| some t1: Junction| t1 not in t.succs => Semaphore not in t.signals
inv10 B: all t: Track| all t1: Junction| t1 not in t.succs => Semaphore not in t.signals
inv10 B: all t: Track| all t1: Junction| t1 in t.succs => Semaphore in t.signals
inv10 B: all t: Track - Exit| all t1: Junction| t1 in t.succs => Semaphore in t.signals
inv10 B: all t: Track| all t1: Junction - Exit| t1 in t.succs => Semaphore in t.signals
inv10 T: all t: Track| all t1: Junction | t1 in t.succs and t1 not Exit => Semaphore in t.signals
inv10 S: all t: Track| all t1: Junction | (t1 in t.succs and t1 not Exit) => Semaphore in t.signals
inv10 B: all t: Track| all t1: Junction | (t1 in t.succs and t1 not in Exit) => Semaphore in t.signals
inv10 B: all t: Track| t.succs in Junction => t.signals in Semaphore
inv10 B: all t: Track| t.succs not in Junction => t.signals not in Semaphore
inv10 B: all t: Track| t.succs not in Junction => Semaphore not in t.signals
inv9 B: all t: Track| some (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 T: all t: Track| (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 O: all t: Track| lone (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 O: all t: Track| no (t.succs & Junction) <=> no (t.signals & Semaphore)
inv9 C: all t: Track| no (t.succs & Junction) => no (t.signals & Semaphore)

