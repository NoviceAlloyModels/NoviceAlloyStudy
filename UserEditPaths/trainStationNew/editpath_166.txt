NA H: THEME UPDATE
inv1 O: one Exit	one Entry
inv1 B: lone Exit	lone Entry
inv1 B: lone Exit and 	lone Entry
inv2 C: signals in Track one -> Signal
inv2 C: signals in Track one -> Signal
inv3 U: all t : Track | t in Exit implies no t.succs
inv3 C: all t : Track | t in Exit iff no t.succs
inv4 B: all t : Track | t in Entry iff t not in succs.Track
inv4 B: all t : Track | t in Entry implies t not in succs.Track
inv4 T: succs in Entry none -> Track
inv4 S: all t : Track | t in Entry implies t not in
inv4 S: all t : Track | t in Entry implies t not in
inv1 U: some Entry
inv1 C: some Entry and some Exit
inv5 S: all t : Track | t in Junction iff some t.succ
inv5 B: all t : Track | t in Junction iff some t.succs
inv4 S: all t : Track | t in Entry iff no succ.t
inv4 C: all t : Track | t in Entry iff no succs.t
inv5 B: all t : Track | t in Junction iff some succs.t
inv5 B: all t : Track | t in Junction iff (some succs.t and t not in succs.t)
inv5 B: all t : Track | t in Junction iff (some succs.t and t not in ^succs.t)
inv5 B: all t : Track | t in Junction iff (some t2:Track | succs in t2 -> t and t != t2)
inv6 B: signals in Entry one -> some Signal
inv6 B: signals in Entry one -> one Signal
inv6 B: signals in Entry-> one Signal
inv6 O: signals in Entry-> one Speed
inv6 B: all e:Entry | Speed in e.signals
inv6 C: all e:Entry | some s: Speed | s in e.signals
inv7 C: all t : Track | t not in t.^succs
inv8 O: all e:Entry, x:Exit | x in e.^succs
inv9 S: all t:Track | () => (Semaphores not in )
inv8 O: all e:Entry, x:Exit | x in e.^succs
inv8 C: all e:Entry, x:Exit | x in e.*succs
inv5 B: all t : Track | t in Junction iff (some t2:Track | succs in t2 -> t and t != t2)
inv5 S: Junctions = all t : Track | some succ.t
inv5 S: Junctions = all t : Track | lone succ.t
inv5 S: Junctions = all t : Track | succ.t
inv5 S: Junctions in all t : Track | succ.t
inv5 S: all j : Junction | some succ.j
inv5 U: all j : Junction | some succs.j
inv5 U: all j : Junction | some succs.j
inv5 U: all j : Junction | some succs.j
inv5 S: all j : Junction | some p1:Track-j), p2:(Track-j) | p1 -> j in succs and p2 -> j in succs
inv5 U: all j : Junction | some p1:(Track-j), p2:(Track-j) | p1 -> j in succs and p2 -> j in succs
inv5 B: all j : Junction | some p1:(Track-j), p2:(Track-j) | p1 -> j in succs and p2 -> j in succs and p1 != p2
inv5 U: all j : Junction | some p1, p2 : Track | p1 -> j in succs and p2 -> j in succs and p1 != p2
inv5 B: all j : Junction | some p1, p2 : Track | p1 -> j in succs and p2 -> j in succs and p1 != p2 and j != p1 and j != p2
inv5 S: all j : Junction | some p1, p2 : Track - j| p1 -> j in succs and p2 -> j in succs
inv5 U: all j : Junction | some p1, p2 : Track - j| p1 -> j in succs and p2 -> j in succs
inv5 B: all j : Track | (j in Junction) iff (some p1, p2 : Track - j| p1 -> j in succs and p2 -> j in succs)
inv5 B: all j : Track | (j in Junction) iff (some p1, p2 : Track| p1 -> j in succs and p2 -> j in succs)
inv5 C: all j : Track | (j in Junction) iff (some p1, p2 : Track| p1 -> j in succs and p2 -> j in succs and p1!=p2)

