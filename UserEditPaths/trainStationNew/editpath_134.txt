NA H: THEME UPDATE
inv1 O: some x : Track | x = Entry	some x : Track | x = Exit
inv1 S: some Entry : Track	some Exit : Track
inv1 T: (Entry & Track)	(Exit & Track)
inv1 C: some (Entry & Track)	some (Exit & Track)
inv1 C: some x : Entry | x in Track	some x : Exit | x in Track
inv1 C: #Entry >= 1	#Exit >= 1
inv2 C: all x : Signal | one signals.x
inv2 C: all x : Signal | #signals.x = 1
inv3 T: all track : Track | no track.succs -> track in Exit
inv3 U: all track : Track | no track.succs => track in Exit
inv3 T: all track : Track | none track.succs => track in Exit
inv3 U: all track : Track | #track.succs = 0 => track in Exit
inv3 T: all track : Track | none succs.track => track in Exit
inv3 B: all track : Track | no succs.track => track in Exit
inv3 B: all track : Track | no succs.track => Track - track in Exit
inv3 U: all track : Track | #track.succs = 0 => track in Exit
inv3 B: all track : Track | #track.succs = 0 => Exit in track
inv3 U: all track : Track | #track.succs = 0 => track in Exit
inv3 B: all track : Track | #track.succs = 0 => Exit in track
inv3 B: all track : Track | #succs.track = 0 => Exit in track
inv3 B: all track : Track | #succs.track = 0 =>  track in Exit
inv3 U: all track : Track | #track.succs = 0 =>  track in Exit
inv3 C: Track - succs.Track = Exit
inv3 B: all t : Track | no succs.t => Exit in t
inv3 B: all t : Track | no succs.t => t in Exit
inv3 B: all t : Track | no succs.t => Exit in t
inv3 B: all t : Track | #succs.t = 0 => Exit in t
inv3 B: all t : Track | #succs.t = 0 implies Exit in t
inv3 S: all t : track | t in Exit => no t.succs
inv3 U: all t : Track | t in Exit => no t.succs
inv3 S: all t : Track | t in Exit => no
inv3 U: all t : Track | t in Exit => no t.succs
inv3 B: all t : Track | t in Exit => no succs.t
inv3 B: all t : Track | Exit in t => no t.succs
inv3 B: all t : Track | Exit in t => no succs.t
inv3 B: all t : Track | Exit in t => no t.succs
inv3 U: all t : Track | t in Exit => no t.succs
inv3 U: all t : Track - succs.Track | t in Exit
inv3 B: all t : Track - succs.Track | Exit in t
inv3 C: Exit = Track - succs.Track
inv3 B: all et : Exit | no succs.et
inv3 U: all et : Exit | no et.succs
inv3 B: all et : Exit | no succs.et
inv3 U: all et : Exit | no et.succs
inv3 T: all et : Exit | none et.succs
inv3 U: all t : Track - succs.Track | t in Exit
inv3 B: all t : Track - Track.succs | t in Exit
inv3 B: all t : Track - Track.succs | Exit in t
inv3 B: all t : Track - succs.Track | Exit in t
inv3 U: all t : Track | #t.succs = 0 => t in Track&Exit
inv3 U: all t : Track | #t.succs = 0 => t in Exit
inv3 U: all t : Track | t in Exit => no t.succs
inv3 B: all t : Track | t in Exit => no succs.t
inv3 B: all t : Track | Exit in t => no succs.t
inv3 B: all t : Track | Exit in t => no t.succs
inv3 B: all t : Track | Exit in t => no t.succs
inv3 T: all t : Track | #t.succs && t in Exit
inv3 O: all t : Track | #t.succs = 0 && t in Exit
inv3 B: all t : Track | #t.succs = 0 && Exit in t
inv3 B: all t : Track | #succs.t = 0 && Exit in t
inv3 O: all t : Track | #succs.t = 0 && t in  Exit
inv3 O: all t : Track | #succs.t = 0 && t in Exit
inv3 B: all t : Exit | #succs.t = 0
inv3 U: all t : Exit | #t.succs = 0
inv3 U: all t : (Track & Exit) | #t.succs = 0
inv3 B: all t : (Track & Exit) | #succs.t = 0
inv3 U: all t : (Track & Exit) | no t.succs
inv3 U: all t : Exit | no t.succs && t in Track
inv3 U: all t : Exit | t in Track
inv3 U: all t : Track - Exit | some t.succs
inv3 B: all t : Track - Exit | some succs.t
inv3 T: all t : Track - Exit | set succs.t
inv3 B: all t : Track - Exit | #succs.t > 0
inv3 U: all t : Track - Exit | #t.succs > 0
inv3 S: all t : exit | no t.succs
inv3 U: all t : Exit | no t.succs
inv3 S: all t : Exit | t.succs.size = 0
inv3 U: all t : Exit | #t.succs = 0
inv3 S: all t : Exit | #sucs.t = 0
inv3 B: all t : Exit | #succs.t = 0
inv3 U: all t : Exit | no t&succs.Track
inv3 B: all t : Exit | no t&Track.succs
inv3 U: all t : Exit | t not in succs.Track
inv3 B: all t : Exit | t not in Track.succs
inv3 U: no Exit&succs.Track
inv3 B: no Exit&Track.succs
inv3 T: no Exit in succs.Track
inv3 B: Exit not in succs.Track
inv3 B: Exit not in Track.succs
inv3 B: Exit not in succs.Track
inv3 B: all t : Track - Entry - Junction | t in Exit
inv3 B: all t : Track - Entry - Junction | no t.succs
inv3 B: all t : Track - Entry - Junction | no succs.t
inv3 B: all t : Track - Entry - Junction | t in t.succs || no t.succs
inv3 B: all t : Track - Entry - Junction | t in t.succs || no Track&t.succs
inv3 U: all t : Track | t in Exit => no t.succs
inv3 U: all t : Track | no t.succs => t in Exit
inv3 B: all t : Track | no t.succs => Exit in t
inv3 U: all t : Track | t in Exit => t in t.succs || no t.succs
inv3 U: all t : Track | t in Exit => t in succs.t || no t.succs
inv3 U: all t : Track | t in Exit => one t.succs || no t.succs
inv3 U: all t : Track | t in Exit => one t.succs || no t.succs
inv3 B: all t : Track | t in Exit => t in t.succs
inv3 U: all t : Track | t in Exit => #t.succs = 0
inv3 B: all t : Track | Exit in t => #t.succs = 0
inv3 U: all t : Exit | #t.succs = 0
inv3 U: all t : Exit | no t.succs
inv3 B: all t : Exit | no succs.t
inv3 C: Exit = Track - succs.Track
inv5 B: all t : Track | #(t.succs)>1 iff t in Junction
inv5 C: all t : Track | #(succs.t)>1 iff t in Junction
inv3 U: all t : Exit | #(t.succs) = 0
inv3 C: all t : Track | #(t.succs) = 0 iff t in Exit
inv3 U: all t : Track | #(t.succs) = 0 => t in Exit
inv3 S: all t : Track | #(t.succs) == 0 => t in Exit
inv3 U: all t : Track | t in Exit => #(t.succs) = 0
inv3 C: all t : Track | #(t.succs) = 0 iff t in Exit
inv6 B: all t : Entry, s : t.signals | s in Speed
inv6 S: all t : Entry, some s : t.signals | s in Speed
inv6 C: all t : Entry | some s : t.signals | s in Speed
inv6 C: all t : Entry | some s : t.signals | s in Speed
inv7 C: no (iden & ^succs)
inv8 C: Entry->Exit in *succs
inv8 O: Entry->Exit in ^succs
inv8 C: Entry->Exit in *succs

