NA H: THEME UPDATE
inv1 T: all t:Track | some Entry in succs and some Exit in succs
inv1 T: all t:Track | some Entry in t.succs and some Exit in t.succs
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 O: one t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs
inv1 U: all t:Track | some e:Entry ,ex:Exit | #e>=1 and #ex>=1
inv1 S: all t:Track | some e:Entry ,ex:Exit |
inv1 S: all t:Track | some e:Entry ,ex:Exit
inv1 B: all t:Track | some e:Entry ,ex:Exit | e in t.succs and ex in t.succs and t in t.succs
inv1 U: all t:Track | some Exit and some Entry
inv1 T: all t:Track | some Exit in t.succs and some Entry in t.succs
inv1 T: all t:Track, e:Entry, ex:Exit | #e in t.succs >=1 and #ex in t.succs >=1
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs or ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs
inv1 B: all t:Track | some e:Entry, ex:Exit | e in t.succs and ex in t.succs	all e:Entry, ex:Exit | some t:Track | e in t.succs and ex in t.succs
inv1 B: all e:Entry, ex:Exit | some t:Track | e in t.succs and ex in t.succs
inv2 B: all s:Signal | one Track
inv2 B: all s:Signal, t1,t2:Track | s in t1.signals => s not in t2.signals
inv2 S: all s:Signal, t1,t2:Track | s in t1.signals => s not in Track.signals - t
inv2 B: all s:Signal, t1:Track | s in t1.signals => s not in Track.signals - t1
inv2 B: all s:Signal, t1:Track | s in t1.signals and s not in Track.signals - t1
inv2 B: all s:Signal, t1:Track | s in t1.signals and s not in Track.signals - t1.signals
inv2 U: all s:Signal, t1:Track | s in t1.signals => s not in Track.signals - t1.signals
inv2 B: all s:Signal, t1:Track | s not in Track.signals - t1.signals
inv2 B: all s:Signal, t1:Track | s not in (Track.signals - t1.signals)
inv2 U: all s:Signal | one t1:Track | s not in (Track.signals - t1.signals)
inv2 S: all s:Signal | one t1:Track | s in t.signals
inv2 C: all s:Signal | one t:Track | s in t.signals
inv1 O: one t:Track | some ex:Exit, e:Entry | e in t.succs and ex in t.succs
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv1 O: some ex:Exit, e:Entry | e in Track.succs and ex in Track.succs
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv3 U: all ex:Exit | no ex.succs
inv3 U: no Exit.succs
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => t = Exit
inv3 B: all t:Track| #t.succs=0 => t = Exit
inv3 U: all t:Track| #t.succs=0 => t in Exit
inv3 U: all t:Track| no t.succs => t in Exit
inv3 U: all t:Track| t in Exit => no t.succs
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | #ex.succs=0
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | ex in Track => #ex.succs=0
inv3 U: all t:Track| no t.succs => t in Exit
inv3 B: all t:Track| no t.succs => Exit in t
inv3 T: all ex:Exit | ex.succs={}
inv3 U: all ex:Exit | no ex.succs
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv4 U: all e:Entry | no e.prev
inv4 U: all e:Entry | no e.succs.prev
inv4 U: all e:Entry | no (e.succs).prev
inv4 T: all e:Entry | no (e.succs).prev[e]
inv4 U: all e:Entry | no prev[e]
inv4 U: all e:Entry | #prev[e]=0
inv4 S: all e:Entry | #prevs[e]=0
inv4 S: all e:Entry | no prevs[e]
inv4 S: all e:Entry | no e.succs.prevs[e]
inv4 S: all e:Entry | first = e
inv4 S: all e:Entry | Track.succs.first = e
inv4 S: all e:Entry, t:Track | t.succs.first = e
inv4 S: all e:Entry, t:Track | t.succs.first = Entry
inv4 S: all e:Entry, t:Track | e in t.succs => t.succs.first = e
inv4 S: some first e:Entry | e in Track
inv4 S: some first e:Entry | e in Track
inv4 S: some first e:Entry | e in Track
inv3 U: all ex:Exit | no ex.next
inv3 U: all ex:Exit | no ex.succs.next
inv3 S: all ex:Exit | ex.succs.last = ex
inv3 S: all ex:Exit | Track.succs.last = ex
inv3 S: all ex:Exit | Track.last = ex
inv3 S: all ex:Exit | ex.last = ex
inv3 S: all ex:Exit | ex.last
inv3 T: all ex:Exit | no Track.succs[ex+1]
inv3 T: all ex:Exit | no Track.succs[ex]
inv3 U: all ex:Exit | ex in Track => no ex.succs
inv3 U: all ex:Exit | Track not in ex.succs
inv3 U: all ex:Exit | Track not in ex.succs and ex not in ex.succs
inv3 S: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Juction not in ex.succs
inv3 B: all ex:Exit | Track not in ex.succs and ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | ex not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv3 B: all ex:Exit | Exit not in ex.succs and Entry not in ex.succs and Junction not in ex.succs
inv6 O: all e:Entry | one s:Speed | s in e.signals
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv7 B: some ex:Exit, e:Entry | e not in ex.succs
inv7 B: some ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs
inv7 B: all ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs
NA H: THEME UPDATE
inv3 U: all ex:Exit | ex not in ex.^(succs)
inv3 U: all ex:Exit | no ex.^(succs)
inv3 U: all ex:Exit | #ex.^(succs)=0
inv3 U: all ex:Exit | no ex.^(succs) and ex not in ex.^(succs)
NA H: THEME UPDATE
inv3 U: all ex:Exit | no ex.^(succs) and ex not in ex.^(succs)
inv3 S: all ex:Exit | ex not in Juction and ex not in Entry => no ex.^(succs) and ex not in ex.^(succs)
inv3 U: all ex:Exit | ex not in Junction and ex not in Entry => no ex.^(succs) and ex not in ex.^(succs)
inv3 U: all ex:Exit | ex not in Junction and ex not in Entry => no ex.^(succs)
inv3 U: all t:Track | no t.^(succs) => t in Exit
inv3 B: all t:Track | no t.^(succs) => t in Exit and t not in Entry
inv3 B: all t:Track | no t.^(succs) => t in Exit and t not in Entry and t not in Junction
inv3 B: all t:Track | no t.^(succs) and t not in t.^(succs) => t in Exit and t not in Entry and t not in Junction
inv3 U: all t:Track | no t.^(succs) and t not in t.^(succs) => t in Exit
inv3 U: all t:Track, e:Exit | t not in e.^(succs) => no e.^(succs)
inv3 S: all t1,t2:Track | t1 not in t2.^(succs) => t2 in Exit
inv3 S: all t1,t2:Track | t1 not in t2.^(succs) => t2 in Exit
inv3 B: all t1,t2:Track | t1 not in t2.^(succs) => t2 in Exit
inv3 U: all t1,t2:Track | t1 not in Exit => some t1.^(succs)
inv3 U: all t1,t2:Track | t1 not in Exit => some t1.(succs)
inv3 U: all t1,t2:Track | t1 not in Exit => some t1.succs
inv3 B: all t1,t2:Track | t1 not in Exit => one t1.succs
inv3 B: all t1,t2:Track | t1 not in Exit => one t1.^(succs)
inv3 C: all t1,t2:Track | t1 not in Exit <=> some t1.^(succs)
inv3 C: all t:Track | t not in Exit <=> some t.(succs)
inv3 C: all t:Track | t not in Exit <=> some t.^(succs)
inv3 U: all t:Track | t in Exit => no t.(^succs)
inv3 C: all t:Track | t in Exit <=> no t.(^succs)
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv4 U: all t:Track | t in Entry => t not in Track.^(succs)
inv4 U: all disj t,t2:Track | t in Entry => t not in t2.^(succs)
inv4 B: all disj t,t2:Track | t in Entry <=> t not in t2.^(succs)
inv4 U: all disj t,t2:Track | t in Entry <=> t not in Track.^(succs)
inv4 C: all disj t:Track | t in Entry <=> t not in Track.^(succs)
inv5 S: all
inv4 C: all t:Track | t in Entry <=> t not in Track.^(succs)
inv5 U: all t:Track | t in Junction => t in Track.^(succs)
inv5 B: all t:Track | t in Junction <=> t in Track.^(succs)
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs)
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs) and t3 in t2.^(succs)
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs) and t3 in t2.succs
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs) and t3 in t2.succs and t not in t.^(succs)
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t3.succs and t3 in t2.succs and t not in t.^(succs)
inv5 B: all t:Track | t in Junction <=> t in Track.^(succs) and t in Track.succs
inv5 B: all t,t2,t3:Track | t in Junction <=> t in t2.succs and t in t3.succs
inv5 B: all disj t,t2,t3:Track | t in Junction <=> t in t2.succs and t in t3.succs
inv5 B: all disj t,t2,t3:Track | t in Junction <=> t in t2.succs and t in t3.succs and t not in t.succs
inv5 B: all disj t,t2,t3:Track | one t2.succs and one t3.succs and t in t2.succs and t in t3.succs <=> t in Junction
inv5 S: all disj t,t2,t3:Track | t in Juction <=> some t in Track.^(succs)
inv5 T: all disj t,t2,t3:Track | t in Junction <=> some t in Track.^(succs)
inv5 B: all disj t,t2,t3:Track | one t2.succs and one t3.succs and t in t2.succs and t in t3.succs or t in Track.^(succs)<=> t in Junction
inv5 B: all disj t,t2,t3:Track | one t2.succs and one t3.succs and t in t2.succs and t in t3.succs and t not in t.^(succs) or t in Track.^(succs)<=> t in Junction
inv5 B: all disj t,t2,t3:Track | (one t2.succs and one t3.succs and t in t2.succs and t in t3.succs and t not in t.^(succs)) or t in Track.^(succs)<=> t in Junction
NA M: MOD BASE MODEL
inv7 C: all t:Track | t not in t.^(succs)
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs)
inv8 B: all e:Entry, ex:Exit | ex in Entry.^(succs)
inv8 B: all e:Entry, ex:Exit | Exit in Entry.^(succs)
inv8 S: all e:Entry, ex:Exit | ex in all e.^(succs)
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs) and ex!=e
inv8 O: all disj e:Entry, ex:Exit | ex in e.^(succs)
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs) and ex in Track.^(succs)
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs) and ex in (Track.^(succs) - Exit)
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs) and ex in (Track.^(succs) - Exit) and ex!=e
inv8 O: all e:Entry, ex:Exit | ex in e.^(succs) and ex in (Track.^(succs) - Exit) and Exit!=Entry
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.succs => s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.succs <=> s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in t.^(succs) <=> s not in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j in t.succs <=> s in t.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in Track.^(succs) <=> s not in Track.signals
inv9 B: all t:Track, j:Junction, s:Semaphore | j not in Track.^(succs) => s not in Track.signals
inv10 B: all t:Track, j:Junction, s:Semaphore | j in t.succs => s in t.signals
inv10 B: all t:Track, j:Junction, s:Semaphore | j in t.succs <=> s in t.signals
inv10 T: all t:Track, j:Junction, s:Semaphore | j in t.succs[0] <=> s in t.signals
inv10 T: all t:Track, j:Junction, s:Semaphore | j = t.succs[0] <=> s in t.signals
NA H: THEME UPDATE
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv2 C: all s:Signal | one t:Track | s in t.signals
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv3 U: all t:Exit | no t.^(succs)
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv3 U: all t:Track | t in Exit => no t.^(succs)
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv4 C: all t:Track | t in Entry <=> t not in Track.^(succs)
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv6 T: all e:Entry | some Speed in e.signals
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv7 C: all t:Track | t not in t.^(succs)
inv5 B: all t:Track | t in Junction <=> t in Track.^(succs)
inv5 B: all disj t,t2,t3:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs)
inv5 B: all disj t,t2,t3:Track | t in Junction <=> t in t2.(succs) and t in t3.(succs)
inv5 B: all disj t,t2,t3:Track | t in Junction <=> t in t2.succs and t in t3.succs
inv5 S: all t:Track | t in Junction <=> t in t2.^(succs) and t in t3.^(succs)
inv5 B: all t:Track | t in Junction <=> t in Track.^(succs)
inv5 B: all t:Track | t in Track.^(succs) implies #Track.^(succs)>1
inv5 B: all t:Junction | t in Track.^(succs) implies #Track.^(succs)>1
inv5 B: all t1,t2,t3:Track | t1 in t2.succs and t1 in t3.succs implies t1 in Junction
inv5 B: all t1,t2,t3:Track | t1 in t2.^(succs) and t1 in t3.^(succs) implies t1 in Junction
inv5 B: all t1,t2,t3:Track | t1 in t2.^(succs) && t1 in t3.^(succs) implies t1 in Junction
inv5 B: all disj t1,t2,t3:Track | t1 in t2.^(succs) && t1 in t3.^(succs) implies t1 in Junction
inv8 E: 
inv8 O: all ex:Exit, en:Entry | ex in en.^(succs)
inv8 B: all ex:Exit, en:Entry | ex in Entry.^(succs)
inv8 S: all ex:Exit, | ex in Entry.^(succs)
inv8 S: all ex:Exit, | ex in Entry
inv8 S: all ex:Exit, | ex in Entry.^(succs)
inv8 S: all ex:Exit, | ex in Entry.^(succs)
inv8 B: all ex:Exit | ex in Entry.^(succs)
inv8 B: all ex:Exit | ex in Entry
inv8 O: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.succs
inv8 C: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv8 C: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv8 O: all  t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv8 C: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv8 O: all t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv8 C: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv9 T: all t:Track, s:Semaphore | t in Junction not in Track.^(succs) => s not in Track.signals
inv9 T: all t:Track, s:Semaphore | t in Junction not in Track.^(succs) => s not in Track.signals
inv9 B: all t:Track, s:Semaphore | t in Junction && t not in Track.^(succs) => s not in Track.signals
inv9 B: all t:Track, s:Semaphore | t in Junction && t not in Track.^(succs) <=> s not in Track.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | t not in t.succs <=> s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs <=> s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs => s not in t.signals
inv9 B: all t:Track, s:Semaphore, j:Junction | j not in t.succs <=> s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore, j:Junction | t2 in Junction && t2 not in t.succs => s not in t.signals
inv9 B: all disj t,t2:Track, s:Semaphore | t2 in Junction && t2 not in t.succs => s not in t.signals
inv10 T: all t:Track, j:Junction | some s:Semaphore | j in t.succs[0] <=> s in t.signals
inv10 O: all t:Track, j:Junction | some s:Semaphore | j in t.succs <=> s in t.signals
inv10 O: all t:Track, j:Junction | some s:Semaphore | j in t.succs => s in t.signals
NA H: THEME UPDATE
inv1 C: some ex:Exit, e:Entry | e in Track and ex in Track
inv2 C: all s:Signal | one t:Track | s in t.signals
inv3 C: all t:Track | t in Exit <=> no t.^(succs)
inv4 C: all t:Track | t in Entry <=> t not in Track.^(succs)
inv5 E: 
inv6 C: all e:Entry | some s:Speed | s in e.signals
inv7 C: all t:Track | t not in t.^(succs)
inv8 C: all disj t1,t2:Track | t1 in Entry && t2 in Exit implies t2 in t1.^(succs)
inv9 E: 
inv10 O: all t:Track, j:Junction | some s:Semaphore | j in t.succs => s in t.signals
inv5 C: all j : Track | #succs.j > 1 iff j in Junction
inv9 C: all t : Track | no t.succs&Junction implies t.signals in Signal-Semaphore

