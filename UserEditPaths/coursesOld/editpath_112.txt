NA H: THEME UPDATE
inv5 E: 
inv5 E: 
inv3 C: Course in Person.teaches
inv3 O: all c: Course | some p: Professor | p->c in teaches
inv3 O: all c: Course | some p: Professor | p->c in teaches
inv3 O: all c: Course | some p: Professor | p->c in teaches
inv3 O: all c: Course | some p: Professor | p->c in teaches
inv5 U: all pj: Project, p: Person | some p.projects and pj in p.projects implies p in Student
inv5 C: Person<:projects in Student some -> Project
inv5 T: all pj: Project, p: Person | some projects and pj in p.projects implies p in Student
inv5 U: all pj: Project, p: Person | some Person<:projects and pj in p.projects implies p in Student
inv5 U: all pj: Project, p: Person | pj in p.projects implies p in Student
inv5 B: some Student<:projects	  all pj: Project, p: Person | pj in p.projects implies p in Student
inv5 B: some Student<:projects
inv5 B: some Student<:projects	  all pj: Project, p: Person | pj in p.projects implies p in Student
inv5 C: Person<:projects in Student some -> Project
inv5 U: Person<:projects in Student -> Project
inv5 B: Person<:projects in Student lone -> Project
inv5 C: Person<:projects in Student some -> Project
inv5 U: all pj: Project, p: Person | pj in p.projects implies p in Student
inv5 C: all pj: Project, p: Person | pj in p.projects implies p in Student	  all pj: Project | some p: Person | pj in p.projects
inv5 U: all pj: Project, p: Person | pj in p.projects implies p in Student and	  all pj: Project | some p: Person | pj in p.projects
inv5 C: all pj: Project, p: Person | pj in p.projects implies p in Student	  all pj: Project | some p: Person | pj in p.projects
inv6 U: all s: Student, p: Project | p in s.projects implies p in s.enrolled.projects
inv6 B: all s: Student | s.(Person<:projects).~(Course<:projects) in s. enrolled
inv6 B: all s: Student | s.(Person<:projects).~(Course<:projects) in s. enrolled
inv7 U: all c:Course, s:Student | lone (s.projects) & (c.projects)
inv8 U: all p: Professor, c: Course | c in p.enrolled implies c !in p.teaches
inv8 U: all p: Professor | p not in (p.teaches.~enrolled)
inv8 U: all p: Professor | p not in (p.teaches.~enrolled)
inv9 B: all p: Professor, c: p.teaches | all p2: Professor - Student | c !in p2.enrolled
inv9 U: all p: Professor, c: p.teaches | no (c.~teaches-p) & (p.teaches.~enrolled)
inv9 U: all p, cp: Professor, c: p.teaches | cp not in c.enrolled
inv9 S: all p, cp: Professor, c: p.teaches | c not in p2.enrolled
inv9 B: all p, cp: Professor, c: p.teaches | c not in cp.enrolled
inv9 B: all p, cp: Professor, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 B: all disj p, cp: Professor, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 S: all disj xp, cp: Professor, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 B: all disj p, cp: Professor, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 B: all disj p, cp: Professor, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 B: all p: Professor, cp: Professor-Student, c: Course | c in p.teaches implies c not in cp.enrolled
inv9 B: all p, coll: Professor, c: Course | c in p.teaches
inv9 B: all p, coll: Professor, c: Course | c in p.teaches implies c not in coll.enrolled
inv9 B: all p, coll: Professor, c: Course | c in p.teaches iff c not in coll.enrolled
inv9 B: all p, coll: Professor, c: Course | (c in p.teaches iff c not in coll.enrolled)
inv9 B: all p, coll: Professor, c: Course | (c in p.teaches => c not in coll.enrolled)
inv10 S: all p: Person, c: Course: g: Grade | (c->p->g) in Grades implies p in Student
inv10 S: all p: Person, c: Course, g: Grade | (c->p->g) in Grades implies p in Student
inv10 C: all p: Person, c: Course, g: Grade | (c->p->g) in grades implies p in Student
inv11 U: all s: Student | grades.Grade.s in s.enrolled
inv12 U: all s: Student, c: Course | lone g: Grade | (c->s->g) in grades
inv14 U: all disj s1, s2 : Student | lone (s1.projects & s2.projects)
inv14 S: all disj s1, s2: Student, all pj: Project | pj in s1.projects implies pj not in s2.projects
inv14 B: all disj s1, s2: Student, pj: Project | pj in s1.projects implies pj not in s2.projects
inv14 U: all disj s1, s2: Student, pj: Project | pj in s1.projects implies pj not in s2.projects && pj in s2.projects implies pj not in s1.projects
inv14 B: all disj s1, s2: Student, pj: Project | (pj in s1.projects implies pj not in s2.projects) && (pj in s2.projects implies pj not in s1.projects)
inv14 U: all disj s1, s2 : Student | lone (s1.projects & s2.projects)
inv13 S: all c : Course | some s : (c .~enrolled) | {	  	 max[Person . (c . grades)] = (s . (c . grades))	  	some (c . projects & s . projects)
inv14 U: all disj s1, s2 : Student | lone (s1.projects & s2.projects)
inv13 B: all c : Course | some s : (c .~enrolled) | {	  	 max[Person . (c . grades)] = (s . (c . grades))	  	some (c . projects & s . projects)	   }
inv13 B: all c : Course | some s : (c.~enrolled) | 	  	 max[Person.(c.grades)] = (s.(c . grades)) implies	  	some (c . projects & s . projects)
inv13 B: all c : Course, s: (c.~enrolled) | 	  	 max[Person.(c.grades)] = (s.(c.grades)) implies	  	some (c . projects & s . projects)
inv13 B: all c : Course, s: (c.~enrolled) | 	  	 max[Student.(c.grades)] = (s.(c.grades)) implies	  		some (c.projects & s.projects)
inv13 B: all c : Course, s: (c.~enrolled) | 	  	 (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: (c.~enrolled) | 	  	 (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: (c.~enrolled) | 	  	 (s.(c.grades)) = max[Student.(c.grades)] &&	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: (c.~enrolled) | 	  	 (s.(c.grades)) = max[Student.(c.grades)] iff	  		some (c.projects & s.projects)
inv13 S: all c: Course s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] 	  		some (c.projects & s.projects)
inv13 S: all c: Course, s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] 	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] and	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects)
inv13 B: all c: Course, s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects) && s in c.enrolled
inv13 B: all c: Course, s: Student | 	  	 (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects) && c in s.enrolled
inv13 B: all c: Course, s: Student | 	  	 c in s.enrolled && (s.(c.grades)) = max[Student.(c.grades)] implies	  		some (c.projects & s.projects)
inv15 S: all c: Course, pj: c.projects, disj s1, s2: p.~(Student<:projects) |	  		(s1.(c.grades)).prev =  (s2.(c.grades)) or	  		(s2.(c.grades)).prev =  (s1.(c.grades))
inv15 B: all c: Course, pj: c.projects, disj s1, s2: pj.~(Student<:projects) |	  		(s1.(c.grades)).prev =  (s2.(c.grades)) or	  		(s2.(c.grades)).prev =  (s1.(c.grades))
inv15 B: all c: Course, pj: c.projects, disj s1, s2: pj.~(Student<:projects) |	  		(s1.(c.grades)) =  (s2.(c.grades)) or	  		(s1.(c.grades)).prev =  (s2.(c.grades)) or	  		(s2.(c.grades)).prev =  (s1.(c.grades))
inv15 B: all c: Course, pj: c.projects, disj s1, s2: pj.~(Student<:projects) |	  		no s1.(c.grades) or		  		(s1.(c.grades)) =  (s2.(c.grades)) or	  		(s1.(c.grades)).prev =  (s2.(c.grades)) or	  		(s2.(c.grades)).prev =  (s1.(c.grades))
inv15 B: all c: Course, pj: c.projects, disj s1, s2: pj.~(Student<:projects) |	  		no s1.(c.grades) or	no s2.(c.grades) or	  		(s1.(c.grades)) =  (s2.(c.grades)) or	  		(s1.(c.grades)).prev =  (s2.(c.grades)) or	  		(s2.(c.grades)).prev =  (s1.(c.grades))

