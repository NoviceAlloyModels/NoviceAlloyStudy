NA H: THEME UPDATE
inv1 B: all p : Person | some c : Course | p->c in enrolled => p in Student
inv1 C: all p : Person | all c : Course | p->c in enrolled => p in Student
inv1 C: all p : Person, c : Course | p->c in enrolled => p in Student
inv2 S: all p : Person, c : Course | p->c in teaches => p in Teacher
inv2 C: all p : Person, c : Course | p->c in teaches => p in Professor
inv3 O: all c : Course | some p : Professor | p->c in teaches
inv4 C: all p : Project | one c : Course | c->p in projects
inv5 U: all pro : Project | some per : Person | per->pro in projects && per in Student
inv5 B: all pro : Project | all per : Person | per->pro in projects && per in Student
inv5 U: all pro : Project | some per : Person | per->pro in projects => per in Student
inv5 B: all pro : Project | some per : Person | per->pro in projects => per in Student && per not in Professor
inv5 U: all pro : Project | all per : Person | per->pro in projects => per in Student
inv5 B: all pro : Project | all per : Person | per->pro in projects => per in Student && per not in Professor
inv5 C: all pro : Project, per : Person | per->pro in projects => per in Student		all pro : Project | some per : Person | per->pro in projects
inv5 C: all pro : Project, per : Person | per->pro in projects => per in Student				all pro : Project | some per : Person | per->pro in projects
inv6 B: all s : Student, p : Project, c : Course | s->p in projects => s->c in enrolled
inv6 U: all s : Student, p : Project | s->p in projects => some c : Course | s->c in enrolled && c->p in projects
inv6 U: all s : Student, p : Project | 	  		s->p in projects => some c : Course | s->c in enrolled && c->p in projects
inv7 B: all s : Student | lone p : Project | s->p in projects
inv7 S: all per : Person | per in Student => lone pro : Project | s->p in projects
inv7 B: all per : Person | per in Student => lone pro : Project | per->pro in projects
inv7 S: all s : Student | #s.projects.p < 2
inv7 B: all s : Student | #s.projects < 2
inv7 B: all s : Student | #s.projects = 1
inv7 B: all s : Person | s in Student => #s.projects = 1
inv7 B: all s : Person | s in Student => #s.projects <= 1
inv7 B: all s : Person | s in Student && s not in Professor => #s.projects <= 1
inv7 U: all s : Person | s in Student && s not in Professor => #s <= 1
inv7 U: all per : Person | per in Student => all c : Course | lone pro : Project | c->pro in projects && per->pro in projects
inv7 U: all per : Person | 	  		per in Student => all c : Course | lone pro : Project | 	  			c->pro in projects && per->pro in projects
inv7 S: all s : Student | all c : Course | lone pro : Project | 	  			c->pro in projects && per->pro in projects
inv7 U: all s : Student | all c : Course | lone p : Project | 	  			c->p in projects && s->p in projects
inv7 U: all s : Student, c : Course | lone p : Project | 	  		c->p in projects && s->p in projects
inv7 U: all s : Student, c : Course | lone p : Project | 	  		c->p in projects && s->p in projects
inv8 U: all p : Professor | p->p not in teaches
inv8 U: all p : Professor, c : Course | p->c in teaches => p->c not in enrolled
inv8 U: all p : Professor, c : Course | p->c in teaches => p->c not in enrolled
inv9 B: all p1, p2 : Professor, c : Course | p1->c in teaches => p2->c not in enrolled
inv10 C: all p : Person, c : Course, g : Grade | c->p->g in grades => p in Student
inv11 S: all s : Student, c : Course, g : Grade | c->s->g in grades => p->c in enrolled
inv11 U: all s : Student, c : Course, g : Grade | c->s->g in grades => s->c in enrolled
inv12 U: all s : Student, c : Course | lone g : Grade | c->s->g in grades
inv13 U: all s : Student, c : Course | some g : Grade | c->s->g in grades && g = max[Grade] => some p : Project |  s->p in projects && c->p in projects
inv13 U: all s : Student, c : Course, g : Grade | 	  		c->s->g in grades && g = max[Grade] => some p : Project |  s->p in projects && c->p in projects
inv14 B: all s1, s2 : Student, p1, p2 : Project | 	  		s1 != s2 && s1->p1 in projects && s2->p2 in projects => p1 != p2
inv14 U: all s1, s2 : Student, p1, p2 : Project | 	  		s1 != s2 && p1 != p2 && s1->p1 in projects && s2->p1 in projects 	  			=> not (s1->p2 in projects && s2->p2 in projects)

