NA H: THEME UPDATE
inv1 C: enrolled.Course in Student
inv2 C: teaches.Course in Professor
inv3 C: all c : Course | some teaches.c
inv4 C: all p : Project | one Course<:projects.p
inv5 C: Person<:projects.Project in Student		all p : Project | some Person<:projects.p
inv6 B: all s : Student | no s.projects.~(Course<:projects) - s.enrolled
inv7 U: all s : Student, c : s.enrolled | lone s.projects & c.projects
inv8 U: all p : Professor | no p.teaches & p.enrolled
inv9 E: 
inv10 C: Course.grades.Grade in Student
inv11 U: all s : Student | no grades.Grade.s - s.enrolled
inv12 U: all s : Student, c : s.enrolled | lone s.(c.grades)
inv9 U: all p1,p2 : Professor | all c1:Course |	      (p1!=p2 and p1->c1 in teaches and p2->c1 in teaches) implies 	       (all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled)
inv9 U: all p1,p2 : Professor | all c1:Course | p1!=p2 and p1->c1 in teaches and p2->c1 in teaches implies all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled
inv9 S: all c1 : Course, p1,p2 in teaches.c1 | p1!=p2 implies all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled
inv9 S: all c1 : Course, p1, p2 in teaches.c1 | p1!=p2 implies all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled
inv9 C: all c1 : Course, p1, p2 : teaches.c1 | p1!=p2 implies all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled
inv9 C: all c1, c2 : Course, p1, p2 : teaches.c1 | p1!=p2 implies p1->c2 in teaches implies p2->c2 not in enrolled
inv9 C: all c1, c2 : Course, p1, p2 : teaches.c1 | p1 != p2 implies p1 in teaches.c2 implies p2 not in enrolled.c2
inv9 O: all c1, c2 : Course, p1, p2 : teaches.c1 | p1 in teaches.c2 implies p2 not in enrolled.c2
inv9 O: all c1, c2 : Course, p1, p2 : teaches.c1 | p1 in teaches.c2 implies p2 not in enrolled.c2
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects+s.projects
inv13 U: all s : Student | all c : Course | s in c.grades.last implies (some p : Project | p in c.projects and p in s.projects)
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects+s.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in (c.projects)+(s.projects)
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects&s.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in s.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects & s.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some p : Project | p in c.projects & s.projects
inv14 B: all s1, s2 : Student | lone p : Project | s1 in projects.p and s2 in projects.p
inv14 B: all s1, s2 : Student | no p : Project | s1 in projects.p and s2 in projects.p
inv14 B: all s1, s2 : Student | lone p : Project | s1 in projects.p and s2 in projects.p
inv14 T: all p1, p2 : Project, s1, s2 : projects.p1 | s1 != s2 and p1 != p2 implies s1->p2 not in projects or s2->p2 not in projects
inv14 T: all p1, p2 : Project, s1, s2 : projects.p1 | s1 != s2 and p1 != p2 implies s1->p2 not in Person<:projects or s2->p2 not in Person<:projects
inv14 C: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies s1->p2 not in Person<:projects or s2->p2 not in Person<:projects
inv14 C: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies p2 not in s1.projects or p2 not in s2.projects
inv14 O: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies p2 not in s1.projects+s2.projects
inv14 O: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies p2 not in s1.projects+s2.projects
inv14 C: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies p2 not in s1.projects or p2 not in s2.projects
inv14 C: all p1, p2 : Project, s1, s2 : Person<:projects.p1 | s1 != s2 and p1 != p2 implies p2 not in s1.projects&s2.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone p : Project | s1 in projects.p and s2 in projects.p
inv14 U: all s1, s2 : Student | s1 != s2 implies lone p : Project | s1 in projects.p and s2 in projects.p
inv14 T: all s1, s2 : Student | s1 != s2 implies lone p : Project | p in s1.projects and p s2.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone p : Project | p in s1.projects and p in s2.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone p : Project | p in s1.projects&s2.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone s1.projects&s2.projects
inv13 U: all s : Student, c : Course | s in c.grades.last implies some c.projects & s.projects
inv13 C: all c : Course, s : c.grades.last | some c.projects & s.projects
inv14 U: all s1, s2 : Student | s1 != s2 implies lone s1.projects & s2.projects
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in next+prev
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1 != s2 implies s1.(c.grades)->s2.(c.grades) in next+prev
inv15 O: all c : Course, s1, s2 : Person<:projects.(c.projects) | s1 != s2 implies s1.(c.grades)->s2.(c.grades) in next+prev
inv15 O: all c : Course, s1, s2 : Person<:projects.(c.projects) | s1 != s2 implies s1.(c.grades)->s2.(c.grades) in next+prev+iden
inv15 O: all c : Course, s1, s2 : Person<:projects.(c.projects) | s1 != s2 implies s1.(c.grades)->s2.(c.grades) in next+prev or s1.(c.grades) = s2.(c.grades)
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1 != s2 implies s1.(c.grades)->s2.(c.grades) in next+prev or s1.(c.grades) = s2.(c.grades)
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in next+prev or s1.(c.grades) = s2.(c.grades)
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in next+prev+iden
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in prev+iden+next
inv15 T: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1->s2 in (prev+iden+next).(c.grades)
inv15 T: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in (prev+iden+next).(c.grades)
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in prev+iden+next
inv15 O: all c : Course, p : c.projects, s1, s2 : projects.p.(c.grades) | s1->s2 in prev+iden+next
inv15 T: all c : Course, p : c.projects, s1, s2 : projects.p | s1.(c.grades)->s2.(c.grades) in prev+iden+next
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in prev+iden+next
inv15 O: all c : Course, p : c.projects, s1, s2 : Person<:projects.p | s1.(c.grades)->s2.(c.grades) in prev+iden+next
inv15 O: all c : Course, p : c.projects, g1, g2 : projects.p.(c.grades) | g1->g2 in prev+iden+next
inv15 S: all c : Course, p : c.projects, | projects.p.(c.grades) in prev+iden+next	}
inv15 S: all c : Course, p : c.projects, | projects.p.(c.grades)->projects.p.(c.grades) in prev+iden+next	}
inv15 S: all c : Course, p : c.projects, | (projects.p.(c.grades))->(projects.p.(c.grades)) in prev+iden+next	}
inv15 S: all c : Course, p : c.projects | projects.p.(c.grades) in prev+iden+next	}
inv15 O: all c : Course, p : c.projects, g1, g2 : projects.p.(c.grades) | g1->g2 in prev+iden+next
inv13 B: all c : Course | some c.projects & c.grades.last.projects
inv13 B: all c : Course | some c.projects & (c.grades.last).projects
inv13 C: all c : Course, s : c.grades.last | some c.projects & s.projects
inv12 B: all s : Student | lone s.(Course.grades)
inv12 U: all s : Student, c : s.enrolled | lone s.(c.grades)
inv13 B: all c : Course | some c.projects & c.grades.last.projects
inv13 C: all c : Course, s : c.grades.last | some c.projects & s.projects

