NA H: THEME UPDATE
inv1 T: all p: Person | p in enrolled implies p in Student
inv1 U: all p: Person | p in Person.enrolled implies p in Student
inv1 T: all p: Professor | not p.enrolled
inv1 B: no Professor.enrolled
inv1 B: all p: Professor | no p.enrolled
inv1 S: all p: Professor | Courses no p.enrolled
inv1 T: all p: Professor | Course no p.enrolled
inv1 B: all p: Professor | p.enrolled not in Course
inv1 C: all p: (Person-Student) | no p.enrolled
inv1 C: no (Person-Student).enrolled
inv2 E: 
inv2 C: no (Person-Professor).teaches
inv3 S: some (Person-Students).teaches
inv3 B: some (Person-Student).teaches
inv3 B: some prof: Person-Student | Course.projects in prof.projects
inv3 O: Professor.teaches = Course
inv2 B: no Student.teaches
inv2 C: no (Person-Professor).teaches
inv3 O: Professor.teaches = Course
inv4 B: some c1,c2: Course, p: Project | p in c1.projects and p in c2.projects implies c1=c2
inv4 B: all c1,c2: Course | some p: Project | p in c1.projects and p in c2.projects implies c1=c2
inv4 U: all c1,c2: Course, p: Project | p in c1.projects and p in c2.projects implies c1=c2
inv4 C: all c1,c2: Course, p: Project | p in c1.projects and p in c2.projects implies c1=c2	  	Project in Course.projects
inv4 U: Project in Course.projects
inv4 C: all c1,c2: Course, p: Project | p in c1.projects and p in c2.projects implies c1=c2	  	Project in Course.projects
inv5 S: no (Person-Student).projects	  	Projects in (Person-Professor).projects
inv5 O: no (Person-Student).projects	  	Project in (Person-Professor).projects
inv5 B: Project in (Person-Professor).projects
inv4 C: all c1,c2: Course, p: Project | p in c1.projects and p in c2.projects implies c1=c2	  		  	Project in Course.projects
inv5 B: Project in (Person-Professor).projects
inv5 B: Project in (Person-Professor).projects
inv5 U: no (Person-Student).projects
inv5 B: no Professor.projects
inv5 B: Project in (Person-Professor).projects
inv5 T: no Project in (Person-Student).projects
inv5 U: no (Person-Student).projects
inv5 B: (Person-Student).projects not in Course.projects
inv5 S: (Person.projects - (Person - Student).projects = Project
inv5 S: (Person.projects - (Person - Student).projects = Project
inv5 C: Person.projects - (Person - Student).projects = Project
inv6 B: (Person-Professor).projects in (Student-Professor).enrolled.projects
inv6 U: (Person-Professor).projects in (Person-Professor).enrolled.projects
inv6 B: all s: Student | s.projects = s.enrolled.projects
inv6 B: all s: (Person-Student) | s.projects = s.enrolled.projects
inv6 B: all s: (Person-Professor) | s.projects = s.enrolled.projects
inv6 B: all s: (Person - Professor) | s.projects = s.enrolled.projects
inv6 B: all s: Student | s.projects = s.enrolled.projects
inv6 U: all s: Student | s.projects in s.enrolled.projects
inv7 B: all s: Student | one (s.projects & s.enrolled.projects)
inv7 S: some p1, p2: Projects, 	         c1,c2: course| 	    all s: Student| (p1+p2) in s.projects and 	  					p1 in c1.projects and p2 in c2.projects	  					implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: some p1, p2: Project, 	         c1,c2: course| 	    all s: Student| (p1+p2) in s.projects and 	  					p1 in c1.projects and p2 in c2.projects	  					implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: some p1, p2: Project, 	         c1,c2: Course| 	    all s: Student| (p1+p2) in s.projects and 	  					p1 in c1.projects and p2 in c2.projects	  					implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: some p1, p2: Project, 	         c1,c2: Course| 	    all s: Student| (p1+p2) in s.projects and 	  					p1 in c1.projects and p2 in c2.projects	  					implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: some p1, p2: Project, c1,c2: Course| all s: Student| ((p1+p2) in s.projects and (p1 in c1.projects) and (p2 in c2.projects)) implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: some p1, p2: Project, c1,c2: Course| all stu: Student| ((p1+p2) in stu.projects and (p1 in c1.projects) and (p2 in c2.projects)) implies c1 != c2	  	  	  s.projects in s.enrolled.projects
inv7 S: s.projects in s.enrolled.projects
inv7 B: some p1, p2: Project, c1,c2: Course | all stu: Student| ((p1+p2) in stu.projects and (p1 in c1.projects) and (p2 in c2.projects)) implies c1 != c2
inv7 B: some p1, p2: Project | all c1,c2: Course | all s: Student| ((p1+p2) in s.projects and (p1 in c1.projects) and (p2 in c2.projects)) implies c1 != c2
inv7 B: some p1, p2: Project | all c1,c2: Course | all s: Student| ((p1+p2) in s.projects and (p1 in c1.projects) and (p2 in c2.projects)) implies c1 != c2
inv7 S: some p1, p2: Project | all c1,c2: Course | all s: Student| ((p1+p2) in s.projects and (p1 in c1.projects) and (p2 in c2.projects) and (c1+c2) in s.enrolls ) implies c1 != c2
inv7 B: some p1, p2: Project | all c1,c2: Course | all s: Student| ((p1+p2) in s.projects and (p1 in c1.projects) and (p2 in c2.projects) and (c1+c2) in s.enrolled ) implies c1 != c2
inv7 U: all s : Student, c : Course | lone ((s.projects) & (c.projects))
inv8 U: all p: Professor, c: Course | c in p.teaches implies c not in p.enrolled
inv9 E: 
inv9 S: all p: Professor, c: Course | c in p.teaches implies ((c.grades.person) not in (p.teaches.grades.person))	  	  	  	  c.grades.person not in p.teaches
inv9 S: all p: Professor, c: Course | c in p.teaches implies ((c.grades.person) not in (p.teaches.grades.person))
inv9 B: all p: Professor, c: Course | c in p.teaches implies ((c.grades.Person) not in (p.teaches.grades.Person))
inv9 B: all p: Professor, c: Course | c in p.teaches implies ((c.grades.Person) not in (p.teaches.grades.Person))
inv9 B: all p: Professor, c: Course | c in p.teaches implies ((c.grades.Person) not in (p.teaches.grades.Person))
inv9 B: all p: Professor, c: Course | c in p.teaches implies ((c.grades.Person) not in (p.teaches.grades.Person))
inv9 B: all p: Professor | some c: Course | c in p.teaches implies ((c.grades.Person) not in (p.teaches.grades.Person))
inv9 S: all p: Professor | some c: Course | c in p.teaches implies ((c.grades.Person)
inv9 B: all p: Professor | some c: Course | c in p.teaches
inv9 B: all p: Professor | some c: Course | lone c.grades.Person
inv10 S: all c: Course | c.grades.Grade in Students
inv9 B: no(teaches & (Professor <: enrolled).~teaches.teaches)
inv9 B: all p: Professor | some c: Course | c in p.teaches implies ((c.grades.Grade) not in (p.teaches.grades.Grade))
inv9 B: all p: Professor | all c: Course | c in p.teaches implies ((c.grades.Grade) not in (p.teaches.grades.Grade))
inv9 B: all p: Professor | all c: Course | c in p.enrolled implies ((c.grades.Grade) not in (p.teaches.grades.Grade))
inv9 S: all p: Professor | all c: Course | c in p.enrolled implies ((c.grades.Grade) not in (p.teaches.grades.Grade) and p.enrolled not in c.grade.Grade.teaches)
inv9 B: all p: Professor | all c: Course | c in p.enrolled implies ((c.grades.Grade) not in (p.teaches.grades.Grade) and p.enrolled not in c.grades.Grade.teaches)
inv9 B: no(teaches & (Professor <: enrolled).~teaches.teaches)
inv11 S: all c: courses, s: students | s in c.grades.Grade implies c in s.enrolled
inv10 C: all c: Course | c.grades.Grade in Student
inv11 U: all c: Course, s: Student | s in c.grades.Grade implies c in s.enrolled
inv12 E: 
inv12 S: lone (Course.grades.Grade & Students)
inv12 B: lone (Course.grades.Grade & Student)
inv12 U: all c: Course | all s: Student | c in s.enrolled implies (lone (s & c.grades.Grade))
inv12 U: all c: Course, s: Student | (lone (s & c.grades.Grade))
inv12 U: all c: Course, s: Student | lone (s & (c.grades.Grade))
inv12 S: all c: Course | lone (Students & (c.grades.Grade))
inv12 B: all c: Course | lone (Student & (c.grades.Grade))
inv12 B: all c: Course | some s: Student | lone (s & (c.grades.Grade))
inv12 U: all c: Course,  s: Student | lone (s & (c.grades.Grade))
inv12 U: all s : Student, c : Course | lone (s.(c.grades))
inv12 U: all s : Student, c : Course | lone ((c.grades).s)
inv12 U: all s : Student, c : Course | lone (s.(c.grades))
inv13 C: grades.(max[Grade]) in projects.~projects
inv14 B: some s1, s2: Student | lone (s1.projects & s2.projects)
inv14 B: some s1, s2: (Person - Professor) | lone (s1.projects & s2.projects)
inv14 B: all s1, s2: Student | lone (s1.projects & s2.projects)
inv14 S: all s1, s2-s1: Student | lone (s1.projects & s2.projects)
inv14 U: all s1: Student, s2: Student - s1 | lone (s1.projects & s2.projects)
inv15 T: all c: Course, s1: Student, s2: Student - s1 | (s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects) implies (grades.s1 = grades.s2 + 1 or grades.s1 = grades.s2 - 1 or grades.s1 = grades.s2)
inv15 S: all c: Course, s1: Student, s2: Student - s1 | (s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects) implies (grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv15 S: all c: Course, s1: Student, s2: Student - s1 | (s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects) implies (grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv15 S: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies (grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv14 U: all s1: Student, s2: Student - s1 | lone (s1.projects & s2.projects)
inv14 U: all s1: Student, s2: Student - s1 | lone (s1.projects & s2.projects)
inv15 T: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies ((prev[grades.s2] + next[grades.s2] + grades.s2))
inv14 U: all s1: Student, s2: Student - s1 | lone (s1.projects & s2.projects)
inv15 B: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects))
inv15 U: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies (grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv15 T: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies (c.grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv15 T: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies (c.grades.s1 in (prev[grades.s2] + next[grades.s2] + grades.s2))
inv15 T: all c: Course, s1: Student, s2: Student - s1 | ((s1.enrolled in c) and (s2.enrolled in c) and lone (s1.projects & s2.projects)) implies c.grades.s1
inv15 O: all p : Project, g,h : (projects.p).grades[projects.p] | g in (h + prev[h] + next[h])
NA H: THEME UPDATE

