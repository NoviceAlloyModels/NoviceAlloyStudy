NA H: THEME UPDATE
inv1 B: all c : Course | c.grades.Grade = Student
inv1 T: all c : Course | c.grades.Grade is in Student
inv1 B: all c : Course | c.grades.Grade in Student
inv1 B: all c : Course | all p : Person | p in c.grades.Grade => p in Student
inv1 B: all c : Course | Student in c.grades.Grade
inv1 B: all c : Course | Professor not in c.grades.Grade
inv1 B: all c : Course | Student in c.grades.Grade and Professor not in c.grades.Grade
inv1 B: all c : Course | all p : Person | p in c.grades.Grade implies p in Student
inv1 B: all c : Course | all p : Person | p in c.grades.Grade implies p = Student
inv1 B: all c : Course | all p : Person | p in c.grades.Grade implies p=Student
inv1 B: all c : Course | all p : Person | p in c.grades.Grade implies p in Student
inv1 B: all c : Course | all s : Student | all p : Person-Student | s in c.grades.Grade and p not in c.grades.Grade
inv1 T: all p : Person | p.enrolled implies p in Student
inv1 C: all p : Person | all c : Course | c in p.enrolled implies p in Student
inv1 C: all p : Person | all c : Course | c in p.enrolled => p in Student
inv2 B: all p : Person | all c : Course | c in p.teaches => p in Student
inv2 C: all p : Person | all c : Course | c in p.teaches => p in Professor
inv2 C: all p : Person | all c : Course | c in p.teaches => p in Professor
inv3 O: all c : Course | c in Professor.teaches
inv4 S: all p : Project | p in Corse.projects
inv4 U: all p : Project | p in Course.projects
inv4 S: all c Course | one p : Project | p in c.projects
inv4 B: all c : Course | one p : Project | p in c.projects
inv4 T: all p : Project | p in Course.Project		all c : Course | one p : Project | p in c.projects
inv4 B: all p : Project | p in Course.projects		all c : Course | one p : Project | p in c.projects
inv4 B: all p : Project | p in Course.projects		one c : Course | all p : Project | p in c.projects
inv4 O: all p : Project | p in Course.projects		all c : Course | all p1, p2 : Project | p1 in c.projects and p2 in c.projects implies p1!=p2
inv4 C: all p : Project | p in Course.projects		all c1, c2 : Course | all p : Project | p in c1.projects and p in c2.projects implies c1=c2
inv5 O: all p : Project | p in Student.enrolled
inv5 U: all p : Project | p in Student.projects
inv5 U: all p : Project | all s : Person | p in s.projects implies s in Student
inv5 C: all p : Project | all s : Person | p in s.projects implies s in Student	  	all p : Project | p in Student.projects
inv6 S: all s : Student | c : Course | p : Project | s
inv6 S: all s : Student | c : Course | p : Project | c in s.enrolled
inv6 S: all s : Student , c : Course | p : Project | c in s.enrolled
inv6 B: all s : Student | all c : Course | all p : Project | c in s.enrolled
inv6 U: all s : Student | all c : Course | all p : Project | p in s.projects implies p in s.enrolled.projects
inv6 U: all s : Student | all p : Project | p in s.projects implies p in s.enrolled.projects
inv7 B: all s : Student | lone p : Project | p in s.projects implies p in s.enrolled.projects
inv7 T: all s : Student | all c : Course | lone s.projects in c.projects
inv7 T: all s : Student | all c : Course | lone (s.projects in c.projects)
inv7 T: lone (Student.projects in Course.projects)
inv7 B: lone (Student.projects&Course.projects)
inv7 B: lone Student.projects&Course.projects
inv7 B: lone Student.projects&Course.projects
inv7 B: lone Student.projects&Course.projects
inv7 T: all s : Student | all p1, p2 : projects | all c : Course | p1 in s.projects and p2 in s.projects and p1 in c.projects implies p2 not in c.projects
inv7 T: all s:Student|all p1,p2:projects|all c:Course|p1 in s.projects and p2 in s.projects and p1 in c.projects implies p2 not in c.projects
inv7 T: all p : Project | all c : Course | all s : Student | c in p.enrolled and s in p.projects implies lone p.projects&c.projects
inv7 U: all s : Student | all p1,p2 : Project | all c : Course | (p1 + p2) in s.projects and (p1 + p2) in c.projects implies p1=p2
inv7 U: all s : Student | all p : Project | all c : Course | p in s.projects and p in c.projects implies lone p
inv7 B: all s : Student | all p : Project | all c : Course | p in s.projects and p in c.projects
inv7 B: all s : Student | lone p : Project | all c : Course | p in s.projects and p in c.projects
inv7 U: all s : Student | all c : Course | lone p : Project | p in s.projects and p in c.projects
inv7 U: all s : Student | all c : Course | lone p : Project | p in s.projects&c.projects
inv7 U: all s : Student | all c : Course | lone s.projects&c.projects
inv7 B: all s : Student | lone s.projects&Course.projects
inv7 U: all s : Student | all c : Course | lone s.projects&c.projects
inv8 U: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{	  	(Professor-p).(p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{	  	(Professor-p).teaches in (p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{	  	p implies (Professor-p).teaches = (p.teaches)
inv9 U: all p1,p2 : Professor | all c1,c2 : Course | p1!=p2 and c1 in p1.teaches&p2.teaches and c2 in p1.teaches implies c2 not in p2.enrolled
inv9 S: all p1,p2 : Professor | all c1,c2 : Course | colleagues(p1,p2) implies c2 not in p2.enrolled	}		pred colleagues[p1, p2 : Professor]{		p1!=p2 and c1 in p1.teaches&p2.teaches and c2 in p1.teaches
inv9 S: all p1,p2 : Professor | all c1,c2 : Course | colleagues[p1,p2] implies c2 not in p2.enrolled	}		pred colleagues[p1, p2 : Professor]{		p1!=p2 and c1 in p1.teaches&p2.teaches and c2 in p1.teaches
inv9 U: all p1,p2 : Professor | all c : Course | colleagues[p1,p2] implies c not in p2.enrolled	}		pred colleagues[p1, p2 : Professor]{		all c : Course | p1!=p2 and c in p1.teaches&p2.teaches and c in p1.teaches
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{		p implies (Professor-p).teaches = (p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{		all p : Professor | p implies (Professor-p).teaches = (p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{		all p1 : Professor | p1 implies (Professor-p).teaches = (p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{		all p1 : Professor | p1 implies p1.teaches = (p.teaches)
inv8 T: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled	}		fun colleagues[p : Professor] : set Professor{		Professor-p.teaches = (p.teaches)
inv10 C: all c : Course | all p : Person | p in c.grades.Grade implies p in Student
inv11 U: all c : Course | all p : Student | p in c.grades.Grade implies c in p.enrolled
inv12 U: all c : Course | all p : Student | lone p&c.grades.Grade
inv12 B: all c : Course | lone p : Student | p in c.grades.Grade
inv12 T: all c : Course | all p : Student | c in p.enrolled implies lone p in c.grades.Grade
inv12 U: all c : Course | all p : Student | c in p.enrolled implies lone p&c.grades.Grade
inv12 B: all c : Course | all p1,p2 : Student | p1+p2 in c.grades.Grade implies p1!=p2
inv12 B: all c : Course | all p : Student | c in p.enrolled implies p in c.grades.Grade		all c : Course | all p1,p2 : Student | p1+p2 in c.grades.Grade implies p1!=p2
inv12 B: all c : Course | all p1,p2 : Student | p1+p2 in c.grades.Grade implies p1!=p2
inv12 B: all c : Course | all p : Student | c in p.enrolled implies p in c.grades.Grade		all c : Course | all p1,p2 : Student | p1+p2 in c.grades.Grade implies p1!=p2
inv12 U: all g1,g2 : Grade | all s : Student | all c : Course | (s->g1 + s->g2) in c.grades implies g1=g2
inv12 U: all g1,g2 : Grade | all s : Student | all c : Course | (g1 + g2) in c.grades.s implies g1=g2
inv12 U: all g1,g2 : Grade | all s : Student | all c : Course | (g1 + g2) in s.(c.grades) implies g1=g2
inv12 T: all g1,g2 : Grade | all s : Student | all c : Course | g1+g2 in s.c.grades implies g1=g2
inv12 U: all g1,g2 : Grade | all s : Student | all c : Course | g1+g2 in s.(c.grades) implies g1=g2
inv13 B: all s : Student | all c : Course | s in c.grades.last implies c.projects in s.projects
inv13 B: all s : Student | all c : Course | all p : Project | s in c.grades.last and p in c.projects implies p in s.projects
inv13 B: all c : Course | all s : Student | all p : c.projects | s in c.grades.last and p in c.projects implies p in s.projects
inv8 U: all p : Professor | all c: Course | c in p.teaches implies c not in p.enrolled
inv8 U: all p : Professor | all c: p.teaches | c not in p.enrolled
inv12 U: all g1,g2 : Grade | all s : Student | all c : Course | g1+g2 in s.(c.grades) implies g1=g2
inv13 E: 
inv13 B: all s : Student | all c : s.enrolled | all p : c.projects | s in c.grades.last implies p in s.projects
inv13 U: all s : Student | all c : Course | s in c.grades.last implies some s.projects&c.projects
inv13 C: all c : Course | all s : c.grades.last | some s.projects&c.projects
inv14 B: all s1, s2 : Student | all p1, p2 : Project | p1 in s1.projects&s2.projects and p2 in s1.projects implies p2 not in s2.projects
inv14 B: all s1, s2 : Student | all p1, p2 : Project | p1 in s1.projects and p1 in s2.projects and p2 in s1.projects implies p2 not in s2.projects
inv14 B: all s1, s2 : Student | all p1, p2 : Project | p1+p2 in s1.projects and p1 in s2.projects and s1!=s2 implies p2 not in s2.projects
inv14 U: all s1, s2 : Student | all p1, p2 : Project | p1+p2 in s1.projects and p1 in s2.projects and s1!=s2 and p1!=p2 implies p2 not in s2.projects
inv14 U: all s1, s2 : Student | all p1, p2 : Project | p1 in s1.projects&s2.projects and p2 in s1.projects and s1!=s2 and p1!=p2 implies p2 not in s2.projects
NA M: MOD BASE MODEL
inv14 U: all s1, s2 : Student | all p1, p2 : Project | p1 in s1.projects&s2.projects and p2 in s1.projects and s1!=s2 and p1!=p2 implies p2 not in s2.projects
inv15 E: 
inv15 B: all s1, s2: Student | all c : Course | s1!=s2 and c in s1.enrolled+s2.enrolled and working2gether[s1,s2,c]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | p in s1.projects+s2.projects
inv15 S: all s1, s2: Student | all c : Course | s1!=s2 and c in s1.enrolled+s2.enrolled and working2gether[s1,s2,c] implies 	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects |  c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 B: all s1, s2: Student | all c : Course | s1!=s2 and c in s1.enrolled+s2.enrolled and working2gether[s1,s2,c]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 T: all s1, s2: Student | all c : Course | s1!=s2 and working2gether[s1,s2,c] implies s1(c.grades) = s2.(c.grades)	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 T: all s1, s2: Student | all c : Course | s1!=s2 and working2gether[s1,s2,c] implies s1(c.grades) = prev[s2.(c.grades)]	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 T: all s1, s2: Student | all c : Course | s1!=s2 and working2gether[s1,s2,c] implies s1(c.grades)=prev[s2.(c.grades)]	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
NA M: MOD BASE MODEL
NA M: MOD BASE MODEL
inv15 T: all s1, s2: Student | all c : Course |  working2gether[s1,s2,c] implies s1(c.grades)=prev[s2.(c.grades)]	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 B: all s1, s2: Student | all c : Course | working2gether[s1,s2,c]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 S: all s1, s2: Student | all c : Course | all g1,g2 : Grades | working2gether[s1,s2,c] and s1->g1 and s2->g2	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 T: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and s1->g1 and s2->g2	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and s1->g1 + s2->g2 in c.grades	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and s1->g1 + s2->g2 in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled+s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 U: all s1, s2: Student | all c : Course | some g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: some s1, s2: Student | all c : Course | some g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 U: all s1, s2: Student | all c : Course | some g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: all s1, s2: Student | all c : Course | some g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	  	  	all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects and p in s2.projects and p in c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects+s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
NA M: MOD BASE MODEL
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects and p in s2.projects and p in c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects and p in s2.projects and p in c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects+s2.projects and p in c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects&s2.projects and p in c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects&s2.projects&c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 U: all s1, s2: Student | all c : Course | some g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects&s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects&s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1!=g2 and g1 = prev[g2]
inv15 B: all p : Project | all s1,s2 : Student | all c : Course |	  	(s1!=s2 and p in s1.projects&s2.projects&c.projects) implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))
inv15 B: all s1,s2 : Student | all c : Course |	  	working2gether[s1,s2,c] implies	  	(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) 	  	implies (g1=prev[g2] or g2=prev[g1] or g1=g2))	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 B: all s1,s2 : Student | all c : Course |	  	working2gether[s1,s2,c] implies consecGrades[s1,s2,c]	}		pred consecGrades[s1,s2:Student,c:Course]{		all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) implies (g1=prev[g2] or g2=prev[g1] or g1=g2)	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 B: all s1,s2 : Student | all c : Course | working2gether[s1,s2,c] implies consecGrades[s1,s2,c]	}		pred consecGrades[s1,s2:Student,c:Course]{		all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) implies (g1=prev[g2] or g2=prev[g1] or g1=g2)	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 U: all s1,s2 : Student | all c : Course | working2gether[s1,s2,c] implies consecGrades[s1,s2,c]	}		pred consecGrades[s1,s2:Student,c:Course]{		all g1,g2 : Grade | s1->g1 in c.grades and g2->s2 in c.grades implies (g1=prev[g2] or g2=prev[g1] or g1=g2)	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 B: all s1,s2 : Student | all c : Course | working2gether[s1,s2,c] implies consecGrades[s1,s2,c]	}		pred consecGrades[s1,s2:Student,c:Course]{		all g1,g2 : Grade | s1->g1 in c.grades and s2->g2 in c.grades implies (g1=prev[g2] or g2=prev[g1] or g1=g2)	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 B: all s1,s2 : Student | all c : Course | working2gether[s1,s2,c] implies consecGrades[s1,s2,c]	}		pred consecGrades[s1,s2:Student,c:Course]{		all g1,g2 : Grade | s1->g1 + s2->g2 in c.grades implies (g1=prev[g2] or g2=prev[g1] or g1=g2)	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and p in s1.projects&s2.projects&c.projects
inv15 S: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}			pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects&s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1==g2 or g1 = prev[g2] or g2 = prev[g1]
inv15 B: all s1, s2: Student | all c : Course | all g1,g2 : Grade | working2gether[s1,s2,c] and (s1->g1)+(s2->g2) in c.grades implies consecGrades[g1,g2]	}		pred working2gether[s1,s2:Student,c:Course]{		all p : c.projects | s1!=s2 and c in s1.enrolled&s2.enrolled and p in s1.projects&s2.projects	}		pred consecGrades[g1,g2:Grade]{		g1=g2 or g1 = prev[g2] or g2 = prev[g1]

