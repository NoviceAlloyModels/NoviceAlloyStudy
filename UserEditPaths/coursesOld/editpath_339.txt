NA H: THEME UPDATE
inv4 C: all p: Project | one c: Course | p in c.projects
inv5 U: all p: Project | some s: Person | p in s.projects && s in Student
inv5 U: all p: Project | some s: Person | p in s.projects => s in Student
inv5 S: all p: Project | some s: Person | p in s.projects => s in Student	  	all p: Project | some s: Student | p in S.projects
inv5 U: all p: Project | some s: Person | p in s.projects => s in Student	  	all p: Project | some s: Student | p in s.projects
inv5 U: all p: Project | some s: Student | p in s.projects
inv5 U: all p: Project | some s: Person | p in s.projects => s in Student	  	all p: Project | some s: Student | p in s.projects
inv5 T: all p: Project | some s: Person | p in s.projects => s in Student	  	all p: Person | p.projects => p in Student
inv5 U: all p: Project | some s: Person | p in s.projects => s in Student	  	all p: Person | some p.projects => p in Student
inv5 C: all p: Project | some s: Person | p in s.projects	  	all p: Person | some p.projects => p in Student
inv6 T: all s: Student, c: Course | s.projects.Project = c => c in s.enrolled
inv6 B: all s: Student, c: Course | some p: Project | p in s.projects && p in c.projects => c in s.enrolled
inv6 B: all s: Student, c: Course, p: Project | p in s.projects && p in c.projects => c in s.enrolled
inv7 U: all s: Student, c: Course, p1, p2: Project | p1 in s.projects && p1 in c.projects && p2 in s.projects && p2 in c.projects => p1 = p2
inv7 B: all s: Student, c: Course, p1, p2: Project | p1&p2 in s.projects && p1&p2 in c.projects => p1 = p2
inv7 U: all s: Student, c: Course, p1, p2: Project | p1+p2 in s.projects && p1+p2 in c.projects => p1 = p2
inv8 B: all c: Course | some p1, p2: Professor | p1!=p2 && c in p1.teaches && c in p2.teaches
inv8 B: all c: Course | some p: Person | c in p.teaches => c not in p.enrolled
inv8 B: all c: Course | some p: Person | c in p.enrolled => c not in p.teaches
inv8 C: all c: Course, p: Person | c in p.teaches => c not in p.enrolled
inv9 B: all c: Course, p1, p2: Person | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person | some c: Course | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person | some c: Course | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 S: all p1, p2: Person | one p1.enrolled in p2.enrolled => all p1.teaches not in p2.enrolled
inv9 T: all p1, p2: Person | one p1.enrolled in p2.enrolled => p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person | lone c: Course | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person | some c: Course | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person | all c: Course | c in p1.enrolled && c in p2.enrolled => p1.teaches not in p2.enrolled
inv9 T: all p1, p2: Person | some c: Course | c in p1.enrolled && c in p2.enrolled => one p1.teaches not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | some c2: Course | c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 O: all p1, p2: Person, c1: Course | all c2: Course | c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | some c2: Course | c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | one c2: Course | c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | one c2: Course | p1!=p2 && c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | some c2: Course | p1!=p2 && c2 in p1.enrolled && c2 in p2.enrolled => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | some c2: Course | p1!=p2 && (c2 in p1.enrolled && c2 in p2.enrolled) || (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv9 U: all p1, p2: Person, c1: Course | some c2: Course | p1!=p2 &&  (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv9 O: all p1, p2: Person, c1: Course | one c2: Course | p1!=p2 && (c2 in p1.enrolled && c2 in p2.enrolled) || (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv9 O: all p1, p2: Person, c1: Course | one c2: Course | p1!=p2 &&  (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | lone c2: Course | p1!=p2 && (c2 in p1.enrolled && c2 in p2.enrolled) || (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv9 B: all p1, p2: Person, c1: Course | lone c2: Course | p1!=p2 &&  (c2 in p1.teaches && c2 in p2.teaches) => c1 in p1.teaches && c1 not in p2.enrolled
inv10 S: Course.grades.grade not in Professor
inv10 B: Course.grades.Grade not in Professor
inv10 C: Course.grades.Grade in Student
inv11 U: all s: Student, c: Course | s in c.grades.Grade => c in s.enrolled
inv12 T: all s: Student, c: Course | c in s.enrolled => one s in c.grades.Grade
inv12 B: all s: Student, c1, c2: Course | c1=c2 => s in c1.grades.Grade && s not in c2.grades.Grade
inv12 B: all s: Student, c1, c2: Course | c1=c2 => s not in c1.grades.Grade || s not in c2.grades.Grade
inv12 B: all s1, s2: Student, c: Course | s1 in c.grades.Grade && s2 in c.grades.Grade => s1!=s2
inv12 B: all s1, s2: Student, c: Course | s1+s2 in c.grades.Grade && s2 in c.grades.Grade => s1!=s2
inv12 B: all s: Student | lone g: Grade | s->g in Course.grades
inv12 U: all s: Student, c:Course | lone g: Grade | s->g in c.grades
inv12 U: all s: Student, c:Course | lone g: Grade | s->g in c.grades
inv13 E: 

