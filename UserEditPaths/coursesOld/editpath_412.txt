NA H: THEME UPDATE
inv1 S: enrolled.Person in Students
inv1 U: enrolled.Person in Student
inv1 U: enrolled.Person in Student
inv1 U: enrolled.Person in Student
inv1 C: enrolled.Course in Student
inv2 S: enrolled.Course in Teacher
inv2 B: enrolled.Course in Professor
inv2 C: teaches.Course in Professor
inv3 S: teaches in Course -> some Teacher
inv3 S: teaches in Teacher some -> some Course
inv3 S: teaches in Teacher some -> Course
inv3 S: teaches in Professor some -> Course
inv3 S: teaches in Professor some -> set Course
inv3 S: teaches in Professor some -> set Course
inv3 O: teaches in Professor some -> set Course
inv4 T: projects in Course one -> Project
inv4 C: Course<:projects in Course one -> Project
inv5 O: (Person<:projects).Person in Student	  	some (Person<:projects).Person
inv5 C: all p:Person, pr:Project | p->pr in Person<:projects => p in Student	  	all pr:Project | some p:Person | p->pr in Person<:projects
inv5 U: all p:Person, pr:Project | p->pr in Person<:projects => p in Student	  		  	(Person<:projects).Project in Student
inv5 B: all p:Person, pr:Project | p->pr in Person<:projects => p in Student	  		  	some (Person<:projects).Project
inv5 C: (Person<:projects).Project in Student	  	all pr:Project | some p:Person | p->pr in Person<:projects
inv5 C: (Person<:projects).Project in Student	  	Person<:projects in Person some -> Project
inv6 T: all s:Student, p:Project | s->p in Person<:projects => some c:enrolled | p in c.projects
inv6 U: all s:Student, p:Project | s->p in Person<:projects => some c:s.enrolled | p in c.projects
inv7 S: all s:Student, c:s.courses | lone p:s.projects | p in c.projects
inv7 U: all s:Student, c:s.enrolled | lone p:s.projects | p in c.projects
inv8 S: all t:Professor | some c:t.teaches => c not in t.projects
inv8 T: all t:Professor | some c:Course | c in t.teaches => c not in t.projects
inv8 B: all t:Professor | some c:Course | c in t.teaches => c not in t.enrolled
inv8 O: no enrolled.Course & teaches.Course
inv8 U: all t:Professor, c:Course | c in t.teaches => c not in t.enrolled
inv8 U: all t:Professor, c:t.teaches | c not in t.enrolled
inv9 S: all t1,t2:Teacher, c:t1.teaches | t2 not in enrolled.c
inv9 B: all t1,t2:Professor, c:t1.teaches | t2 not in enrolled.c
inv9 B: all t1,t2:Professor, c:Course | c in t1.teaches => c not in t2.enrolled
inv9 B: all t1,t2:Professor, c:Course | c in t1.enrolled and c in t2.enrolled => not some c2:t1.teaches | c2 in t2.enrolled
inv9 B: all t1,t2:Professor, c:t1.enrolled | c in t2.enrolled => not some c2:t1.teaches | c2 in t2.enrolled
inv7 U: all s:Student, c:Course | lone p:s.projects | p in c.projects
inv10 T: all c:Course, p:Person, g:Grade | c->p->g => p in Student
inv10 E: 
inv9 T: all t1,t2:Professor, c:Course | c in t1.enrolled and c in t2.enrolled => 	  		no t1->c in teaches and no t2->c in teaches
inv9 B: all t1,t2:Professor, c:Course | c in t1.enrolled and c in t2.enrolled => 	  		(t1->c not in teaches and t2->c not in teaches)
inv10 T: all c:Course, p:Person, g:Grade | c->p->g => p in Student
inv10 C: all c:Course, p:Person, g:Grade | c->p->g in grades => p in Student
inv11 C: all c:Course, p:Person, g:Grade | c->p->g in grades => c in p.enrolled
inv11 C: all c:Course, p:Person, g:Grade | c->p->g in grades => c in p.enrolled
inv12 C: all c:Course, p:Person | lone g:Grade | c->p->g in grades
inv12 C: grades in Course -> Person -> lone Grade
inv13 S: some Grande/last
inv13 S: some Grande.last
inv13 T: some Grade.last
inv13 S: some Grade/last
inv13 S: all s:Student, c:Course, g:Grade | c->p->g in grades and g in last => some p:c.projects | p in s.projects
inv13 S: all s:Student, c:Course, g:Grade | c->p->g in grades and g in last
inv13 U: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | p in s.projects
inv14 O: all p1,p2:Person | lone p:Project | p in p1.projects and p in p2.projects
inv14 O: all p1,p2:Person, p:Project | p in p1.projects and p in p2.projects => not some p3:Project | p3 != p and p3 in p1.projects and p3 in p2.projects
inv14 O: all p1,p2:Person, p:Project | p in p1.projects and p in p2.projects => (not some p3:Project | p3 != p and p3 in p1.projects and p3 in p2.projects)
inv14 B: all p1, p2 : Project, s1, s2: Student | not (s1->p1 in projects and s1->p2 in projects and s2->p1 in projects and s2->p2 in projects)
inv15 S: all c:Course , p:c.projects, s1, s2: (Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 and c->s2->g2 => ((prev.g1 = g2) or (g1=g2))
inv15 S: all c:Course, p:c.projects, s1, s2: (Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 and c->s2->g2
inv15 S: all c:Course, p:c.projects, s1, s2: Person, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 and c->s2->g2
inv15 S: all c:Course, p:c.projects, s1, s2: (Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((prev.g1 = g2) or (g1=g2))
inv15 S: all c:Course, p:c.projects, s1, s2: (Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades
inv15 S: all c:Course, p:c.projects, s1, s2: Person, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades
inv15 S: all c:Course, p:c.projects, s1, s2: Person, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades
inv13 S: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | c.s1.g
inv13 S: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | c.s1.g
inv13 S: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | c.s1.g
inv15 S: all c:Course, p:c.projects, s1, s2: Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv15 S: all c:Course, p:c.projects, s1, s2: Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv15 S: all c:Course, p:c.projects, s1, s2: Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv13 U: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | p in s.projects
inv13 U: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | p in s.projects
inv15 O: all c:Course, p:c.projects, s1, s2: (Person<:projects).Project, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv15 O: all c:Course, p:c.projects, s1, s2: (Person<:projects).p, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv15 O: all c:Course, p:c.projects, s1, s2: (Person<:projects).p, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2)  or (g1=g2))
inv15 O: all c:Course, p:c.projects, s1, s2: (Person<:projects).p, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
inv9 B: all t1,t2:Professor, c:Course | c in t1.enrolled and c in t2.enrolled => 	  		(t1->c not in teaches and t2->c not in teaches)
inv9 B: all t1,t2:Professor, c:Course | t1 != t2 and c in t1.enrolled and c in t2.enrolled => 	  		(t1->c not in teaches and t2->c not in teaches)
inv9 B: all t1,t2:Professor, c:Course | t1 != t2 and c in t1.enrolled and c in t2.enrolled => 	  		not some c2:Course | (c in t1.enrolled and c in t2.teaches) or (c in t2.enrolled and c in t1.teaches)
inv9 B: all t1,t2:Professor, c:Course | t1 != t2 and c in t1.enrolled and c in t2.enrolled => 	  		not some c2:Course | (c2 in t1.enrolled and c2 in t2.teaches) or (c2 in t2.enrolled and c2 in t1.teaches)
inv9 B: all t1,t2:Professor, c:t1.enrolled | t1 != t2 and c in t2.enrolled => 	  		not some c2:Course | (c2 in t1.enrolled and c2 in t2.teaches) or (c2 in t2.enrolled and c2 in t1.teaches)
inv1 C: enrolled.Course in Student
inv2 C: teaches.Course in Professor
inv3 O: teaches in Professor some -> set Course
inv4 C: Course<:projects in Course one -> Project
inv5 C: (Person<:projects).Project in Student	  	Person<:projects in Person some -> Project
inv6 U: all s:Student, p:Project | s->p in Person<:projects => some c:s.enrolled | p in c.projects
inv7 U: all s:Student, c:Course | lone p:s.projects | p in c.projects
inv8 U: all t:Professor, c:t.teaches | c not in t.enrolled
inv10 C: all c:Course, p:Person, g:Grade | c->p->g in grades => p in Student
inv11 C: all c:Course, p:Person, g:Grade | c->p->g in grades => c in p.enrolled
inv12 C: grades in Course -> Person -> lone Grade
inv13 U: all s:Student, c:Course, g:Grade | c->s->g in grades and g in last => some p:c.projects | p in s.projects
inv14 U: all p1, p2 : Project, s1, s2: Student | p1 != p2 and s1 != s2 => not (s1->p1 in projects and s1->p2 in projects and s2->p1 in projects and s2->p2 in projects)
inv15 O: all c:Course, p:c.projects, s1, s2: (Person<:projects).p, g1,g2:Grade | 	  		s1 != s2 and c->s1->g1 in grades and c->s2->g2 in grades => ((g1.prev = g2) or (g1=g2.prev) or (g1=g2))
NA H: THEME UPDATE
inv9 U: all t1,t2:Professor, c:t1.teaches | t1 != t2 and c in t2.teaches =>  	  		not some c2:Course | (c2 in t1.enrolled and c2 in t2.teaches) or (c2 in t2.enrolled and c2 in t1.teaches)

