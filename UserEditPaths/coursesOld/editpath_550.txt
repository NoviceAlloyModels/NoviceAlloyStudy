NA H: THEME UPDATE
inv1 T: all p:Professor , c:Course | p not in grades
inv1 T: all p:Professor , c:Course | not grades->p
inv1 T: all p:Professor , c:Course | grades->p
inv1 C: all p:Person | all c1:Course | p->c1 in enrolled implies p in Student
inv2 C: all p:Person | all c1:Course | p->c1 in teaches implies p in Professor
inv3 O: all c:Course | some p:Professor | p->c in teaches
inv4 C: all p:Project | one c:Course | p in c.projects
inv5 T: all proj:Project | some p:Person | p->proj in p.projects implies p is not Professor	    all proj:Project | some p:Student | p->proj in p.projects
inv5 T: all proj:Project | some p:Person | p->proj in p.projects implies p is not Professor	    all proj:Project | some p:Student | p->proj in p.projects
inv5 T: all proj:Project | some p:Person | p->proj in p.projects implies p is not Professor
inv4 C: all p:Project | one c:Course | p in c.projects
inv5 T: all proj:Project | some p:Student | p->proj in p.projects
inv5 T: all proj:Project | some p:Person | p->proj in p.projects implies p is not Professor
inv5 T: all proj:Project | some p:Person | p->proj in projects implies p is not Professor
inv5 B: all proj:Project | some p:Person | p->proj in projects implies p not in Professor
inv5 B: all proj:Project | all p:Person | p->proj in projects implies p in Professor	    all proj:Project | some p:Student | p->proj in projects
inv5 C: (all p1 : Project | some pr1 : Student | pr1->p1 in projects)	  	(all p2 : Project | all pr2 : Person   | pr2->p2 in projects implies pr2 in Student)
inv5 B: (all proj:Project | all p:Person | p->proj in projects implies p in Professor)	    (all proj:Project | some p:Student | p->proj in projects)
inv5 B: (all proj:Project | some p:Student | p->proj in projects)			(all proj:Project | all p:Person | p->proj in projects implies p in Professor)
inv5 C: all proj:Project | all p:Person | p->proj in projects implies p in Student	    all proj:Project | some p:Student | p->proj in projects
inv6 U: all s:Student | all p:Project | s->p in projects implies (some c: Course | c->p in projects and s->c in enrolled)
inv7 B: all s:Student | lone c:Course , p:Project | s->p in projects
inv7 B: all s:Student | lone c:Course , p:Project | s->p in projects and c->p in projects
inv7 U: all s1 : Student | all p1,p2 : Project | all c1 : Course |	    (		(s1->p1 in projects) and (s1->p2 in projects) and	     	(c1->p1 in projects) and (c1->p2 in projects)	    )	  	implies p1=p2
inv8 B: all p : Professor | p.teaches not in p.enrolled
inv8 U: all p : Professor | all c:Course | p->c in teaches  implies p->c not in enrolled
inv9 U: all p,p2:Professor | p2 not in p.teaches
inv8 U: all p : Professor | all c:Course | p->c in teaches  implies p->c not in enrolled
inv9 U: all p,p2:Professor | p2 not in p.teaches
inv9 B: all p,p2:Professor | p != p2 and p2 not in p.teaches
inv9 U: all p1,p2 : Professor | all c1:Course |	      (p1!=p2 and p1->c1 in teaches and p2->c1 in teaches) implies 	       (all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled)
inv10 C: all p1 : Person | all c1 : Course | all g1 : Grade|	  	(c1->p1->g1 in grades) implies (p1 in Student)
inv11 U: all p1 : Student | all c1 : Course | all g1 : Grade|	  	(c1->p1->g1 in grades) implies (p1->c1 in enrolled)

