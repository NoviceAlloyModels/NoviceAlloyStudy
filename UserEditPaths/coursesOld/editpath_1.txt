NA H: THEME UPDATE
inv1 C: enrolled.Course in Student
inv2 C: teaches.Course in Professor
inv3 O: Course in Professor.teaches
inv4 B: one Course <: projects.Project
inv4 B: one Person <: projects.Project
inv4 S: one Course<:project.Project
inv4 B: one Course<:projects.Project
inv4 C: all p : Project | one Course<:projects.p
inv5 S: no Professor.projects	  	all p : Project | some Person<:project.p
inv5 B: no Professor.projects	  	all p : Project | some Person<:projects.p
inv5 C: Person<:projects.Project in Student	  	all p : Project | some Person<:projects.p
inv5 U: Person<:projects.Project in Student
inv6 U: all s : Student | s.projects in s.enrolled.projects
inv8 C: all p : Person | no (p.teaches & p.enrolled)
inv9 B: all p : Professor, c : p.teaches | teaches.c not in enrolled.c
inv9 B: all p : Professor | teaches.(p.teaches) not in enrolled.(p.teaches)
inv9 B: all p : Professor | no (teaches.(p.teaches) & enrolled.(p.teaches))
inv9 B: all p : Professor | enrolled.(p.teaches) not in teaches.(p.teaches)
inv9 B: all p : Professor | no enrolled.(p.teaches) & teaches.(p.teaches)
inv7 B: all s : Student | lone (s.projects & s.enrolled.projects)
inv7 T: all s : Student, c = s.enrolled | lone (s.projects & c.projects)
inv7 U: all s : Student, c : s.enrolled | lone (s.projects & c.projects)
inv10 S: grades.Course in Student\
inv10 T: grades.Course in Student
inv10 S: Courses.grades.Grade in Student
inv10 C: Course.grades.Grade in Student
inv11 U: all s : Student, c : Course | c not in s.enrolled implies s not in c.grades.Grade
inv11 B: all s : Student, c : grades.Grade.s | c not in s.enrolled
inv11 C: all c : Course, s : c.grades.Grade | c in s.enrolled
inv11 U: all s : Student, c : grades.Grade.s | c in s.enrolled
inv10 B: no ~(Course.grades).Professor
inv11 U: all s : Student, c : grades.Grade.s | c in s.enrolled
inv12 B: all s : Student, c : s.enrolled | one s.(c.grades)
inv12 B: all s : Student, c : Course | one s.(c.grades)
inv12 U: all s : Student, c : Course | lone s.(c.grades)
inv12 U: all s : Student, c : s.enrolled | lone s.(c.grades)
inv13 B: all s : Student, c : s.enrolled | s in c.grades.last implies one (s.projects & c.projects)
inv13 O: all c : Course, s : c.grades.last | one (s.projects & c.projects)
inv14 U: all disj s1,s2 : Student | lone s1.projects & s2.projects
inv15 B: all disj s1,s2 : Student, c : Course<:projects.(s1.projects & s2.projects) | 	  	s1.(c.grades) in s2.(c.grades) + prev[s2.(c.grades)] + next[s2.(c.grades)]
inv15 S: all disj g1,g2 : c.grades, c : Course | one (s1.projects & s2.projects & c.projects) implies  	  	s1.(c.grades) in s2.(c.grades) + prev[s2.(c.grades)] + next[s2.(c.grades)]
inv15 S: all disj g1,g2 : c.grades, c : Course | one (s1.projects & s2.projects & c.projects)
inv15 S: all disj g1,g2 : c.grades, c : Course | one (c.projects)
inv15 B: all disj g1,g2 : Grade, c : Course | one (c.projects)

