NA H: THEME UPDATE
inv1 T: all p : Person, c : Course | c -> p in grades => p in Student
inv1 C: all p : Person, c : Course | p -> c in enrolled => p in Student
inv2 C: all p : Person, c : Course | p -> c in teaches => p in Professor
inv3 T: all c : Course, p : Person | p -> c in teaches => (some p in Professor)
inv3 C: all c : Course | some p : Person | c in p.teaches
inv3 O: all c : Course | some p : Professor | c in p.teaches
inv3 O: all c : Course | some p : Student | c in p.teaches
inv3 O: all c : Course | some p : Professor | c in p.teaches
inv1 U: all p : Student, c : Course | p -> c in enrolled => p not in (Person-Student)
inv1 S: all p : Student, c : Course | p -> c in enrolled => p in Student)
inv1 U: all p : Student, c : Course | p -> c in enrolled => p in Student
inv1 C: all p : Person, c : Course | c in p.enrolled => p in Student
inv2 C: all p : Person, c : Course | c in p.teaches => p in Professor
inv3 O: all c : Course | some p : Professor | c in p.teaches
inv3 B: all c : Course | all p : Professor | c in p.teaches
inv3 O: all c : Course | some p : Professor | c in p.teaches
inv4 B: one c : Course | all p : Project | p in c.projects
inv4 B: one c : Course | all p : Project | c -> p in projects
inv4 B: one c : Course | all p : Project | p in c.projects
inv4 B: one c : Course | all p : Project | p in c.projects
inv4 B: one c : Course | some p : Project | p in c.projects
inv4 B: all c : Course | all p : Project | p in c.projects
inv4 B: all c : Course | some p : Project | p in c.projects
inv4 B: one c : Course | all p : Project | p in c.projects
inv4 B: one c : Course | all p : Project | c -> p in projects
inv4 B: one c : Course | all p : Project | c->p in projects
inv4 C: all p : Project | one c : Course | p in c.projects
inv5 U: all p : Project | some b : Person | p in b.projects => b in Student
inv5 U: all p : Project | all b : Person | p in b.projects => b in Student
inv5 U: all p : Project, b : Person | p in b.projects => b in Student
inv5 U: all p : Project, b : Person | p in b.projects => b in Student
inv5 T: all p : Project, b : Person | (p in b.projects => some b in Student)
inv5 T: all p : Project, b : Person | (p in b.projects => (some b in Student))
inv5 U: all p : Project, b : Person | (p in b.projects => b in Student) && some b
inv5 U: all p : Project, b : Person | (p in b.projects => b in Student) && some Student
inv5 U: all p : Project, b : Person | p in b.projects => b in Student	  	all p : Project | some Student
inv5 U: all p : Project, b : Person | p in b.projects => b in Student	  	all p : Project | some Person
inv5 U: all p : Project, b : Person | p in b.projects => b in Student
inv5 U: all p : Project, b : Person | p in b.projects => b in Student && p in b.projects
inv5 S: all p : Project, b : Person | p in b.projects => b in Student p in b.projects	  	all p : Project | some b : Person | p in b.projects
inv5 S: all p : Project, b : Person | p in b.projects => b in Student p in b.projects	  	all p : Project | some b : Person | p in b.projects
inv5 S: all p : Project, b : Person | p in b.projects => b in Student p in b.projects	  	all pp : Project | some bb : Person | pp in bb.projects
inv5 C: all p : Project, b : Person | p in b.projects => b in Student	  	all p : Project | some b : Person | p in b.projects
inv6 S: all p : Project, s : Student, c : Course | p in s.projects => p in s.courses.projects
inv6 U: all p : Project, s : Student, c : Course | p in s.projects => p in s.enrolled.projects
inv6 U: all p : Project, s : Student | p in s.projects => p in s.enrolled.projects
inv6 U: all p : Project, s : Student | p in s.projects => p in s.enrolled.projects
inv7 B: all s : Student, p : Project | p in s.projects => p in s.enrolled.projects
inv7 S: all s : Student, p : Project | p in s.projects => p in one s.enrolled.projects
inv7 B: all s : Student, c : Course | one p : Project | p in s.projects
inv7 B: all s : Student, c : Course | one p : Project | p in s.projects => p in s.enrolled.projects
inv7 B: all s : Student, c : Course | one p : Project | p in s.projects => p in c.projects
inv7 B: all s : Student| one c : Course | one p : Project | p in s.projects => p in c.projects
inv7 B: all s : Student| one c : Course | lone p : Project | p in s.projects => p in c.projects
inv7 B: all s : Student, c : Course | lone p : Project | p in s.projects => p in c.projects
inv7 B: all s : Student, c : Course | lone p : Project | p in c.projects => p in s.projects
inv7 B: all s : Student | one c : Course | lone p : Project | p in s.projects => p in c.projects
inv7 B: all s : Student, disj c,c2 : Course, p : Project | p in s.projects => p in c.projects and p not in c2.projects
inv7 T: all s : Student, c : Course, p1,p2 : Project | p1 in s.projects and (p1 and p2) in c.projects => p2 not in s.projects
inv7 B: all s : Student, c : Course, p1,p2 : Project | p1 in s.projects and p1 in c.projects and p2 in c.projects => p2 not in s.projects
inv7 U: all s : Student, c : Course, disj p1,p2 : Project | p1 in s.projects and p1 in c.projects and p2 in c.projects => p2 not in s.projects
NA H: THEME UPDATE
NA H: THEME UPDATE
inv7 U: all s : Student, c : Course, disj p1,p2 : Project | p1 in s.projects and p1 in c.projects and p2 in c.projects => p2 not in s.projects
inv8 U: all p : Professor | p not in p.teaches
inv8 T: all p : Professor | p not in p.teaches.grades
inv8 U: all p : Professor, c : Course | c in p.teaches => c not in p.enrolled
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.teaches => c not in p2.enrolled
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.enrolled => c not in p2.teaches
inv9 B: all disj p0,p1 : Professor, c : Course | c in p0.teaches => c not in p1.enrolled
inv9 U: all disj p0,p1 : Professor, c : Course | c in p0.teaches => c not in p1.enrolled && c in p1.teaches => c not in p0.enrolled
inv9 B: all disj p0,p1 : Professor, c : Course | (c in p0.teaches => c not in p1.enrolled) && c in p1.teaches => c not in p0.enrolled
inv9 B: all disj p0,p1 : Professor, c : Course | (c in p0.teaches => c not in p1.enrolled) && (c in p1.teaches => c not in p0.enrolled)
inv9 B: all  c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all  c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 S: all c1,c2 : Course, disj p0,p1 : Professor | c in p0.teaches && c in p1.enrolled => c1!=c2
inv9 B: all c1,c2 : Course, disj p0,p1 : Professor | c1 in p0.teaches && c2 in p1.enrolled => c1!=c2
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled && c not in p0.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled && c not in p0.enrolled && c not in p1.teaches
inv9 B: one c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled && c not in p0.enrolled && c not in p1.teaches
inv9 B: one c : Course| all disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled && c not in p0.enrolled && c not in p1.teaches
inv9 B: all disj p0,p1 : Professor | one c : Course | c in p0.teaches => c not in p1.enrolled && c not in p0.enrolled && c not in p1.teaches
inv9 B: all disj p0,p1 : Professor | one c : Course | c in p0.teaches => c not in p1.enrolled
inv9 O: all c : Course, disj p0,p1 : Person | c in p0.teaches => c not in p1.enrolled
inv9 B: all c : Course, disj p0,p1 : Person | c in p0.teaches && c in p1.enrolled => p0 in Professor && p1 in Student
inv9 B: all c : Course, disj p0,p1 : Person | (c in p0.teaches && c in p1.enrolled) => (p0 in Professor && p1 in Student)
inv9 S: all c : Course, disj p0,p1 : Person | ((c in p0.teaches && c in p1.enrolled) => (p0 in Professor && p1 in Student)) && ((c in p1.teaches && c in p0.enrolled) => ((p1 in Professor && p0 in Student)
inv9 S: all c : Course, disj p0,p1 : Person | ((c in p0.teaches && c in p1.enrolled) => (p0 in Professor && p1 in Student)) && ((c in p1.teaches && c in p0.enrolled) => ((p1 in Professor && p0 in Student))
inv9 S: all c : Course, disj p0,p1 : Person | ((c in p0.teaches && c in p1.enrolled) => (p0 in Professor && p1 in Student)) && ((c in p1.teaches && c in p0.enrolled) => ((p1 in Professor && p0 in Student))
inv9 S: all c : Course, disj p0,p1 : Person | ((c in p0.teaches && c in p1.enrolled) => (p0 in Professor  && p1 in Student)) && ((c in p1.teaches && c in p0.enrolled) => ((p1 in Professor && p0 in Student))
inv9 B: all c : Course, disj p0,p1 : Person | ((c in p0.teaches && c in p1.enrolled) => (p0 in Professor && p1 in Student)) && ((c in p1.teaches && c in p0.enrolled) => (p1 in Professor && p0 in Student))
inv9 B: all c : Course, disj p0,p1 : Person | p0 in Professor and c in p0.teaches and p1 in Professor => c not in p1.enrolled
inv8 U: all p : Professor, c : Course | c in p.teaches => c not in p.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled and c not in p1.teaches
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all p : Professor | p not in Student
inv9 T: all disj p1,p2 : Professor | (p1 and p2) not in Student
inv9 B: all disj p1,p2 : Professor | p1 not in Student and p2 not in Student
inv9 S: all p : Professor, s : Student, c : Course | c in p.teaches and c in s.enrolled => s not in Professor
inv9 S: all p : Professor, s : Student, c : Course | c in p.teaches and c in s.enrolled => s not in Professor
inv9 B: all p : Professor, s : Student, c : Course | c in p.teaches and c in s.enrolled => s not in Professor
inv9 B: all p : Professor, s : Student, c : Course | p!=s and c in p.teaches and c in s.enrolled => s not in Professor
inv9 B: all p : Professor, s : Student, c : Course | p!=s and c in p.teaches and c in s.enrolled => s not in Professor and c not in s.teaches
inv9 B: all c : Course, p0,p1 : Professor | c in p0.teaches and c in p1.enrolled => p0=p1
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches and c in p1.enrolled => p0=p1
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled	    all c : Course, disj p0,p1 : Professor | c in p0.enrolled and c in p1.enrolled => c not in p0.teaches and c not in p1.teaches
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled	    all c : Course, disj p0,p1 : Professor | c in p0.enrolled and c in p1.enrolled => c not in p0.teaches and c not in p1.teaches	    all c : Course, disj p0,p1 : Professor | c in p0.teaches and c in p1.teaches => c not in p0.enrolled and c not in p1.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all c : Course, disj p0,p1 : Professor | c in p0.teaches => c not in p1.enrolled
inv9 B: all disj p0,p1 : Professor | one c : Course | c in p0.teaches => c not in p1.enrolled
inv9 B: one disj p0,p1 : Professor | one c : Course | c in p0.teaches => c not in p1.enrolled
inv9 S: all disj p1,p2 Person, c : Course | c in p1.teaches => c not in p2.enrolled
inv9 O: all disj p1,p2 : Person, c : Course | c in p1.teaches => c not in p2.enrolled
inv9 B: all disj p1,p2 : Person, c : Course | c in p1.teaches and c in p2.enrolled => p1 in Professor and p2 not in Professor
inv9 B: all disj p1,p2 : Person, c : Course | c in p1.teaches and c in p2.enrolled => p1 in Professor and p2 in Student
inv9 U: all disj p1,p2 : Person, c : Course | c in p1.teaches and c in p2.enrolled => c not in p2.teaches
inv9 B: all disj p1,p2 : Person, c : Course | c in p1.teaches and c in p2.enrolled => p2 not in Professor
inv9 B: all disj p1,p2 : Person, c : Course | c in p1.teaches and c in p2.enrolled => p2 in Student
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.teaches => p2.enrolled not in p1.teaches
inv9 B: all disj p1,p2 : Professor, c : Course | p2.enrolled not in p1.teaches
inv9 B: all disj p1,p2 : Professor, c : Course | (p2.enrolled not in p1.teaches) and (p1.enrolled not in p2.teaches)
inv9 B: all disj p1,p2 : Person, c : Course | (p2.enrolled not in p1.teaches) and (p1.enrolled not in p2.teaches)
inv9 T: all disj p1,p2 : Professor, c : Course | p1.teaches
inv9 T: all disj p1,p2 : Professor, c : Course | p1.teaches
inv8 U: all p : Professor, c : Course | c in p.teaches => c not in p.enrolled
inv9 T: all disj p1,p2 : Professor, c : Course | not(p1.teaches & p2.enrolled)
inv9 T: all disj p1,p2 : Professor, c : Course | (p1.teaches & p2.enrolled)
inv9 B: all disj p1,p2 : Professor, c : Course | (p1.teaches = p1.teaches - p2.enrolled)
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.teaches => c not in p2.enrolled
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.teaches or c in p2.teaches => c not in p2.enrolled
inv9 B: all disj p1,p2 : Professor, c : Course | c in p1.teaches => c not in Professor.enrolled
inv9 B: all disj p1,p2 : Professor, c : Course | c in Professor.teaches => c not in Professor.enrolled
inv10 T: all c : Course | c.grades in Student
inv10 T: all c : Course | c.grades in Student
inv10 O: all c : Course, p : Person | c.grades[p]=Student
inv10 S: all c : Course, p : Person | c.grades[p]==Student
inv10 U: all c : Course, p : Person | c.grades[p] = Grade => p in Student
inv10 B: all c : Course, p : Person | c in p.enrolled => p in Student
inv10 T: all c : Course, p : Person | p in c.grades => p in Student
inv10 C: all c : Course, p : Person, g : Grade | g in c.grades[p] => p in Student
inv11 U: all c : Course, g : Grade, s : Student | g in c.grades[s] => c in s.enrolled
inv12 U: all c : Course, g : Grade, s : Student | g in c.grades[s] => #g=1
inv12 B: all c : Course, g : Grade, s : Student | g in c.grades[s] => #c.grades=1
inv13 T: all c : Course, p : Project, disj s,s2 : Student, g : Grade | c.grades[s] > c.grade[s2] => p in s.projects and p in c.projects
inv13 T: all c : Course, p : Project, disj s,s2 : Student, g : Grade | c.grades[s] > c.grade[s2] => p in s.projects and p in c.projects
inv13 B: all c : Course, p : Project, disj s,s2 : Student, g : Grade | g in c.grades[s] => p in s.projects and p in c.projects
inv13 B: all c : Course, p : Project, s: Student, g : Grade | g in c.grades[s] => p in s.projects and p in c.projects
inv13 B: all c : Course, p : Project, s: Student, g : Grade | g in c.grades[s] and p in c.projects => p in s.projects
inv13 B: all c : Course, p : Project, s: Student, g : Grade | g in c.grades[s] and p in c.projects => p in s.projects
inv13 B: all c : Course, p : Project, s: Student, g : Grade | g in c.grades[s] and p in c.projects => p in s.projects
inv14 B: all c : Course, p1,p2 : Project, s1,s2: Student | p1 in s1.projects and p2 in s2.projects => p1=p2
inv14 B: all c : Course, disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p2 in s2.projects => p1 not in s2.projects and p2 not in s1.projects
inv14 B: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p2 in s2.projects => p1 not in s2.projects and p2 not in s1.projects
inv14 B: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 in s1.projects and p2 not in s2.projects
inv14 U: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 not in s1.projects or p2 not in s2.projects
inv14 B: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 in s1.projects or p2 in s2.projects
inv14 U: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 not in s1.projects or p2 not in s2.projects
inv15 S: all disj p1,p2 : Project, disj s1,s2: Student |
inv15 T: all disj p1,p2 : Project, disj s1,s2: Student, c : Course | p1 in s1.projects and p1 in s2.projects and p1 in c.projects => c.grades[s1] - c.grades[s2] > 1
inv14 U: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 not in s1.projects or p2 not in s2.projects
inv15 T: all disj p1,p2 : Project, disj s1,s2: Student, c : Course | p1 in s1.projects and p1 in s2.projects and p1 in c.projects => c.grades[s1] - c.grades[s2] > 1
inv14 U: all disj p1,p2 : Project, disj s1,s2: Student | p1 in s1.projects and p1 in s2.projects => p2 not in s1.projects or p2 not in s2.projects
inv15 B: all disj p1,p2 : Project, disj s1,s2: Student, c : Course | p1 in s1.projects and p1 in s2.projects and p1 in c.projects => c.grades[s1] = c.grades[s2]
inv15 B: all disj p: Project, disj s1,s2: Student, c : Course | p in s1.projects and p in s2.projects and p in c.projects => c.grades[s1] = c.grades[s2]
NA H: THEME UPDATE
inv12 B: all c : Course, g : Grade, s : Student | g in c.grades[s] => #c.grades=1
inv12 B: all c : Course, g : Grade, s : Student | g in c.grades[s] => #c.grades=1

