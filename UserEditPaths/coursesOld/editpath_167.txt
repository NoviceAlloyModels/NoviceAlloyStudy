NA H: THEME UPDATE
inv1 C: no enrolled.Course - Student
inv2 C: no teaches.Course - Professor
inv3 C: no Course - Person.teaches
inv4 C: all p : Project | one (Course <: projects).p
inv5 C: no (Person <: projects).Project - Student	  	all p : Project | some (Person <: projects).p
inv6 B: all s : Student | (Course <: projects).(s.projects) in s.enrolled
inv7 U: all s : Student, c : Course | c in s.enrolled implies lone s.projects & c.projects
inv8 C: no teaches.~enrolled & iden
inv9 B: all p : Professor | no p.teaches.~enrolled & p.teaches.~teaches
inv10 C: no Course.grades.Grade - Student
inv11 U: all s : Student | grades.Grade.s in s.enrolled
inv12 U: all s : Student, c : s.enrolled | lone s.(c.grades)
inv13 C: all c : Course | (c.grades).last in projects.(c.projects)
inv14 U: all disj s1, s2 : Student | lone s1.projects & s2.projects
inv15 B: all disj s : Student | all m1 : s.(Course.grades), m2 : (s.projects.~projects - s).(Course.grades) | m1 in m2 + prev[m2] + next[m2]
inv15 T: all disj s1, s2 : Student | all c : (s1.projects & s2.projects).~projects | s1.(c.grades) in s2.1.(c.grades) + next[s2.1.(c.grades)] + prev[s2.1.(c.grades)]
inv15 T: all disj s1, s2 : Student | all c : (s1.projects & s2.projects).~(Student <: projects) | s1.(c.grades) in s2.1.(c.grades) + next[s2.1.(c.grades)] + prev[s2.1.(c.grades)]
inv15 T: all disj s1, s2 : Student | all c : (s1.projects & s2.projects).~(Student <: projects) | s1.(c.grades) in (s2.1.(c.grades) + next[s2.1.(c.grades)] + prev[s2.1.(c.grades)])

