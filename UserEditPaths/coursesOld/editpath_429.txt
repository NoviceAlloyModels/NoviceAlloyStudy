NA H: THEME UPDATE
inv1 B: no Professor & enrolled.Course
inv1 T: enrolled.Course
inv1 B: Person not in enrolled.Course
inv1 B: Professor not in enrolled.Course
inv1 B: (Person-Student) not in enrolled.Course
inv1 C: no (Person-Student) & enrolled.Course
inv2 B: Professor in teaches.Course
inv2 C: teaches.Course in Professor
inv3 C: all c:Course | some teaches.c
inv4 T: all p:Project | one projects.p
inv4 T: all p:Project | one projects.p
inv4 C: all p:Project | one Course<:projects.p
inv5 C: Person:>projects.Project in Student		all p:Project | some Person:>projects.p
inv5 U: Student:>projects.Project in Student		all p:Project | some Person:>projects.p
inv6 T: all s:Student | s.projects
inv6 T: all s:Student | (s.enrolled.~projects)
inv6 T: all s:Student | s.enrolled.Course
inv6 T: all s:Student | none s.enrolled.projects & (Course-s.enrolled).projects
inv6 B: all s:Student | no s.enrolled.projects & (Course-s.enrolled).projects
inv6 S: all s:Student, proj:Project | proj in s.enrolled.projects implies some c | in proj in c.projects
inv6 S: all s:Student, proj:Project | proj in s.enrolled.projects implies some c:Course | in proj in c.projects
inv6 S: all s:Student, proj:Project | proj in s.enrolled.projects implies some c:Course | in proj in c.projects
inv6 U: all s:Student, proj:Project | proj in s.enrolled.projects implies some c:Course |  proj in c.projects
inv6 B: all s:Student | s.projects = s.enrolled.projects
inv6 U: all s:Student | s.projects in s.enrolled.projects
inv6 U: all s:Student | s.projects in s.enrolled.projects
inv8 U: all p:Professor | no p.teaches & p.enrolled
inv9 U: all p1,p2:Professor | p1 != p2 and  some (p1.teaches & p2.teaches) implies no p1.teaches & p2.enrolled
inv10 T: Course.grades.Grade
inv10 C: Course.grades.Grade in Student
inv11 T: all s:Student | s.enrolled.grades
inv11 T: all s:Student |  (no Course-s.enrolled).grades
inv11 B: all s:Student |  no (Course-(s.enrolled)).grades
inv11 B: all s:Student |  no Course.grades - s.enrolled.grades
inv11 B: all s:Student, c:Course |  c not in s.enrolled implies c.grades not in s.enrolled.grades
inv12 S: all s.Student | s.enrolled.grades
inv12 T: all s:Student | s.enrolled.grades
inv12 T: all s:Student | s.enrolled.grades.~s
inv12 T: all s:Student | s.enrolled.grades.s
inv12 T: all s:Student | s.(s.enrolled.grades)
inv12 T: all s:Student, c:Course | c.grades
inv12 T: all s:Student, c:Course | s.(c.grades)
inv12 B: all s:Student, c:Course | one s.(c.grades)
inv12 U: all s:Student, c:Course | lone s.(c.grades)
inv11 U: all s:Student, c:Course | c not in s.enrolled implies no s.(c.grades)
inv14 S: all s1,s2.Student | s1.projects & s2.projects = s1.projects + s2.projects implies s1 = s2
inv14 B: all s1,s2:Student | s1.projects & s2.projects = s1.projects + s2.projects implies s1 = s2
inv14 B: all s1,s2:Student | one s1.projects & s2.projects implies one s1.projects + s2.projects
inv14 B: all s1,s2:Student | lone s1.projects & s2.projects implies lone s1.projects + s2.projects
inv14 B: all s1,s2:Student | s1!=s2 and  lone s1.projects & s2.projects implies lone s1.projects + s2.projects
inv14 B: all s1,s2:Student | s1!=s2 and  one s1.projects & s2.projects implies one s1.projects + s2.projects
inv14 B: all s1,s2:Student | s1!=s2 and  one s1.projects & s2.projects
inv14 B: all s1,s2:Student | s1!=s2 implies one s1.projects & s2.projects

