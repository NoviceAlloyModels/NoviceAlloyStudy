NA H: THEME UPDATE
inv1 T: all p : Professor | p.enrolled & none
inv1 U: all p : Professor | none in p.enrolled
inv1 T: all p : Professor | p.enrolled
inv1 B: all p : Professor | p.enrolled = none
inv1 U: all pro : Professor | all p : Person | pro not in p.enrolled
inv1 T: all pro : Professor | all p : Person | p.enrolled-pro
inv1 U: all pro : Professor | all p : Person | pro not in p.enrolled
inv1 B: all p : Professor | p.enrolled = none
inv1 B: all p : Person | p in Professor implies p.enrolled = none
inv1 B: all p : Professor | p.enrolled = none
inv1 S: all p : Professor | all s : Student | s == p implies p.enrolled = none
inv1 S: all p : Professor | all s : Student | s == p implies p.enrolled = none
inv1 S: all p : Professor | all s : Courses | p.enrolled = c - p.teaches
inv1 S: all p : Professor | all s : Course | p.enrolled = c - p.teaches
inv1 B: all p : Professor | all c : Course | p.enrolled = c - p.teaches
inv1 B: all p : Professor | all c : Course | c - p.teaches in p.enrolled
inv1 B: all s : Student | all c : Course | c in s.enrolled
inv1 B: all s : Student | all p : Professor | all c : Course | c in s.enrolled iff s != p
inv1 B: all s : Student | all p : Professor | all c : Course | c in s.enrolled iff no (s.enrolled & s.teaches)
inv1 B: all s : Student | all p : Professor | all c : Course | no (s.enrolled & s.teaches)
inv1 B: all s : Student | all c : Course | no (s.enrolled & s.teaches)
inv1 B: all p : Professor | p.enrolled = none
inv1 B: all p : Professor | p.enrolled = none
inv1 S: all p : Professor | s : Student | c : Course | p.enrolled = none and c in s.enrolled
inv1 B: all p : Professor | all s : Student | all c : Course | p.enrolled = none and c in s.enrolled
inv1 B: all p : Professor | all s : Student | all c : Course | no (p.enrolled & c) and c in s.enrolled
inv1 B: all p : Professor | all s : Student | all c : Course | no (p.enrolled & c)
inv1 T: all p : Professor | all s : Student | all c : Course | no Course.p.enrolled
inv1 B: all p : Professor | all s : Student | all c : Course | no p.enrolled
inv1 S: all p : Professor, s : Student, all c : Course | no p.enrolled
inv1 B: all p : Professor, s : Student, c : Course | no p.enrolled
inv1 S: all p : Professor, s : Student, c : Course | c not in p.enrolled.object
inv1 B: all p : Professor, s : Student, c : Course | c not in p.enrolled
inv1 T: all p : Person, c : Course | c & p.teaches implies no (c & p.enrolled)
inv1 T: all p : Person, c : Course | (c & p.teaches) implies c not in p.enrolled
inv1 T: all p : Person, c : Course | (c & p.teaches) implies c not in p.enrolled
inv1 T: all p : Person, c : Course | c & p.teaches implies c not in p.enrolled
inv1 B: all p : Person, c : Course | c in p.teaches implies c not in p.enrolled
inv1 B: all p : Person, c : Course | (c in p.teaches implies c not in p.enrolled) iff p in Student
inv1 T: all p : Person, c : Course | no (c & p.enrolled and c & p.teaches)
inv1 B: all p : Student, c : Course | lone p.enrolled
inv1 T: all s : Student, c : Course | lone s.enrolled.c
inv1 B: all s : Student, c : Course | lone enrolled.c
inv1 T: all s : Student, c : Course | lone c in s.enrolled
inv1 B: all s : Student, c : Course | c in s.enrolled
inv1 S: all s : Student, c : Course | c in s.enrolled
inv1 B: all s : Student, c : Course | c in s.enrolled
inv1 T: all s : Student, c : Course | c in s.enrolled		} 	run {Student
inv2 E: 
inv2 E: 
inv2 E: 
inv2 E: 
inv1 S: all p : Person, c : Course | c not in p.enrolled and c in s.enrolled		} 	run {Student = Professor
inv2 E: 
inv1 T: all p : Person, c : Course | c & p.teaches implies c not in p.enrolled		} 	run {Student = Professor
inv1 T: all p : Person, c : Course | (c & p.teaches) implies c not in p.enrolled		} 	run {Student = Professor
inv2 E: 
inv2 E: 
inv2 E: 
inv1 T: all p : Person, c : Course | (c & p.teaches) implies c not in p.enrolled		} 	run {Student = Professor
inv1 T: all p : Person, c : Course | no (c & p.teaches) implies c & p.enrolled		} 	run {Student = Professor
inv2 E: 
inv2 E: 
inv1 C: all p : Person, c : Course | no ( p & Student ) implies c not in p.enrolled
inv1 C: all p : Person, c : Course | no ( p & Student ) implies c not in p.enrolled
inv1 C: all p : Person, c : Course | no ( p & Student ) implies c not in p.enrolled
inv2 C: all p : Person, c : Course | no ( p & Professor ) implies c not in p.teaches
inv2 C: all p : Person, c : Course | no ( p & Professor ) implies c not in p.teaches
inv3 U: all c : Course, p : Professor | lone ( p.teaches & c)
inv3 T: all c : Course, p : Professor | some c in p.teaches
inv3 T: all c : Course, p : Professor | some c in p.teaches
inv3 T: all c : Course, p : Professor | lone p.teaches.c
inv3 B: all c : Course, p : Professor | lone teaches.c
inv3 S: all c : Course, p : Professor | c in some p.teaches
inv3 U: all c : Course, p : Professor | some teaches.c
inv3 C: all c : Course | some teaches.c
inv4 T: all p : Project | lone Course.p
inv4 T: all p : Project, c : Course | lone c.p
inv4 T: all p : Project, c : Course | lone c.projects.p
inv4 T: all p : Project | lone projects.p
inv4 T: all p : Project | lone Course.projects.p
inv4 S: all p : Project | one c : Courde | lone c.projects.p
inv4 T: all p : Project | one c : Course | lone c.projects.p
inv4 C: all p : Project | one c : Course | p in c.projects
inv5 T: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some p in s.projects
inv5 T: all s : Person, p : Project | (no ( s & Student ) implies p not in s.projects) and some p in s.projects
inv5 U: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv5 B: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and p in s.projects
inv5 T: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some p in s.projects
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and p in some s.projects
inv5 B: all s : Person, p : Project | p in s.projects
inv5 U: all s : Person, p : Project | p in s.projects and no ( s & Student ) implies p not in s.projects
inv5 T: all s : Person, p : Project | some s.projects.p and no ( s & Student ) implies p not in s.projects
inv5 T: all s : Person, p : Project | some s.projects.p
inv5 T: all s : Person, p : Project | some projects.p
inv5 T: all s : Person, p : Project | some p in s.projects
inv5 T: all s : Person, p : Project | some (p in s.projects)
inv5 B: all s : Person, p : Project | some s.projects
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.enrolled
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.projects
inv5 U: all s : Person, p : Project | ( some s.projects ) and no ( s & Student ) implies p not in s.projects
inv5 B: all s : Person, p : Project | ( some s.projects ) and ( no ( s & Student ) implies p not in s.projects )
inv5 T: all s : Person, p : Project | some s.projects.p
inv5 T: all s : Person, p : Project | some Student.projects.p
inv5 B: all s : Person, p : Project | s in projects.p
inv5 T: all s : Person, p : Project | some p in s.projects
inv5 T: all s : Person, p : Project | s.projects
inv5 B: all s : Person, p : Project | some s.projects
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.enrolled
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.enrolled
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.projects
inv5 T: all s : Person, p : Project | ( s & Student ) implies some s.projects
inv5 T: all s : Person, p : Project | ( s & Student ) implies some s.projects
inv5 T: all s : Person, p : Project | ( s & Student ) implies some p in s.projects
inv5 S: all s : Person, p : Project | some s.projects | no ( s & Student ) implies p not in s.enrolled
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.enrolled
inv5 U: all s : Person, p : Project | some s.projects and no ( s & Student ) implies p not in s.projects
inv5 T: all s : Person, p : Project | some Person.projects.p and no ( s & Student ) implies p not in s.projects
inv3 T: all c : Course | some Person.teaches.c
inv3 T: all c : Course | some c in Person.teaches
inv5 T: all s : Person, p : Project | some projects.p and no ( s & Student ) implies p not in s.projects
inv5 T: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some p in s.projects
inv5 T: all s : Person, p : Project | ( no ( s & Student ) implies p not in s.projects ) and some p in s.projects
inv5 B: all s : Person, p : Project | ( no ( s & Student ) implies p not in s.projects ) and some s.projects
inv5 B: all s : Person, p : Project | ( no ( s & Student ) implies p not in s.projects ) and p in  s.projects
inv5 T: all s : Person, p : Project | ( no ( s & Student ) implies p not in s.projects ) and some s.projects.p
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects | some s.projects.p
inv5 T: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some s.p
inv5 T: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and p some s.projects
inv5 S: all s : Person, p : Project | some s1 : Student | no ( s & Student ) implies p not in s.projects and p in s1.projects
inv5 S: all s : Person, p : Project | some s1 : Student | no ( s & Student ) implies p not in s.projects and p in s1.projects
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and p in s1.projects
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv5 S: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv5 U: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv1 O: all p : Person, c : Course |  c not in p.enrolled iff no ( p & Student )
inv1 O: all p : Person, c : Course | c not in p.enrolled iff no ( p & Student )
inv5 U: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects
inv5 B: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some p & s.projects
inv5 B: all s : Person, p : Project | no ( s & Student ) implies p not in s.projects and some (p & s.projects)
inv5 U: all s : Person, p : Project | some (p & s.projects) and no ( s & Student ) implies p not in s.projects and some (p & s.projects)
inv5 S: all s : Person, p : Project | some (p & s.projects) and no ( s & Student ) implies p not in s.projects
inv5 S: all s : Person, p : Project | ( some (p & s.projects) ) and no ( s & Student ) implies p not in s.projects
inv5 S: all s : Person, p : Project | ( some (p & s.projects) ) and ( no ( s & Student ) implies p not in s.projects )
inv5 B: all s : Person, p : Project | ( some (p & s.projects) ) and ( no ( s & Student ) implies p not in s.projects )
inv6 S: all s : Student, p : Projects, c : Course | no (s.enrolled & c) and (p & c.projects) implies p not in s.porjects
inv6 T: all s : Student, p : Project, c : Course | no (s.enrolled & c) and (p & c.projects) implies p not in s.porjects
inv6 T: all s : Student, p : Project, c : Course | ( no (s.enrolled & c) and (p & c.projects) ) implies p not in s.porjects
inv6 T: all s : Student, p : Project, c : Course | ( no (s.enrolled & c) and (p & c.projects) ) implies p not in s.projects
inv6 S: all s : Student, p : Project, c : Course | ( no (s.enrolled & c) implies no (s.projects & p)
inv6 B: all s : Student, p : Project, c : Course | no (s.enrolled & c) implies no (s.projects & p)
inv6 T: all s : Student, p : Project, c : Course | (c.projects & p) and no (s.enrolled & c) implies no (s.projects & p)
inv6 T: all s : Student, p : Project, c : Course | ((c.projects & p) and no (s.enrolled & c) ) implies no (s.projects & p)
inv6 B: all s : Student, p : Project, c : Course | no (s.enrolled & c) implies no (s.projects & p)
inv6 B: all s : Student, p : Project, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv6 B: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv6 B: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv6 S: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects) 	}	check inv6		pred inv6{			  	all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv1 C: all p : Person, c : Course | no ( p & Student ) implies c not in p.enrolled
inv6 B: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv6 B: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv6 B: all s : Student, c : Course | no (s.enrolled & c) implies no (s.projects & c.projects)
inv7 B: all s : Student | lone s.projects
inv7 T: all s : Student, p : Project | lone s.projects.p
inv7 T: all s : Student, p : Project | lone projects.p
inv7 T: all s : Student, p : Project | lone p in s.projects
inv7 B: all s : Student, p : Project | lone s.projects
inv8 S: all p : Person
inv1 T: all p : Person, c : Course | ( p & Student ) implies c in p.enrolled
inv1 T: all p : Person, c : Course | ( p & Student ) implies c in p.enrolled
inv1 C: all p : Person, c : Course | no ( p & Student ) implies c not in p.enrolled
inv8 B: all p : Professor | p.teaches != p.enrolled
inv8 U: all p : Professor | no (p.teaches & p.enrolled)
inv7 T: all s : Student, p : Project, c : Course | (p & c.projects)
inv7 T: all s : Student, p : Project, c : Course | (p & c.projects) implies p in s.projects
inv8 U: all p : Professor | no (p.teaches & p.enrolled)
inv7 B: all s : Student, p : Project, c : Course | (p in c.projects) implies p in s.projects
inv7 S: all s : Student, p : Project, c : Course | no no (p & c.projects) implies p in s.projects
inv7 T: all s : Student, p : Project, c : Course | lone (s.projects & c.projects) iff (s.enrolled & c)
inv7 T: all s : Student, p : Project, c : Course | lone s.projects.p
inv7 T: all s : Student, p : Project, c : Course | lone projects.p
inv7 T: all s : Student, p : Project, c : Course | lone s.projects.p
inv7 T: all s : Student, p : Project, c : Course | lone s.projects.^p
inv7 T: all s : Student, p : Project, c : Course | lone s.^projects.p
inv7 T: all s : Student, p : Project, c : Course | lone projects.p
inv7 T: all s : Student, p : Project, c : Course | lone s.projects.p
inv7 T: all s : Student, p : Project, c : Course | lone Student.projects.p
inv7 T: all s : Student, p : Project, c : Course | lone Person.projects.p
inv7 T: all s : Student, p : Project, c : Course | lone c.projects.p
inv7 B: all s : Student, p : Project, c : Course | lone s.projects
inv7 T: all s : Student, p : Project, c : Course | (p & c.projects & s.projects) && (c & s.enrolled) lone s.projects
inv7 T: all s : Student, p : Project, c : Course | (p & c.projects & s.projects) && (c & s.enrolled) implies lone s.projects
inv7 T: all s : Student, p : Project, c : Course | (p & c.projects & s.projects) && (c & s.enrolled) implies p in s.projects
inv7 B: all s : Student, p : Project, c : Course | no (p & c.projects & s.projects) or no (c & s.enrolled) implies p not in s.projects
inv9 S: all p1,p2 : Professor, c : Course | c & p1.teaches and c & p2.teaches implies
inv9 T: all p1,p2 : Person, c : Course | ( c & p1.teaches & p2.teaches ) implies no (p2.enrolled & c) or no (p1.enrolled & c)
inv9 T: all p1,p2 : Person, c : Course | no ( c & p1.teaches & p2.teaches ) implies (p2.enrolled & c) or  (p1.enrolled & c)
inv9 T: all p1,p2 : Person, c : Course | p1.teaches.c
inv9 T: all p1,p2 : Person, c : Course | p1.teaches.c and p2.teaches.c
inv9 B: all p1,p2 : Person, c : Course | c in p1.teaches
inv9 T: all p1,p2 : Person, c : Course | c & p1.teaches & p2.teaches
inv9 B: all p1,p2 : Person, c : Course | some (c & p1.teaches & p2.teaches)
inv9 B: all p1,p2 : Person, c : Course | some (c & p1.teaches & p2.teaches) implies c not in p1.enrolled or c not in p2.enrolled
inv9 B: all p1,p2 : Person, c : Course | some (c & p1.teaches & p2.teaches) implies c not in p1.enrolled and c not in p2.enrolled
inv9 B: all p1,p2 : Person, c : Course | some (c & p1.teaches & p2.teaches) implies no c & p1.enrolled & p2.enrolled
inv9 S: all p : Professor, c : Course | some (c & p.teaches implies no (c & p.enrolled)
inv9 B: all p : Professor, c : Course | some c & p.teaches implies no (c & p.enrolled)
NA H: THEME UPDATE
NA H: THEME UPDATE
inv7 T: all s : Student, c : Course | lone p : Project | c & s.enrolled implies p in s.projects
inv7 T: all s : Student, c : Course | lone p : Project | (c & s.enrolled) implies p in s.projects
inv7 B: all s : Student, c : Course | lone p : Project | some (c & s.enrolled) implies p in s.projects
inv7 B: all s : Student, c : Course | lone p : Project | ( some (c & s.enrolled) and some (p & c.projects) ) implies p in s.projects
inv7 B: all s : Student, c : Course, pr : Project | lone p : Project | ( some (c & s.enrolled) and some (pr & c.projects) ) implies p in s.projects
inv7 S: all s : Student, c : Course | lone p : Project |
inv5 U: all p : Person, pr : Project | some s : Student | ( no (p & Student) implies pr not in p.projects ) and	                                                        pr in s.projects
inv7 B: all s : Student, c : Course | lone p : Project | p in s.projects iff some (c & s.enrolled) and  some (p & c.projects)
inv7 T: all s : Student, c : Course | lone p : Project | p in s.projects iff some (c in s.enrolled) and  some (p & c.projects)
NA H: THEME UPDATE

