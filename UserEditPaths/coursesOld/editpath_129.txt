NA H: THEME UPDATE
inv1 C: all c : Course | enrolled.c in Student
inv1 C: all p : Person | all c : Course | p->c in enrolled implies p in Student
inv1 C: all c : Course | enrolled.c in Student
inv2 S: all c : Couse | teaches.c in Professor
inv2 C: all c : Course | teaches.c in Professor
inv2 C: all p : Person | all c : Course | p->c in teaches implies p in Professor
inv3 S: all c : Courses | some teaches.c
inv3 C: all c : Course | some teaches.c
inv3 O: all c : Course | some p : Professor | p->c in teaches
inv4 S: all p : Projects | one proposes.p
inv4 S: all p : Project | one proposes.p
inv4 T: all p : Project | one projects.p
inv4 T: all p : Project | one projects.p
inv4 T: all p : Project | one projects.p
inv4 T: all p : Project | some projects.p
inv4 C: all p : Project | one c : Course | c->p in projects
inv5 U: all pj : Project | all p : Person | p->pj in projects implies p in Student
inv5 C: (all pj : Project | all p : Person | p->pj in projects implies p in Student)		and		(all pj : Project | some p : Person | p->pj in projects)
inv6 U: all s : Student | s.projects in s.enrolled.projects
inv6 B: all s : Student | all p : Project | all c : Course | s->p in projects implies s->c in enrolled
inv6 B: all s : Student | all p : Project | all c : Course | s->p in projects implies s->c in enrolled and c->p in projects
inv6 B: all s : Student | all p : Project | all c : Course | s->p in projects implies (c->p in projects and s->c in enrolled)
inv6 U: all s : Student | all p : Project | s->p in projects implies (some c : Course | c->p in projects and s->c in enrolled)
inv7 U: all s : Student | all c : Course | lone (s.projects & c.projects)
inv7 B: all s : Student | all c : Course | one (s.projects & c.projects)
inv7 U: all s : Student | all c : Course | lone (s.projects & c.projects)
inv7 S: all p1,p2 : Projects | all c : Course | c->p1 in projects and c->p2 in projects implies (all s1 : Student | s1->p1 in projects and s1->p2 in projects implies p1=p2)
inv7 U: all p1,p2 : Project | all c : Course | c->p1 in projects and c->p2 in projects implies (all s1 : Student | s1->p1 in projects and s1->p2 in projects implies p1=p2)
inv8 S: all p : Professor | all c : Course | no (p.teachs & enrolled.c)
inv8 U: all p : Professor | all c : Course | no (p.teaches & enrolled.c)
inv8 T: all p : Professor | all c : Course | none (p.teaches & enrolled.c)
inv8 U: all p : Professor | all c : Course | no (p.teaches & enrolled.c)
inv8 U: all p : Professor | all c : Course | p->c in teaches implies c->p not in enrolled
inv8 U: all p : Professor | all c : Course | p->c in teaches implies p->c not in enrolled
inv8 U: all p : Professor | no (p.teaches & p.enrolled)
inv9 B: all p,a : Professor | all c1,c2 : Course | p->c1 in teaches and a->c1 in enrolled and a->c2 in teaches implies p->c2 not in enrolled
inv9 B: all p,a : Professor | all c1,c2 : Course | p->c1 in teaches and a->c1 in enrolled and a->c2 in teaches implies p->c2 not in enrolled
inv9 B: all p,a : Professor | all c1,c2 : Course | p->c1 in teaches and a->c1 in enrolled and a->c2 in teaches implies p->c2 not in enrolled
NA H: THEME UPDATE
inv9 B: all p,a : Professor | all c1,c2 : Course | p->c1 in teaches and a->c1 in enrolled and a->c2 in teaches implies p->c2 not in enrolled
inv8 U: all p : Professor | no (p.teaches & p.enrolled)
inv9 U: all a,b : Professor | all c : Course | (a!=b and a->c in teaches and b->c in teaches) implies (a->c in teaches implies b->c not in enrolled)
inv9 B: all p,a : Professor | all c1,c2 : Course | p->c1 in teaches and a->c1 in enrolled and a->c2 in teaches implies p->c2 not in enrolled	  	all p,a : Professor | no (p.teaches & a.enrolled)
inv9 B: all p,a : Professor | no (p.teaches & a.enrolled)
inv9 B: all p,a : Professor | no (p.teaches & a.enrolled & a.teaches)
inv9 B: all p,a : Professor | no (p.teaches & a.teaches)
inv9 B: all p,a : Professor | some (p.teaches & a.enrolled) implies no (a.teaches & p.enrolled)
inv9 B: all p,a : Professor | some (p.teaches & a.enrolled) implies no (a.teaches & p.enrolled)
inv10 U: all c : Course | c.grades.Person in Student
inv10 C: all c : Course | all p : Person | all g : Grade | p->g in c.grades implies p in Student
inv9 U: all p1,p2 : Professor | all c1:Course |	      (p1!=p2 and p1->c1 in teaches and p2->c1 in teaches) implies 	       (all c2 : Course | p1->c2 in teaches implies p2->c2 not in enrolled)
inv9 B: all p1,p2 : Professor | some (p1.teaches & p2.teaches) implies no (p1.teaches & p2.enrolled)
inv9 B: all p1,p2 : Professor | some (p1.teaches & p2.teaches) implies no (p1.teaches & p2.enrolled)
inv9 B: all p1,p2 : Professor | some (p1.teaches & p2.teaches) implies no (p1.teaches & p2.enrolled)
inv10 C: all c : Course | all p : Person | all g : Grade | p->g in c.grades implies p in Student
inv11 B: all c : Course | all s : Student | all g : Grade | s->g in c.grades implies s in c.enrolled
inv11 U: all c : Course | all s : Student | all g : Grade | s->g in c.grades implies s in enrolled.c
inv12 S: all s : Student | all c : Course | lone (s.course.grades)
inv12 B: all s : Student | all c : Course | lone (s.enrolled.grades)
inv12 T: all s : Student | all c : Course | all g1,g2 : Grade | c->s->g1 in grades and c->s->g2 implies g1 = g2
inv12 U: all s : Student | all c : Course | all g1,g2 : Grade | c->s->g1 in grades and c->s->g2 in grades implies g1 = g2
inv12 S: all s : Student | all c : Course | lone (p->s & c.grades)
inv12 U: all s : Student | all c : Course | all g : Grade | lone (s->g & c.grades)
inv12 B: all s : Student | all c : Course | all g : Grade | one (s->g & c.grades)
inv12 U: all s : Student | all c : Course | all g : Grade | lone (s->g & c.grades)
inv12 U: all p : Person | all c : Course | all g : Grade | lone (p->g & c.grades)
inv12 U: all s : Student | all c : Course | all g : Grade | lone ((s->g) & c.grades)
inv12 U: all s : Student | all c : Course | all g : Grade | lone (s->g & c.grades)
inv12 U: all s : Student | all c : Course | all g1,g2 : Grade | c->s->g1 in grades and c->s->g2 in grades implies g1 = g2
inv12 U: all s : Student | all c : Course | all g : Grade | s in enrolled.c implies lone (s->g & c.grades)
inv12 U: all p1 : Student | all c1 : Course |	  	(p1->c1 in enrolled) implies (lone g1 : Grade | c1->p1->g1 in grades)
inv12 B: all s : Student | all c : Course | lone g : Grade | s in enrolled.c implies lone (s->g & c.grades)
inv12 U: all s : Student | all c : Course | all g : Grade | lone (s->g & c.grades)
inv13 U: all s : Student | all c : Course | all g : Grade | s in c.grades.last implies some (s.projects & c.projects)
inv13 U: all s : Student | all c : Course | s in c.grades.last implies some (s.projects & c.projects)
inv14 S: all s1,s2 : Student | s1!=s2 implies lone (s1.projects & s2.projetcs)
inv14 U: all s1,s2 : Student | s1!=s2 implies lone (s1.projects & s2.projects)
inv14 B: all s1,s2 : Student | all p1,p2 : Project | s1!=s2 and s1->p1 in projects and s2->p1 in projects and s1->p2 in projects implies s2->p2 not in projects
inv14 U: all s1,s2 : Student | all p1,p2 : Project | s1!=s2 and p1!=p2 and s1->p1 in projects and s2->p1 in projects and s1->p2 in projects implies s2->p2 not in projects
inv14 U: all s1,s2 : Student | s1!=s2 implies lone (s1.projects & s2.projects)
inv15 B: all p : Project | all s1,s2 : Student | all c : Course | 		s1!=s2 and p in s1.projects and p in s2.projects and p in c.projects implies 		(all g1,g2 : Grade | g1 in s1.(c.grades) and g2 in s2.(c.grades) implies 		(g1=prev[g2] or g2=prev[g1] or g1=g2))

