NA H: THEME UPDATE
inv1 E: 
inv1 T: all p: Person | p.enrolled not none => p in Student
inv1 T: all p: Person | enrolled not none => p in Student
inv1 O: all p: Person | p.enrolled in Course => p in Student
inv1 O: all p: Person | p not in Student => p.enrolled not in Course
inv1 B: all p: Person | one c: Course | p in Student => p.enrolled=c
inv1 B: all p: Person | one c: Course | p in Student => p.enrolled in c
inv1 B: all p: Person | one c: Course | p.enrolled in c => p in Student
inv1 B: all p: Person | lone c: Course | p.enrolled in c => p in Student
inv1 B: all p: Person | lone c: Course | c in p.enrolled => p in Student
inv1 B: all p: Person | one c: Course | c in p.enrolled => p in Student
inv3 B: all c: Course | lone p: Person | c in p.teaches
inv3 B: all c: Course | lone p: Professor | c in p.teaches
inv3 B: all c: Course | lone p: Person | p ->c in teaches
inv3 S: all c: Course | teaches.p
inv3 T: all c: Course | teaches.c
inv3 O: all c: Course | one teaches.c
inv3 B: all c: Course | lone teaches.c
inv4 T: all p: Project | one projects.p
inv4 T: all p: Project | one projects.p
inv4 T: all p: Project | one Course.projects.p
inv4 B: all p: Project, c1, c2: Course | p in c1.projects && p in c1.projects => c1=c2
inv5 S: all
inv5 S: all
inv5 S: all
inv5 S: all
inv1 B: all p: Person | lone c: Course | c in p.enrolled => (p in Student && p not in Professor)
inv3 T: all c: Course | lone teaches.c in Professor
inv3 B: all c: Course | lone teaches.c
inv3 B: all c: Course | lone p: Professor | p in teaches.c
inv4 B: all p: Project, c1, c2: Course | p in c1.projects && p in c1.projects => c1=c2
inv3 S: teaches.Person = Courses
inv3 O: teaches.Person = Course
inv3 C: Person.teaches = Course
inv2 O: teaches.Course = Professor
inv2 O: teaches.Course = Professor
inv2 O: teaches.Course = Professor
inv1 C: enrolled.Course in Student
inv1 O: enrolled.Course = Student
inv2 C: teaches.Course in Professor
inv4 B: all p: Project, c1, c2: Course | p in c1.projects && p in c1.projects => c1=c2
inv4 U: Course.projects = Project
inv4 T: one Course.projects = Project
inv4 O: all p: Project, c1, c2: Course | p in c1.projects && p in c1.projects => c1=c2	  	all p: Project | one c: Course | p in c.projects
inv4 C: all p: Project | one c: Course | p in c.projects
inv4 U: all p: Project | lone c: Course | p in c.projects
inv4 C: all p: Project | one c: Course | p in c.projects
inv5 E: 
inv5 B: all p: Project | lone s: Student | p in s.projects
inv5 S: all p: Project | lone s: Person | p in s.projects => s in Students
inv5 B: all p: Project | lone s: Person | p in s.projects => s in Student
inv5 B: all p: Project | one s: Person | p in s.projects => s in Student
inv5 B: all p: Project | lone s: Person | p in s.projects => s in Student	  	Person.projects = Project
inv5 U: Person.projects = Project
inv5 B: all p: Project | lone s: Person | p in s.projects	  	all p: Project, s: Person | p in s.projects => s in Student
inv5 B: all p: Project | lone s: Person | p in s.projects
inv5 B: all p: Project | lone s: Person | p in s.projects	  	all p: Project, s: Person | p in s.projects => s in Student
inv5 U: all p: Project, s: Person | p in s.projects => s in Student
inv5 B: all p: Project | lone s: Person | p in s.projects	  	all p: Project, s: Person | p in s.projects => s in Student
inv5 B: all p: Project | lone s: Person | p in s.projects	  	Student.projects - Professor.projects = Student.projects
inv5 O: all p: Project | lone s: Person | p in s.projects	  	Student.projects = Project
inv5 B: all p: Project | lone s: Person | p in s.projects && s in Student
inv5 B: all p: Project | lone s: Student | p in s.projects

