NA H: THEME UPDATE
inv1 C: Student <: enrolled = enrolled
inv3 S: Teacher.teaches = Courses
inv3 S: Professor.teaches = Courses
inv1 C: Student <: enrolled = enrolled
inv2 C: Professor <: teaches = teaches
inv3 O: Professor.teaches = Course
inv4 S: proposes in Project set -> lone Course
inv4 S: propose in Project set -> lone Course
inv4 T: projects in Project set -> lone Course
inv4 T: projects in Course one -> set Project
inv4 T: projects in Course one -> set Project
inv3 O: Professor.teaches = Course
inv4 C: (Course <: projects) in Course one -> set Project
inv5 U: Student.projects = Project
inv5 U: Student.projects = Project 	  	(Student <: projects) in Student some -> set Project
inv5 B: Student.projects = Project 	  	(Student <: projects) in Student some -> some Project
inv5 T: some projects.Project in Student
NA H: THEME UPDATE
inv5 T: no (projects.Project - Student)
inv5 T: no (projects.Project - Student)
inv5 U: no ((Person <: projects).Project - Student)
NA H: THEME UPDATE
inv5 C: Person.projects - (Person - Student).projects = Project
inv6 S: (Students <: projects)
inv6 S: (Students <: projects)
inv5 U: Person.projects - (Professor - Student).projects = Project
NA H: THEME UPDATE
inv6 S: (Students <: projects).(~projects :> Course) in enrolled
inv6 B: (Student <: projects).(~projects :> Course) in enrolled
inv7 U: all s : Student, c : Course | lone ((s.projects) & (c.projects))
inv8 U: no (teaches & iden)
inv8 C: no (teaches.(~enrolled) & iden)
inv8 C: no (teaches & enrolled)
inv9 T: no (teaches.(~enrolled) in Professor)
inv9 T: teaches.(~enrolled) not in Professor
inv8 C: no (teaches & enrolled)
inv8 C: no (teaches & enrolled)
inv9 B: Professor.teaches.(~enrolled) not in Professor
inv9 B: teaches.(~enrolled) not in Professor->Professor
inv9 B: no (Professor.teaches.(~enrolled) & Professor)
inv11 O: grades.Grade in enrolled
inv11 C: grades.Grade in ~enrolled
inv11 C: ~(grades.Grade) in enrolled
inv12 U: all s : Student, c : Course | lone (s.(c.grades))
inv12 O: grades in Course some -> some Person -> lone Grade
inv12 O: grades in Course some -> set Person -> lone Grade
inv12 C: grades in Course set -> set Person -> lone Grade
NA H: THEME UPDATE
inv9 B: no(teaches & (Professor <: enrolled).~enrolled.enrolled)
inv9 B: no(teaches & (Professor <: enrolled).~teaches.teaches)
inv14 B: all s,t : Student | one p : Project | s != t implies s->p in projects and t->p in projects
inv14 B: all s,t : Student | lone p : Project | s != t implies s->p in projects and t->p in projects
inv14 B: all s,t : Student | lone p : Project | s != t implies s->p in Student <: projects and t->p in Student <: projects
inv14 U: all s,t : Student | s != t implies lone (s.projects & t.projects)
inv14 B: all s,t : Student | lone (s.projects & t.projects)
inv14 U: all s,t : Student | s != t implies lone (s.projects & t.projects)
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies one (c.projects & s.projects)
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies lone (c.projects & s.projects)
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies one (c.projects & s.projects)
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies one (c.projects & s.projects)
inv13 B: all c : Course, s : Student | s.enrolled = c and s.(c.grades) = max[Student.(c.grades)] implies one (c.projects & s.projects)
NA H: THEME UPDATE
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies some (c.projects & s.projects)
inv12 C: grades in Course set -> set Person -> lone Grade
inv13 B: all c : Course, s : Student | s.(c.grades) = max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course | lone s : Student | s.(c.grades) = max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course | lone s : Student | s.(c.grades) = max[Student.(c.grades)] iff some (c.projects & s.projects)
inv13 B: all c : Course | lone s : Student | s.(c.grades) = max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course, s : enrolled.c | s.(c.grades) = max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course, s : enrolled.c | s.(c.grades) in max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course, s : (Student & enrolled.c) | s.(c.grades) in max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 B: all c : Course| one s : (Student & enrolled.c) | s.(c.grades) in max[Student.(c.grades)] implies some (c.projects & s.projects)
inv13 T: all c : Course, s : c.grades.max[Student.(c.grades)] | one (c.projects & s.projects)
inv13 B: all c : Course, s : c.grades.(max[Student.(c.grades)]) | one (c.projects & s.projects)
inv13 B: all c : Course, s : c.grades.(max[Student.(c.grades)]) | one (c.projects & s.projects)
inv13 B: all c : Course | lone s : c.grades.(max[Student.(c.grades)]) | one (c.projects & s.projects)
inv13 B: all c : Course, s : c.grades.(max[Student.(c.grades)]) | one (c.projects & s.projects)
NA H: THEME UPDATE
inv1 C: enrolled.Course in Student
inv13 B: all c : Course, s : c.grades.(max[Student.(c.grades)]) | some (c.projects & s.projects)
inv13 C: all c : Course, s : c.grades.(max[Grade]) | some (c.projects & s.projects)
inv13 S: grades.max[Grade] in c.projects.~projects :> student
inv13 T: grades.max[Grade] in Course <: projects.~projects :> Student
inv13 T: grades.max[Grade] in Course <: projects.~projects :> Student
inv13 T: grades.max[Grade] in (Course <: (projects.~projects) :> Student)
inv13 T: grades.max[Grade] in (Course <: projects).(~projects :> Student)
inv13 T: (grades.max[Grade]) in (Course <: projects).(~projects :> Student)
inv13 T: (grades.max[Grade]) in (Course <: projects).(~projects :> Student)
inv13 O: grades.Grade in (Course <: projects).(~projects :> Student)
inv13 O: grades.(max[Grade]) in (Course <: projects).(~projects :> Student)
inv13 T: grades.max[Grade] in (Course <: projects).(~projects :> Student)
inv13 O: grades.(max[Grade]) in (Course <: projects).(~projects :> Student)
inv13 O: grades.(max[Grade]) in projects.(~projects :> Student)
inv13 C: grades.(max[Grade]) in projects.~projects
NA H: THEME UPDATE

