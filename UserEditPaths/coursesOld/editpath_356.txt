NA H: THEME UPDATE
inv1 C: all p : Person | #p.enrolled > 0 implies p in Student
inv1 C: all p : Person | some p.enrolled implies p in Student
inv2 C: all p : Person | some p.teaches implies p in Professor
inv3 C: all c : Course | c in Person.teaches
inv4 T: all p : Project | one Course.projects.p
inv4 T: all p : Project | one Course.projects.p
inv4 T: all p : Project | one Course.projects.p
inv4 T: all p : Project | one p in Course.projects
inv4 C: all p : Project | one Course<:projects.p
inv5 U: all p : Project | some Person<:projects.p
inv5 C: all p : Project | some Person<:projects.p and Person<:projects.p in Student
inv6 S: all p : Person | p.projects in ~Curse<:projects.(p.enrolled)
inv6 T: all p : Person | p.projects in ~Course<:projects.(p.enrolled)
inv5 C: all p : Project | some Person<:projects.p	  	all p : Project | Person<:projects.p in Student
inv5 C: all p : Project | some Person<:projects.p	  	all p : Project | Person<:projects.p in Student
inv7 S: all p : Person, c : Course | c in p.enrolled implies lone p.projects & c.course
inv6 C: all p : Person | p.projects in p.enrolled.projects
inv7 S: all p : Person, c : Course | c in p.enrolled implies lone p.projects & c.course
inv7 S: all p : Person, c : Course | c in p.enrolled implies lone (p.projects & c.course)
inv7 U: all p : Person, c : Course | c in p.enrolled implies lone p.projects & c.projects
inv7 B: all p : Person | lone p.projects & p.enrolled.projects
inv7 B: all p : Student | lone p.projects & p.enrolled.projects
inv7 U: all p : Person, c : Course | c in p.enrolled implies lone p.projects & c.projects
inv8 T: all p : Person| none p.teaches & p.enrolled
inv8 C: all p : Person| no p.teaches & p.enrolled
inv9 C: all disj p1, p2 : Person | some p1.teaches & p2.teaches implies no p1.teaches & p2.enrolled
inv10 T: all p : Professor | none ~(Course.grades).p
inv10 B: all p : Professor | no ~(Course.grades).p
inv10 C: Course.grades.Grade in Student
inv11 O: all p : Person | ~(Course.grades).p in p.enrolled
inv11 C: all p : Person, c : Course | c not in p.enrolled implies p not in c.grades.Grade
inv11 C: all p : Person, c : Course | c not in p.enrolled implies no ~(c.grades).p
inv11 C: all p : Person, c : Course | c not in p.enrolled implies no ~(c.grades).p
inv12 U: all p : Person, c : Course | c in p.enrolled implies lone ~(c.grades).p
inv13 C: all c : Course, p : c.grades.last | some p.projects & c.projects
inv14 O: all disj p1, p2 : Person | lone p1.projects + p2.projects
inv14 C: all disj p1, p2 : Person | lone p1.projects & p2.projects
inv15 S: all disj p1, p2 : (Person<:projects).Projects | p1 = p2
inv15 O: all disj p1, p2 : (Person<:projects).Project | p1 = p2
inv15 S: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : Course<:projects).proj | p1 = p2
inv15 S: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : Course<:projects).proj | p1 = p2
inv15 O: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : (Course<:projects).proj | p1 = p2
inv15 U: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : (Course<:projects).proj | 	  		c.grades.p1 = prev[c.grades.p2] or c.grades.p1 = next[c.grades.p2]
inv15 U: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : (Course<:projects).proj | 	  		c.grades.p1 = prev[c.grades.p2] or c.grades.p1 = next[c.grades.p2]
inv15 U: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : (Course<:projects).proj | 	  		c.grades.p1 = prev[c.grades.p2] or c.grades.p1 = next[c.grades.p2]
inv15 O: all proj : Project, disj p1, p2 : (Person<:projects).proj, c : (Course<:projects).proj | 	  		~(c.grades).p1 = prev[~(c.grades).p2] or ~(c.grades).p1 = next[~(c.grades).p2]

