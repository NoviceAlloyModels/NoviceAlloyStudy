"Init in State",1
"no trans[Event]",1
"some *(Init.trans)",2
"no Init  implies no State",1
"all s : State | { }",2
"State in State.trans[Event]",2
"Init.*(Event.trans) in State",2
"State in Init.^(State->State)",1
"State-Init in Init.(Init->(State-Init))",1
"State.(Event.trans) in Init.*(Event.trans)",2
"State in Init.^(trans.State.Event->State)",1
"all s : State | some Init.*(s.trans)",1
"State in Init.^(State->State.trans[Event])",4
"all i:Init | i.trans in State.trans",1
"State in Init.^(State->State) or #State = 1",1
"all s: State | (s in Init) or (some trans.s.Event)",2
"Init.*{s1, s2: State | some s1.trans.s2} = State",1
"all s : State | some e : Event | e.(s.trans) in State",5
"all s : State | some e : Event | e.(Init.trans) in State",1
"Init.*{x: State, y: State | some (x.trans).y } = State",4
"all s:State, s1:State, e:Event | lone s.trans.Event",3
"all s: State | Init in trans.s.Event or (some trans.s.Event)",1
"all s:State-Init| some e:Event | s in e.^(State.trans)",1
"all s: State | (s in Init) or (some e: Event | some trans.s.e)",1
"no Init  implies no State and  all i :Init|some (State-Init).^~(i.trans)",1
"no Init  implies no State and  all i :Init|(State-Init)in  (State).~(i.trans)",1
"all s: State | (s in Init and some trans.s.Event) or (some trans.s.Event)",1
"all s: State | s in Init or Init in trans.s.Event or (some trans.s.Event)",2
"Init.*{s1, s2: State | some e: Event | s1->e->s2 in trans} = State",2
"all i : Init | i.(^{s1, s2 : State | s1->Event->s2 in trans}) in State",1
"all i:Init| no trans implies one State or     no ((State-Init)  - (Event.^(i.trans)) )",1
"let trans_bin = {s1, s2 : State | some s1.trans.s2} |
    Init.*trans_bin = State",1
"all s: State | some (*{s1, s2: State | s2 in s1.trans[Event]}.s & Init)",1
"all s: State.trans.Event | s.^{y,x: State | some x.trans.y} = Init",1
"let rel = { s1, s2: State | some s1 -> Event -> s2 & trans } |
  		State in Init.*rel",1
"no Init  implies no State and  all i :Init|(State-Init)in  (State-Init).~(i.trans)",1
"all s: State | some (*{s1, s2: State | some (s1 <: trans :> s2)}.s & Init)",2
"no Init  implies no State and  all i :Init|some e:Event | some e.(i.trans) & State",1
"all s: State | (s in Init) or (some pre:State | (not pre in s) and (pre in trans.s.Event))",1
"let trans_bin = {s1 : State, s2 : State | some s1.trans.s2} |
    Init.*trans_bin = State",1
"all s: State.trans.Event | s.^{y,x: State | some e : Event | x->e->y in trans} = Init",2
"let rel = { s1, s2: State | some s1 -> Event -> s2 & trans } |
  		all s: State - Init | s in Init.*rel",1
"State in Init + Event.(Init.trans) + Event.((Event.(Init.trans)).trans) + Event.((Event.((Event.(Init.trans)).trans)).trans)",1
