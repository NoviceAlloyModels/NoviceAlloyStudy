"lone Event.trans",1
"lone trans.Event",2
"(Event.(State.trans)) in State",1
"((State.trans).Event) in State",1
"all s:State | lone s'",1
"all e : Event | lone trans.e",1
"all  y : Event | lone trans.y",1
"all e:Event, s:State | lone e",1
"all s:State | lone s.trans.Event",5
"all s : State, e : Event | one (s->e)",2
"all s : State | lone (s<:trans).Event",1
"~(State.trans).(State.trans) in State->State",1
"all s:State | s.trans.State in Event",2
"all s:State, e:Event | lone e->s",1
"all e : Event | trans.e in State->State",1
"all e : Event | ~(trans.e).(trans.e) in iden",1
"all e : Event | lone e<:(State.trans.State)",1
"all s:State,e:Event | lone s.trans.e",15
"all s:State, e:Event | lone e.trans.s",1
"all x : State, y : Event | lone x.trans.y",4
"all x : Event, y : State | lone y.trans.x",1
"all s : State, e : Event | lone s.(e.trans)",2
"all s : State, e : Event | lone (s->e).trans",2
"all s:State, e:Event | lone s <: trans.e",2
"all s: State, e: Event | lone e.~(s.trans)",1
"all s:State,e:Event | lone s.trans.Event",1
"all s1, s2:State, e:Event | lone s1->e->s2",1
"always (all s: State, e: Event | lone s.trans.e)",1
"all s: State | all e: Event | lone s.trans.e",1
"all e: Event | all s: State | lone s.trans.e",1
"all s:State, s1:State, e:Event | lone e->s1",1
"all s : State, e : Event | lone (s->e & State.trans)",1
"all s1,s2:State | all e:Event | lone s1->e->s2",2
"all s: State | iden & (Event->State) in (s.trans).~(s.trans)",2
"all s:State| some s2:State | no ((s.trans).s2) - Event",2
"all s: State, e: Event | (iden & (s->e)) in (s.trans).~(s.trans)",1
"all s : State, e : Event | lone s1 : State | s.trans[e] = s1",1
"all s : State, e, e1 : Event | s->e in State.trans and s->e1 in State.trans => e = e1",1
"all s : State, disj e, e1 : Event | s->e in State.trans and s->e1 in State.trans => e = e1",1
"all e: Event, s:State | some s1,s2:State |  (s.trans = e->s2 and s.trans = e->s1) implies s1=s2",1
