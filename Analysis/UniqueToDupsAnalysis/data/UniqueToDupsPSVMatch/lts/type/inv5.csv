"State->Event",1
"Event in (trans)",1
"Event in State.Event",1
"Event in State.trans",1
"Event in Event.State",1
"Event in trans.State",1
"all s:State | s.trans",1
"State in State<:trans",1
"Event in State<:trans",1
"Event in State:>trans",1
"Event in (trans.Event)",1
"Event in (State.trans)",1
"Event in (Event<:trans)",1
"trans in Event -> State",1
"Event in (Event:>trans)",1
"Event in State -> State",1
"Event in Event -> State",1
"trans in State -> State",1
"all s: State | s.trans.s",2
"all x : State | x->Event",2
"all x : State | some x.Event",1
"all s:State | Event.(s.trans)",3
"Event in Event<:(State.trans)",1
"State in State.(trans<:Event)",1
"State in (State<:trans).Event",1
"State in Event.(State<:trans)",1
"Event in (Event:>State.trans)",1
"all s:State | (s.trans).Event",1
"all s:State | (s.trans)->Event",1
"all s:State | Event->(s.trans)",1
"all s : State | Event in trans",1
"all s : State | Event = s.trans",1
"all s : State | Event.(s.trans)",2
"all x : State | Event.x in Event",1
"all s : State | s.trans in Event",3
"all s : State | Event in s.trans",2
"all x : State | (trans) in Event",1
"all x : State | State in x.trans",1
"all x : State | x.trans in Event",2
"all s : State | (s.trans) = Event",2
"all x : State | x:>trans in Event",1
"all x : State | State in x->Event",1
"all x : State | x<:trans in Event",1
"all s : State | Event in s<:trans",2
"all x : State | (trans.x) in Event",1
"Event in State.trans -> State.trans",2
"trans in State.trans -> State.trans",1
"all x : State | some (x.Event.State)",1
"all x : State | some x.trans in Event",1
"all s,s1:State,e:Event | s->e in trans",1
"all s : State, e : Event | e.(s.trans)",1
"all s : State, e : Event | s.trans in e",1
"all s:State | s.(State.~trans) in Event",2
"all s:State | all e:Event |  e<:s.trans",2
"all s : State | s.trans in State<:trans",1
"all s : State, e : Event | e in s.trans",1
"all s : State, e : Event | s->e in trans",2
"all s : State, e : Event | one e.s.trans",1
"all s:State, e:Event | some s->e in trans",1
"all x : State | Event:>(trans.x) in Event",1
"all x : State | Event:>(x.trans) in Event",1
"all x : State | Event<:(trans.x) in Event",1
"all x : State | Event<:(x.trans) in Event",1
"all x : State | Event.(trans<:x) in Event",1
"all s : State, e : Event | one (e.s).trans",1
"all s : State, e : Event | some (s.trans)<:e",1
"all s1,s2 : State | no ((s1.Event)-(s2.Event))",1
"all s1,s2 : State | no ((Event.s1)-(Event.s2))",1
"{x,y: State | Event in x.(trans.y)}",1
"{x,y: State | x.(trans.y) in Event}",1
"all s : State, e : Event | e.(s.trans) in State.trans",1
"all x, y : State | x->y in trans implies y->y in trans",1
"all x, y : State | some e : Event | some x->e->y in trans",1
"all x : State | some e : Event | x.e->State = State.trans",1
"all x : State | some e : Event | x.e->State = State.e->Stat",1
"all x : State | some e : Event | x.e->State = State.e->State",1
"{x,y: State | Event in Event<:x.(trans.y)}",1
"all s1,s2:State |some e:Event | e.(s1.trans) implies e.(s2.trans)",1
"let t = {x,y : State | some z : Event | x->z->y in trans} |
  	State in t",1
"let t = {x,y : State | some z : Event | x->z->y in trans} |
  	trans in t",1
"all x, y, z : State | some e : Event | x->y in trans implies y->x in trans",1
"let t = {x,y : State | some z : Event | x->z->y in trans} |
  	trans in State.t",1
"all s1, s2: State | all e: Event |some n: State| e->n in s1.trans = e->n in s2.trans",1
"all s1, s2: State | all e: Event |some n: State| e->n in s1.trans & e->n in s2.trans",1
"all s1, s2 : State, e1, e2 : Event | some e1.(s1.trans) and e2.(s2.trans) implies e1 = e2",1
"all s1, s2 : State | all e1, e2 : Event | some e1.(s1.trans) and e2.(s2.trans) implies e1 = e2",1
"{state: State, event: Event | some event.(state.trans)}.~{state: State, event: Event | some event.(state.trans)} = univ",1
"all disj s1, s2: State | all e: Event |some n: State| e->n in s1.trans and e->n in s2.trans implies n.~trans.s1 = n.~trans.s2",1
