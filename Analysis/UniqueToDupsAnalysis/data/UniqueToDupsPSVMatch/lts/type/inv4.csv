"^Init",1
"Init.Event",1
"Init.State",1
"Init.^trans",2
"State.^Init",1
"State.^trans",1
"Init.trans",2
"Event.trans",2
"trans = State",1
"trans.trans",3
"State.trans",1
"no Init.~trans",3
"some Init.Event",1
"^(Init.trans)",1
"some Init.^trans",1
"Event.State.trans",1
"Init.trans.^Event",1
"Init.trans = State",2
"Event.trans = State",1
"Init.*trans = State",3
"State = Init.^trans",1
"Init.^trans = State",2
"State = ^Init.trans",1
"State in Init.trans",3
"trans.*Init = State",1
"State in Init.^trans",5
"Init in State.^trans",3
"Init.*trans in State",1
"trans = Event->State",1
"(Init.trans) = State",1
"Event.(Init.trans)",2
"Init.trans.Event",1
"trans in Init.*trans",1
"State in Init.*trans",1
"Event.^trans = State",1
"Init.^trans in State",1
"trans.Event.trans",1
"State = (Init.^trans)",1
"(Init.^trans) = State",1
"State in  Init.^trans",1
"(Init.*trans) = State",1
"State.^trans in State",1
"Init.(*trans) = State",2
"State = ^(Init.trans)",2
"State = Init.^(trans)",1
"all s: State | s.^Init",1
"State in Init.^(trans)",1
"all i : Init | i.trans",1
"State in ^(Init.trans)",2
"State in Init.(^trans)",1
"Event.^(Init.trans)",2
"Event.Init.trans = State",2
"Init.^trans.Event = State",1
"Init.trans.*Event = State",1
"Event.Init.^trans = State",1
"State in Init.trans.trans",1
"all s:State | s in ^trans",1
"Init.trans.^Event = State",1
"State in Event.Init.trans",5
"State in Init.trans.^Event",1
"Init.Event.*trans in State",1
"Event.trans in Init.*trans",1
"all s:State | s in s.trans",1
"some *(Event.(Init.trans))",1
"(univ.^Init.trans) = State",1
"State.trans in Init.*trans",1
"some ^(Event.(Init.trans))",1
"(Init.trans).*Event = State",1
"State in Init.^trans[Event]",2
"Event.trans in State.*trans",1
"all s:State | Init.trans:>s",1
"State in ^Init.trans[Event]",1
"^Event.(Init.trans) = State",1
"Event.(Init.^trans) = State",2
"State in Event.(Init.^trans)",1
"Init.*(~trans.Event) = State",1
"State in ^(Init.trans.Event)",1
"State in ^Init.(Event.trans)",1
"Init.(Event.*trans) in State",1
"all s:State | Init.trans :> s",1
"all s:State | Init <: s.trans",2
"State in Event. (Init.^trans)",1
"all i:Init | State in i.trans",1
"all s:State | s :> Init.trans",2
"all s:State | s in Init.trans",3
"Event.trans.trans.Event",1
"all s1 : State |  (Init.trans)",2
"State in Init <: ^trans[Event]",1
"all s1 : State |  (Init.Event)",1
"all s:State | s in Init.*trans",1
"all s : State | s.(Init.trans)",1
"all s:State | s :>(Init.trans)",2
"all s:State | s in Init.^trans",3
"all i : Init | Event.(i.trans)",1
"all s:State | s in s->Event->s",1
"State in ^(Event.(Init.trans))",1
"all s: State | s in Init.trans",1
"State-Init in Event.Init.trans",1
"all s:State | s <:(Init.trans)",1
"all s:State | s.^trans = State",1
"all s:State | s in (Init.trans)",1
"all i :Init | State in i.^trans",1
"all s : State | Init.*(s.trans)",1
"all i : Init | State in i.trans",1
"State in Init.Event.trans.trans",1
"State in Init.trans.Event.trans",1
"all s : State | s in Init.trans",2
"all i : Init | State = i.^trans",2
"State in Init <: ^(trans.Event)",1
"all s: State | s in ^Init.trans",1
"all s: State | s in Init.^trans",1
"all s1 : State |  ^(Init.trans)",1
"all s:State | s :>(Init.^trans)",1
"State-Init in Event.Init.^trans",1
"all s1 : State |  (Init->Event)",1
"all s:State | s in Init.(trans)",1
"all s:State | State in s.^trans",1
"State in Init <: ^(trans[Event])",1
"all s : State | some Init.^trans",1
"all s: State | Init in (trans.s)",1
"all s:State | s in Init.(^trans)",1
"all s:State | s in Init.(*trans)",1
"all s : State | s in Init.*trans",3
"all e : Event | State = e.^trans",1
"all i : Init | State in i<:trans",1
"all s : State | s.trans in State",1
"all s:State | s.^s.trans = State",1
"all s : State | s in Init.^trans",2
"Init.*(State.trans.Event) = State",1
"State-Init in Event.(^Init.trans)",1
"some i : Init | State in i<:trans",1
"State-Init in Event.(Init.^trans)",1
"all s:State | Init.trans.trans:>s",1
"all i : Init | State = ^(i.trans)",1
"all s : State | s in (Init.trans)",1
"all i :Init | State in ^(i.trans)",1
"all s : State | s in (Init.^trans)",1
"all s : State | s in Init.^(trans)",3
"all s1 : State |  ^(Init.trans).s1",1
"all x : Init | State in *(x.trans)",1
"Init.*(State.trans[Event]) = State",1
"all s : State | s in Init.*(trans)",5
"all s:State, i:Init | s in i.trans",1
"no ((State - Init)-(trans.~trans))",2
"State in Init.trans.^(trans.Event)",1
"all s : State | Init.trans in State",1
"all s:State | some s.^trans :> Init",1
"Init.(*trans.(State.Event)) = State",1
"all s:State | Init.Event.s in trans",1
"all e : Event | State = ^Init.trans",1
"State in ~(Init.trans.trans).^Event",1
"all s : State | s in Init.*(~trans)",1
"all s:State, i:Init | s in i.^trans",2
"all e : Event | State = Init.^trans",1
"all s:State, i:Init |  i.^(s.trans)",1
"all s:State | some (s.^~trans):>Init",1
"all s : State | some s.(Init:>trans)",1
"all s:State | s in Init.trans:>State",1
"State->State in Init->^(Event.trans)",1
"all s:State - Init | s in Init.trans",1
"all s : State, i:Init | s in trans.i",1
"all s:State, i:Init | s in (i.trans)",1
"all s:State | some s.^~trans :> Init",2
"all s : Init | ^(s->Event.(s.trans))",1
"all s : State, i:Init | s in i.trans",2
"all s:State | some Init <: (Event.s)",1
"all s:State | Event->s in Init.^trans",1
"all s: State | some (*trans.s & Init)",1
"all s:State - Init | s in Init.^trans",1
"State in (Init.trans)^(~(Init.trans))",1
"all s:State | s :>(Init.trans.^trans)",1
"all s:State | Event->s in ^trans.Init",2
"all s:State | State in s.^trans.Event",1
"all s:State | s in Event.(Init.^trans)",1
"all s: State | s in Init.^trans[Event]",1
"State in Event.Event(Init.trans.trans)",1
"all s:State | (s.trans).^Event = State",1
"all e: Event | e.(Init.^trans) = State",1
"some (Init.trans)[Event].^trans & iden",2
"all i:Init | State in Event.(i.^trans)",1
"all s:State | s in ^Event.(Init.trans)",3
"all i:Init | State in Event.(^i.trans)",1
"State in Event.Event(Init.State.State)",1
"State in (Init.trans).^(~(Init.trans))",1
"all s:State | s in ^(Event.Init.trans)",1
"all s:State | (s.trans).^State = State",1
"all s : State | s in Init.*trans[Event]",1
"all s : State | some (s.~(Init.^trans))",4
"all s1 : State |  (Init->Event) in trans",1
"all s: State | all e: Event | Init.trans",1
"all s: State | State in Event.(s.*trans)",1
"all s : State, i : Init | i->s in ^trans",2
"all s:State | s in ^(Event.(Init.trans))",2
"all s:State |some e:Event | Init.^(e->s)",9
"all s:State | some i:Init | s in i.trans",1
"all s:State | some i:Init | s in trans.i",1
"all s : Init | ^(State->Event.(s.trans))",1
"all s : State | State in Init.*(s<:trans)",1
"all s : State | s in Init . *trans[Event]",1
"all s1 : State |  some ((Init.^trans)).s1",1
"State in {x:State | some (Init.^trans).x}",1
"all s1 : State |  some ((Init.trans)).^s1",1
"all e : Event | State = ^(e.(Init.trans))",1
"State.(Event.trans) in Init.(Event.*trans)",1
"all s: State | all e: Event | Init.trans.e",1
"all s:State | some Init <: trans.(Event.s)",2
"all s:State | some (s.Event.^~trans):>Init",1
"all s:State | some s.Event.^~trans :> Init",1
"all s : State, e : Event | s in Init.^trans",1
"all s:State |some e:Event | s in Init.trans",1
"all s:State, i:Init | s in (i.trans)->State",1
"all s1 : State |  s1.(Init->Event) in trans",1
"all s:State, i:Init | s in State->(i.trans)",1
"some e: Event | Init.trans implies *trans.e",1
"all s:State| some i:Init | s in i->Event->s",1
"Init.*{s1, s2: State | s1.trans.s2} = State",1
"State in ~(Event.(Init.trans.trans)).^Event",1
"all s: State | some i: Init | s in i.^trans",1
"all s:State, i:Init |  some (i.^trans :> s )",1
"all s:State | s in Init.*(State.trans.Event)",1
"all s:State | some (s.Event).^~trans :> Init",1
"all s:State | s in Init.*(Event.State.trans)",7
"all s: State | some (*trans[Event].s & Init)",1
"all s:State | s in Init.*(State.trans.State)",1
"all s : State, i : Init | i->s in trans.trans",1
"all s:(State-Init) | s in Event.(Init.^trans)",1
"all s : Init | State in ^(s->Event.(s.trans))",1
"all i : Init, s : State | s in i.*trans[Event]",1
"all i : Init, e : Event | State = ^e.(i.trans)",1
"all s:State | s in ^(Event.(Init.trans)).trans",1
"all s1 : State |  s1.(Init->Event) in s1.trans",1
"all s : State | s in Init.*(trans.Event.State)",1
"all s : State | s in Init.*(trans.State.Event)",1
"all s : State, i : Init | i.trans.Event.trans.s",1
"all s:State| some i:Init | i->Event->s in State",1
"all s:State |some e:Event | e->s in Init.^trans",1
"all s : State, e : Event| State in e.(s.^trans)",1
"all s : State, e : Event | s in e.(Init.^trans)",1
"all s : Init <: trans | ^(s->(Event.(s.trans)))",1
"all s : State | some s.trans implies Init.trans",1
"some e: Event | all s: State | s in Init.^trans",1
"all s : State | s in Init.(trans[Event][State])",1
"all e : Event | State = Init + ((e.Init).^trans)",1
"all e : Event | State = Init + (e.(^Init.trans))",1
"all s : State, e : Event | State in ^(e.s.trans)",1
"all s:State | s in ^((Event.(Init.trans)).trans)",1
"State in Init.trans.^(State->State.trans[Event])",1
"all s : State | s in Init . *(trans.State.Event)",1
"all s : Init <: trans | State in ^(Event.s.trans)",1
"all s:State | some e:Event | s in ^e.(Init.trans)",1
"all s: State | some i: Init | s in Event.i.^trans",1
"some e: Event | all s: State | s in Init.^trans.e",1
"all s : Init <: trans | State in s.^(trans.Event)",1
"all i:Init | some e:Event | State in e.(i.*trans)",1
"all s:State-Init| some e:Event | s in Init.^trans",1
"all s : Init <: trans | State in ^(s.trans.Event)",1
"State in (Init.trans[Event] + ~Init.trans[Event])",1
"all s : State, e : Event | State in ^(e.(s.trans))",1
"all x : Init, y : State | some (Event.(x.trans)).y",1
"all s : State, i:Init, e:Event |  s in i.trans.e.s",1
"all s:State, s1:State,e:Event, t:trans | s->e in t",1
"all s : Init <: trans | State in ^(Event.(s.trans))",1
"all s : State, i : Init | i->s in trans.trans.trans",1
"all s: State | some i: Init | s in (i.*trans.Event)",1
"all s:State - Init |some e:Event| s in e.Init.trans",1
"some e: Event | all s: State | Init.trans implies s",1
"all s: State | some i: Init | s in (Event.^i.trans)",1
"all s:State-Init| some e:Event | s in ~(Init.trans)",1
"all s : Init <: trans | State in *(Event.(s.trans))",1
"all s : State | Init.^{x,y : State | some x.trans.y}",1
"all s:State-Init| some e:Event | s in Init.^trans[e]",1
"all s:State-Init| some e:Event | s in ^e.(Init.trans)",1
"all s: State | all e: Event | Init.trans implies e->s",2
"all s:State-Init |some e:Event | s in ^e.(Init.trans)",1
"all s:State-Init| some e:Event | s in e.(Init.^trans)",1
"all s : Init <: trans | State in ^(s->Event.(s.trans))",1
"all s:State-Init| some e:Event | s in (s.e.Init.trans)",1
"all s: State | some (*{ss: State | ss.trans}.s & Init)",1
"all s : Init <: trans | State in *(s->Event.(s.trans))",2
"some e: Event | all s: State | Init.trans implies e->s",1
"all s: State | s in Init or some e: Event | trans[e].s",1
"all s:State, s1:State,e:Event, t:trans | s->e in trans",2
"State in (Init.trans[Event] + State.trans[Event].Init)",1
"all s:State - Init |some e:Event| s in e.(Init.^trans)",1
"all s:State-Init| some e:Event | s in ^(s.e.Init.trans)",1
"let x = Init <: trans | State in ~(Event.(State.trans))",1
"all s : State | Init.^{x,y : State | x.trans.y} = Evebt",1
"all s : State | Init.^{x,y : State | x.trans.y} = State",1
"all s: State | s in Init or (some e: Event | trans[e].s)",1
"all s : Init <: trans | State in ^(s->(Event.(s.trans)))",1
"all s1, s2 : State | (s1 in Init) implies(s2 in s1.^trans)",1
"all s: State | (s in Init) or (some e: Event | trans[e].s)",1
"some e: Event | all s: State | Init.trans and e->s in trans",1
"all s : State | s in Init && State in ^(s->Event.(s.trans))",1
"all s : State | some e : Event | s->e in Init.^(State.trans)",1
"all s : State | some e : Event | s.(e.(Init.trans)) in State",1
"all s1, s2 : State | (s1 in Init) implies(s2 in (s1.^trans))",1
"all s: State | some (*{ss: State | ss.trans.Event}.s & Init)",1
"all s : (Init <: trans).Event.State | ^(s->(Event.(s.trans)))",1
"all s1, s2 : State | (s1 in Init) implies (s2 in (s1.^trans))",2
"all s: State | all e: Event | one Init.^trans implies s->e->s",1
"no Init  implies no State and  all i :Init |  i.trans & State",1
"all s: State | all e: Event | Init.trans implies e->s in State",1
"all s: State | all e: Event | Init.trans in trans implies e->s",1
"all s: State | all e: Event | Init.trans implies e->s in trans",2
"all s: State | some e: Event | Init.trans in trans implies e->s",1
"some e: Event | all s: State | Init.trans implies e->s in trans",1
"all s: State | some (*{ss: State, e: Event | ss.trans}.s & Init)",1
"all s: State | some (*{ss: State, e: Event | ss.trans.e}.s & Init)",1
"no Init  implies no State and  all i :Init|(State-Init).^~(i.trans)",1
"let r = all e: Event | State->(State.trans.e) | 
	 		State in Init.^r",2
"{s1 : State, s2 : State | s1->Event->s2 in trans}",1
"let r = {all e: Event | State->(State.trans.e)} | 
	 		State in Init.^r",1
"all s: State | all e: Event | Init.trans in trans implies e->s in trans",1
"all s: State | some e: Event | Init.trans in trans implies e->s in State",1
"all s: State | some e: Event | Init.trans in trans implies e->s in trans",1
"all s: State | some (*{s1, s2: State | some s1.trans[Event].s2}.s & Init)",1
"all s1, s2 : State , e : Event | (s1 in Init) implies (s2 in (s1.e.^trans))",1
"all s: State | some e: Event | Init.trans in trans implies trans.e in trans",1
"all i : Init, s : State | some i.*{s1, s2 : State | s1->Event->s2 in trans}.s",1
"all s1, s2 : State , e : Event | (s1 in Init) implies (s2 in (e.(s1.^trans)))",1
"Init.*{s1, s2 : State | s1->Event->s2 in trans} = State
}

fun trans_bin : State -> State {",1
"no Init  implies no State and  all i :Init|some e:Event |  e.(i.trans) & State",1
"all s: State | some e: Event | Init.trans in trans implies trans.e->s in State",1
"all s: State | some e: Event | Init.trans in trans implies trans.e->s in trans",2
"all i : Init, s : State | some i.(*{s1, s2 : State | s1->Event->s2 in trans}).s",1
"all s: State | some e: Event | Init.trans in trans implies ~trans.e->s in trans",1
"let t = { all x,y : State | some z : Event | x->z->y in trans} | State in Init.(^t)",1
"let t = {all x,y : State | some z : Event | x->z->y in trans} |
	State in Init.(^t)",1
"all s:State, s1:State,e:Event, t:trans | s->e in s.trans",1
"all s:State, s1:State,e:Event, t:trans | s->e in s1.trans",1
"let t = { some s1, s2 : State | some e : Event | s1->e->s2 in trans } | State in Init.(^t)",1
"no Init  implies no State and (some e:Event | all s:(State) | some (Init & trans.(e->s)) )",1
"let t = {all x,y : State | some z : Event | x->z->y in trans} |
	all s : State | some (s.^t)",1
"let t = { all s1,s2 : State | some e : Event | s1->e->s2  in trans } |
  	State in Init.(^t)",1
"no Init  implies no State and (some e:Event | all s:(State-Init) | some (Init & trans.(e->s)) )",1
"let t = {all x,y : State | some z : Event | x->z->y in trans} |
	all s : State | some Init.(s.^t)",1
"let t = {all x,y : State | some z : Event | x->z->y in trans} |
	all s : State | some Init<:(s.^t)",1
"let t = { x : State, y : State | some e : Event | x->e->y in trans} |
  all u : State | some Init in u.^t",1
"let t = { x : State, y : State | some e : Event | x->e->y in trans} |
  all u : State | some Init in u.(^t)",1
"let t = {all x,y : State | some z : Event | x->z->y in trans} |
	all s : State | some i : Init | s in i.(^t)",1
"let adj = {s1,s2: State | some e: Event | s1 -> e -> s2 in trans} |
  all s: State | some i: Init | s in ^adj",1
"some r1: State->Event | some r2: Event->State | r1.Event->r2 = trans && State in Init.^(r1.r2)",2
"Init.^adj

}

/*
All the states have the same events available.
*/
fun adj: State -> State {
{ x,y : State | some (x.trans).y }",1
"all s1,s2 : State | some e : Event | s1->e->s2  in trans
  	State in Init.(^(all s1,s2 : State | some e : Event | s1->e->s2  in trans))",1
"State in ^(lookupState[Init])
}

/*
All the states have the same events available.
*/
fun lookupState[s: set State] : set State {  
	s.trans[Event]",1
"all s: State | Init.^function
}

/*
All the states have the same events available.
*/
fun function: State->State {
  {s1, s2: State | s1->Event->s2 in trans}",2
