"no Entry & Exit",4
"Track not in Track.^succs",1
"no Entry & Exit.*succs",1
"no Entry & Exit.^succs",1
"succs not in (^succs & ~succs)",1
"all t : Track | t in Entry",1
"all t:Track | t in t.^succs",3
"lone (Track.^succs & Track.^succs)",1
"all t: Track | t.^succs not in t",1
"all t : Track | Track in t.^succs",1
"all t : Track | Track not in t.*succs",1
"all t:Track | t in Entry implies t not in Exit",2
"all t:Entry, e:Exit| e->t in succs",1
"all t:Track | t in Entry iff t not in Exit",1
"not some t:Track | t in Exit and t in Entry",1
"some ex:Exit, e:Entry | e not in ex.succs",1
"all e:Entry, t:Track | e not in t.*succs",1
"all e:Entry, ex:Exit | e->ex in ^succs",2
"all t:Track | t not in t.succs and t.succs not in t",1
"all e:Exit | no i:Entry | i in e.^succs",1
"all t: Track | t in Entry or t in Exit or some t.succs",1
"all t: Track | all p: succs.t | t.^succs not in p",1
"all a,b:Track| a in Entry and b in Exit and b->a in succs",1
"some t,a:Track| t in Entry and a in Exit and t->a in succs",1
"some t,a:Track| t in Entry and a in Exit and a->t in succs",1
"all a,b:Track| a in Entry and b in Exit implies b->a in succs",1
"all a,b:Track| a in Entry and b in Exit implies a->b in succs",1
"all t,a:Track| t in Entry and a in Exit implies a->t in succs",4
"some t,a:Track| t in Entry and a in Exit implies t->a in succs",1
"some t,a:Track| t in Entry and a in Exit implies a->t in succs",1
"all x,y:Track| x in Entry and y in Exit implies y->x not in succs",3
"all ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs",1
"some ex:Exit, e:Entry | e not in ex.succs and ex not in ex.succs",1
"all t:Track | t not in Exit implies some t2:Track | t->t2 in succs",1
"all t:Track | (t in Entry implies t not in Exit) and (t in Exit implies t not in Entry)",1
"all t:Track | (t in Entry iff t not in Exit) and (t in Exit iff t not in Entry)",1
"all t1:Track, t2:Track | t1 in Entry and t2 in Exit implies t2 not in succs.t1",1
"all t1:Track, t2:Track | t1 in Entry and t2 in Exit implies t2 not in ^succs.t1",1
"all x,y : Track | x != y implies y in x.succs
all x : Track | x not in x.succs",1
"all t:Track | t not in t.succs
all disj t1,t2:Track | t1.succs not in t2.succs",2
"all t:Track | some en:Entry | one ex:Exit | en->t in succs and t->ex in succs",1
"all t:Track | t in Exit => not t in Entry
all t:Track | t in Entry => not t in Exit",1
"all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs",1
"all e:Entry, t:Track | e not in t.*succs
all e:Exit, t:Track | t not in e.*succs",1
"all e:Entry, t:Track | e not in t.^succs
all e:Exit, t:Track | t not in e.^succs",1
"all x,y : Track | x != y implies (y in x.succs and x in y.succs)
all x : Track | x not in x.succs",1
"all t:Track | one e:Entry, ex:Exit | (t not in t.succs) and ex in e.succs => e not in ex.succs",1
"all t:Track, ex:Exit, e:Entry, j:Junction | t not in t.succs and no ex.succs and e not in t.succs",1
"all disj t1, t2 : Track | t1 in succs.t2 implies t2 not in t1.succs.succs
all t : Track | t not in succs.t",1
"all t:Track, ex:Exit, e:Entry, j:Junction | t not in t.succs and no ex.succs and e not in Track.succs",1
"all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs",1
"all t:Track | t not in t.succs
all disj t1,t2:Track | t1.succs not in t2.succs and t2.succs not in t1.succs",2
"all t1, t2 : Track | t1 in succs.t2 and t1 != t2 implies t2 not in t1.succs.succs
all t : Track | t not in succs.t",1
"all t:Track | t not in t.succs
all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs",1
"all t:Exit | all ts:Track-t | ts not in t.succs
all t:Entry | all ts:Track-t | t not in ts.succs",1
"all e:Entry | all t:Track-Entry | e not in t.succs
all e:Exit | all t:Track-Exit | t not in e.succs",1
"all t:Track | t not in t.succs
all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs",1
"all t:Exit | all ts:Track-t | ts not in t.succs
all t:Entry | all ts:Track-t | t not in ts.succs
no succs & iden",1
"all t:Track | t not in Exit implies some ts:Track | ts in t.succs
all t:Track | t in Exit implies all ts:Track | ts not in t.succs",1
"all t:Track | t not in Exit implies some ts:Track | ts in t.succs
all t:Track | t in Exit implies all ts:Track | t not in ts.succs",1
"all t:Track | t not in Exit implies some t2:Track | t->t2 in succs
all t:Track | t in Exit implies all t2:Track | t->t2 not in succs",4
"all t:Track | t not in Exit implies some ts:Track | ts in t.succs
all t:Track | t not in Entry implies some ts:Track | t in ts.succs",1
"all t:Track | t not in t.succs
all disj t1,t2:Track | t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs",3
"all disj t1,t2:Track | (t1 not in t1.succs and t2 not in t2.succs) and (t2 in t1.succs => t1 not in t2.succs and t1.succs not in t2.succs and t2.succs not in t1.succs)",2
"all t:Track, ex:Exit | t not in t.succs and no ex.succs
all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and j not in ex.succs",1
"all t:Track, ex:Exit | t not in t.succs and no ex.succs
all e:Entry, ex:Exit, j:Junction | (ex in e.succs => e not in ex.succs) and e not in Track.succs",1
"all t:Track | t not in t.succs
all disj t1,t2 : Track | t1 in t2.succs => t2 not in t1.succs
all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs",1
"all t:Track | t not in t.succs
all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs
all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs",2
"all t:Track | t not in t.succs
all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs
all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs and ex not in j",1
"all t:Track | t not in t.succs
all disj t1,t2 : Track | (t1 in t2.succs => t2 not in t1.succs) and t2.succs not in t1.succs
all ex:Exit, e:Entry, j:Junction | no ex.succs and e not in j.succs and j in e.succs",1
"all t:Track | t not in Exit implies some t2:Track | t->t2 in succs
all t:Track | t in Exit implies all t2:Track | t->t2 not in succs
all t:Track | t not in Entry implies some t2:Track | t2->t in succs
all t:Track | t in Entry implies all t2:Track | t2->t not in succs",1
