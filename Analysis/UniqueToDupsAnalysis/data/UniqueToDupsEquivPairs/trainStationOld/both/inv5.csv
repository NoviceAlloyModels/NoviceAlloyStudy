Pairs,1
,,"all t : Train | t.pos' != t.pos",1

Pairs,1
,,"all t:Train | t.pos' in t.pos.prox",1

Pairs,2
,,"always all t : Train | t.pos' in t.pos.next",2

Pairs,11
,,"always all t : Train | t.pos' in t.pos.prox",3
,,"all t:Train| {
always (t.pos in Exit  implies no t.pos')
always (t.pos in Track  implies  t.pos' in t.pos.prox)
}",2
,,"all t:Train| {
always (t.pos in Exit  implies no t.pos')
always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox)
}",3
,,"all t:Train| {
always (t.pos in Exit  implies eventually no t.pos')
always (t.pos in Track  implies  t.pos' in t.pos.prox)
}",1
,,"always  all t:Train| {
always (t.pos in Exit  implies no t.pos')
always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox)
}",1
,,"always (all t:Train|(one t.pos:> Exit => no t.pos'))
always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) )
always (all t:Train| no t.pos.prox  => (no t.pos' or t.pos'=t.pos) )",1

Pairs,5
,,"always all t : Train, p : t.pos | t.pos' in p.prox",1
,,"always all t : Train, p : t.pos | (t.pos)' in p.prox",2
,,"always (all t:Train|(one t.pos:> Exit => no t.pos'))
always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) )
always (all t:Train| (no t.pos.prox and one t.pos:> Track-Exit) => (no t.pos' or t.pos'=t.pos) )",2

Pairs,2
,,"always all t: Train | t.pos' in t.pos + t.pos.prox",1
,,"always all t: Train | t not in Exit implies t.pos' in t.pos + t.pos.prox",1

Pairs,2
,,"all t : Train.pos | some (t & Exit) implies  no t'",1
,,"all t : Train | some (t.pos & Exit) implies  Train' = Train - t",1

Pairs,8
,,"all t:Train |{
always (t.pos in Exit implies no t.pos')

}",7
,,"all t:Train |{
always (t.pos in Exit implies   t.pos'=none)

}",1

Pairs,3
,,"always all t : Train | t.pos' in t.pos.prox or t.pos in Exit",2
,,"always (all t:Train|(one t.pos:> Exit and  some t.pos.prox  => no t.pos'))
always (all t:Train| (one t.pos and some t.pos.prox  => t.pos' in t.pos.prox ) )",1

Pairs,1
,,"always all t : Train | t.pos' in t.pos.prox || t.pos' = Exit",1

Pairs,1
,,"all t : Train | t.pos' != t.pos implies t.pos' in t.pos.prox",1

Pairs,2
,,"always all t : Train | t.pos' in t.pos.prox or t.pos' in Exit",2

Pairs,1
,,"all t:Train | t.pos in Entry implies after t.pos in t.pos.prox",1

Pairs,5
,,"all t:Train |{
always (t.pos in Exit implies  t.pos'= t.pos)

}",5

Pairs,1
,,"all t : Train | no (t.pos & Exit) implies (t.pos' in t.pos.prox)",1

Pairs,1
,,"all t:Train {
some (t.pos & Exit) => t.pos' = (t.pos) - (t.pos)

}",1

Pairs,2
,,"always all t : Train, p : t.pos | (t.pos)' in p.prox || Exit = p.prox",2

Pairs,1
,,"always all t : Train, p : t.pos | (t.pos)' in p.prox || Exit in p.prox",1

Pairs,3
,,"always all t: Train | no t.pos & Exit implies t.pos' in t.pos + t.pos.prox",3

Pairs,1
,,"always all t : Train | t.pos' in t.pos.prox or t.pos in Exit => t.pos' in Exit",1

Pairs,1
,,"all t : Train {
((t.pos = Exit) implies (no t.pos'))
or
(t.pos' in t.pos.prox)
}",1

Pairs,1
,,"all t : Train | t.pos' != t.pos and no (t.pos & Exit) implies (t.pos' in t.pos.prox)",1

Pairs,1
,,"always all t: Train | (t'.pos in t.prox) or (t.pos in Exit implies Train' = Train -t)",1

Pairs,4
,,"always all t : Train {
((t.pos = Exit) implies (no t.pos'))
or
(t.pos' in t.pos.prox)
}",2
,,"always all t : Train {
(t.pos = Exit) implies no t.pos'
or
(one t.pos) implies (t.pos' in t.pos.prox)
}",2

Pairs,1
,,"always all t : Train | some t1 : Track | t.pos = t1 implies after t.pos in (t1.prox + t1)",1

Pairs,2
,,"all t : Train | no (t.pos & Exit) implies (t.pos' in t.pos.prox) else (Train' = Train - t)",1
,,"all t : Train | some (t.pos & Exit) implies  Train' = (Train - t) else( t.pos' in t.pos.prox)",1

Pairs,2
,,"always (all t:Train|(one t.pos:> Exit => no t.pos)  or (one t.pos  => t.pos' in t.pos.prox  ) )",1
,,"always (all t:Train|(one t.pos:> Exit => no t.pos')  or (one t.pos  => t.pos' in t.pos.prox  ) )",1

Pairs,2
,,"all t:Train {
t.pos in Exit => no t.pos'
t.pos not in Exit => {
one tk:((t.pos).prox) | t.pos' = tk
}
}",1
,,"all t:Train {
t.pos in Exit => no t.pos'
t.pos not in Exit => some tk : ((t.pos).prox) | t.pos' = tk
}",1

Pairs,7
,,"always (all t:Train |t.pos in Entry  implies  (t.pos'= t.pos.prox)   or  t.pos in Exit implies no t.pos')",1
,,"always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.prox) ) or  t.pos in Exit implies no t.pos')",1
,,"always (all t:Train |t.pos in Entry  implies  (t.pos'in  t.pos.^prox)   or  t.pos in Exit implies no t.pos')",5

Pairs,2
,,"always(
all t:Train {
t.pos in Exit => no t.pos'
t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2
}
)",1
,,"always(
all t:Train {
t.pos in Exit => no t.pos'
t.pos in Entry => some tk2: (t.pos).prox | t.pos' = tk2
no t.pos => t.pos' = t.pos
}
)",1

Pairs,3
,,"all t:Train {
t.pos in Exit => no t.pos'
t.pos in (Track - Exit) => {
one tk:((t.pos).prox) | t.pos' = tk
}
}",1
,,"all t:Train {
t.pos in Exit => t.pos' = t.pos - t.pos
t.pos in (Track - Exit) => {
one tk:((t.pos).prox) | t.pos' = tk
}
}",1
,,"all t:Train {
some tk:t.pos {
(tk in Exit) => t.pos' = t.pos - tk
(tk not in Exit) => some tk2: tk.prox | t.pos' = tk2
}
}",1

Pairs,3
,,"all t:Train| {
always (t.pos in Exit  implies no t.pos')
always (t.pos in Entry  implies  t.pos' in t.pos.prox)
}",3

Pairs,1
,,"always (all t:Train |t.pos in Entry  implies  (t.pos'in  (t.pos.^prox) ) or  t.pos.prox in Exit implies no t.pos')",1

Pairs,1
,,"all t:Train {
t.pos in Exit => Train' = Train - t
t.pos in (Track - Exit) => {
one tk:((t.pos).prox) | t.pos' = tk
}
}",1

Pairs,2
,,"always(
all t:Train{
no t.pos :> Exit => eventually(t.pos in t.pos.prox)
some t.pos :> Exit => eventually(no t.pos)
}
)",1
,,"always( all t:Train | some t.pos :> Exit implies eventually (no t.pos) )
always( all t:Train | some t.pos :> (Track-Exit) implies eventually (t.pos in t.pos.prox) )",1

Pairs,1
,,"all t:Train |{
always (t.pos in Exit implies  t.pos'= t.pos)
always (t.pos in Entry  implies  (t.pos'in  (t.pos.prox) ))
}",1

Pairs,2
,,"all t:Train| {
always (t.pos in Exit  implies no t.pos')
always (t.pos in Entry  implies eventually t.pos' in t.pos.prox)
}",2

Pairs,1
,,"all t:Train| {
always (t.pos in Exit  implies no t.pos.prox')
always (t.pos in Track-Exit  implies  t.pos' in t.pos.prox'  )
}",1

Pairs,1
,,"all t:Train{
always( t.pos in Exit implies eventually no t.pos)
always( t.pos in Entry implies eventually t.pos in t.pos.prox)
}",1

Pairs,2
,,"all t:Train| {
always (t.pos in Exit  implies eventually no t.pos)
always (t.pos in (Track-Exit)  implies  t.pos' in t.pos.prox)
}",1
,,"all t:Train| {
always (t.pos in Exit  implies eventually no t.pos')
always (t.pos in (Track-Exit)  implies  t.pos' in t.pos.prox)
}",1

Pairs,1
,,"all t:Train {
some t.pos =>{
t.pos in Exit => t.pos' = t.pos - t.pos
t.pos in (Track - Exit) => {
one tk:((t.pos).prox) | t.pos' = tk
}
}
}",1

Pairs,1
,,"all t : Train | t.pos' != t.pos and no (t.pos & Exit) implies (t.pos' in t.pos.prox)
all t : Train | t.pos' != t.pos implies Train' = Train - t",1

Pairs,1
,,"always (all t:Train|(one t.pos:> Exit  => no t.pos'))
always (all t:Train| (one t.pos and some t.pos.prox ) => (t.pos' in t.pos.prox or t.pos'=t.pos) )",1

